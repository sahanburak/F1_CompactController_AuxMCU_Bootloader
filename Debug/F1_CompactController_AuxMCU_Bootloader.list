
F1_CompactController_AuxMCU_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004864  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f80  08004f80  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004f80  08004f80  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f80  08004f80  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e48  20000078  08004ffc  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ec0  08004ffc  00021ec0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127ba  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fdc  00000000  00000000  00032857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00035838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00036658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b925  00000000  00000000  00037370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001283b  00000000  00000000  00052c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ff4  00000000  00000000  000654d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fd4c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c48  00000000  00000000  000fd518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08004a30 	.word	0x08004a30

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08004a30 	.word	0x08004a30

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <crc_ccitt_byte>:

/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
static inline unsigned short crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	80fb      	strh	r3, [r7, #6]
 8000240:	4613      	mov	r3, r2
 8000242:	717b      	strb	r3, [r7, #5]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	0a1b      	lsrs	r3, r3, #8
 8000248:	b29a      	uxth	r2, r3
 800024a:	88f9      	ldrh	r1, [r7, #6]
 800024c:	797b      	ldrb	r3, [r7, #5]
 800024e:	404b      	eors	r3, r1
 8000250:	b2db      	uxtb	r3, r3
 8000252:	4905      	ldr	r1, [pc, #20]	; (8000268 <crc_ccitt_byte+0x34>)
 8000254:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000258:	4053      	eors	r3, r2
 800025a:	b29b      	uxth	r3, r3
}
 800025c:	4618      	mov	r0, r3
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	08004c34 	.word	0x08004c34

0800026c <crc16>:
unsigned short crc16(unsigned char *data_p, unsigned short length)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	807b      	strh	r3, [r7, #2]
	unsigned int crc = 0x0000;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
	while (length--)
 800027c:	e00a      	b.n	8000294 <crc16+0x28>
		crc = crc_ccitt_byte(crc, *data_p++);
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	b298      	uxth	r0, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	607a      	str	r2, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	4619      	mov	r1, r3
 800028c:	f7ff ffd2 	bl	8000234 <crc_ccitt_byte>
 8000290:	4603      	mov	r3, r0
 8000292:	60fb      	str	r3, [r7, #12]
	while (length--)
 8000294:	887b      	ldrh	r3, [r7, #2]
 8000296:	1e5a      	subs	r2, r3, #1
 8000298:	807a      	strh	r2, [r7, #2]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1ef      	bne.n	800027e <crc16+0x12>
	return (crc>>8) | (crc<<8);;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	0a1b      	lsrs	r3, r3, #8
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	021b      	lsls	r3, r3, #8
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4313      	orrs	r3, r2
 80002ae:	b29b      	uxth	r3, r3
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_DMA_Init+0x58>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a13      	ldr	r2, [pc, #76]	; (8000310 <MX_DMA_Init+0x58>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6153      	str	r3, [r2, #20]
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_DMA_Init+0x58>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f003 0301 	and.w	r3, r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2100      	movs	r1, #0
 80002da:	200c      	movs	r0, #12
 80002dc:	f001 fb5b 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80002e0:	200c      	movs	r0, #12
 80002e2:	f001 fb74 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2100      	movs	r1, #0
 80002ea:	200d      	movs	r0, #13
 80002ec:	f001 fb53 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002f0:	200d      	movs	r0, #13
 80002f2:	f001 fb6c 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	200e      	movs	r0, #14
 80002fc:	f001 fb4b 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000300:	200e      	movs	r0, #14
 8000302:	f001 fb64 	bl	80019ce <HAL_NVIC_EnableIRQ>

}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <FLASH_If_Init>:
 * @brief  Unlocks Flash for write access
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef FLASH_If_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
	 HAL_StatusTypeDef status = HAL_OK;
 800031a:	2300      	movs	r3, #0
 800031c:	71fb      	strb	r3, [r7, #7]
	/* Unlock the Program memory */
	status = HAL_FLASH_Unlock();
 800031e:	f001 fff3 	bl	8002308 <HAL_FLASH_Unlock>
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
	if(status != HAL_OK)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <FLASH_If_Init+0x1c>
		return status;
 800032c:	79fb      	ldrb	r3, [r7, #7]
 800032e:	e007      	b.n	8000340 <FLASH_If_Init+0x2c>
	/* Clear all FLASH flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <FLASH_If_Init+0x34>)
 8000332:	2234      	movs	r2, #52	; 0x34
 8000334:	60da      	str	r2, [r3, #12]
	/* Unlock the Program memory */
	status = HAL_FLASH_Lock();
 8000336:	f002 f80d 	bl	8002354 <HAL_FLASH_Lock>
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	return status;
 800033e:	79fb      	ldrb	r3, [r7, #7]
}
 8000340:	4618      	mov	r0, r3
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	40022000 	.word	0x40022000

0800034c <FLASH_If_Erase>:
 * @param  start: start of user flash area
 * @retval FLASHIF_OK : user flash area successfully erased
 *         FLASHIF_ERASEKO : error occurred
 */
uint32_t FLASH_If_Erase(uint32_t start,uint32_t length)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
	uint32_t NbrOfPages = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef status = HAL_OK;
 800035e:	2300      	movs	r3, #0
 8000360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000364:	f001 ffd0 	bl	8002308 <HAL_FLASH_Unlock>

	/* Get the sector where start the user flash area */
	NbrOfPages = length/FLASH_PAGE_SIZE;
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	0adb      	lsrs	r3, r3, #11
 800036c:	627b      	str	r3, [r7, #36]	; 0x24

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
	pEraseInit.PageAddress = start;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	617b      	str	r3, [r7, #20]
	//pEraseInit.Banks = FLASH_BANK_1;
	pEraseInit.NbPages = NbrOfPages;
 8000376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000378:	61bb      	str	r3, [r7, #24]
	status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 800037a:	f107 021c 	add.w	r2, r7, #28
 800037e:	f107 030c 	add.w	r3, r7, #12
 8000382:	4611      	mov	r1, r2
 8000384:	4618      	mov	r0, r3
 8000386:	f002 f88b 	bl	80024a0 <HAL_FLASHEx_Erase>
 800038a:	4603      	mov	r3, r0
 800038c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000390:	f001 ffe0 	bl	8002354 <HAL_FLASH_Lock>

	if (status != HAL_OK)
 8000394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <FLASH_If_Erase+0x54>
	{
		/* Error occurred while page erase */
		return FLASHIF_ERASEKO;
 800039c:	2301      	movs	r3, #1
 800039e:	e000      	b.n	80003a2 <FLASH_If_Erase+0x56>
	}

	return FLASHIF_OK;
 80003a0:	2300      	movs	r3, #0
}
 80003a2:	4618      	mov	r0, r3
 80003a4:	3728      	adds	r7, #40	; 0x28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	2200      	movs	r2, #0
 80003b8:	601a      	str	r2, [r3, #0]
 80003ba:	605a      	str	r2, [r3, #4]
 80003bc:	609a      	str	r2, [r3, #8]
 80003be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c0:	4b43      	ldr	r3, [pc, #268]	; (80004d0 <MX_GPIO_Init+0x124>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a42      	ldr	r2, [pc, #264]	; (80004d0 <MX_GPIO_Init+0x124>)
 80003c6:	f043 0310 	orr.w	r3, r3, #16
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b40      	ldr	r3, [pc, #256]	; (80004d0 <MX_GPIO_Init+0x124>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0310 	and.w	r3, r3, #16
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003d8:	4b3d      	ldr	r3, [pc, #244]	; (80004d0 <MX_GPIO_Init+0x124>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a3c      	ldr	r2, [pc, #240]	; (80004d0 <MX_GPIO_Init+0x124>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b3a      	ldr	r3, [pc, #232]	; (80004d0 <MX_GPIO_Init+0x124>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0320 	and.w	r3, r3, #32
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f0:	4b37      	ldr	r3, [pc, #220]	; (80004d0 <MX_GPIO_Init+0x124>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a36      	ldr	r2, [pc, #216]	; (80004d0 <MX_GPIO_Init+0x124>)
 80003f6:	f043 0304 	orr.w	r3, r3, #4
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b34      	ldr	r3, [pc, #208]	; (80004d0 <MX_GPIO_Init+0x124>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000408:	4b31      	ldr	r3, [pc, #196]	; (80004d0 <MX_GPIO_Init+0x124>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a30      	ldr	r2, [pc, #192]	; (80004d0 <MX_GPIO_Init+0x124>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b2e      	ldr	r3, [pc, #184]	; (80004d0 <MX_GPIO_Init+0x124>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0308 	and.w	r3, r3, #8
 800041c:	603b      	str	r3, [r7, #0]
 800041e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f640 110c 	movw	r1, #2316	; 0x90c
 8000426:	482b      	ldr	r0, [pc, #172]	; (80004d4 <MX_GPIO_Init+0x128>)
 8000428:	f002 fa76 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT_LED1_Pin|INT_LED2_Pin, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000432:	4829      	ldr	r0, [pc, #164]	; (80004d8 <MX_GPIO_Init+0x12c>)
 8000434:	f002 fa70 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043e:	4827      	ldr	r0, [pc, #156]	; (80004dc <MX_GPIO_Init+0x130>)
 8000440:	f002 fa6a 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin;
 8000444:	f640 130c 	movw	r3, #2316	; 0x90c
 8000448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	2301      	movs	r3, #1
 800044c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000452:	2302      	movs	r3, #2
 8000454:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000456:	f107 0310 	add.w	r3, r7, #16
 800045a:	4619      	mov	r1, r3
 800045c:	481d      	ldr	r0, [pc, #116]	; (80004d4 <MX_GPIO_Init+0x128>)
 800045e:	f002 f8c7 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_MODE_SEL_Pin;
 8000462:	2320      	movs	r3, #32
 8000464:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_GPIO_Init+0x134>)
 8000468:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STM_MODE_SEL_GPIO_Port, &GPIO_InitStruct);
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	4619      	mov	r1, r3
 8000474:	4818      	ldr	r0, [pc, #96]	; (80004d8 <MX_GPIO_Init+0x12c>)
 8000476:	f002 f8bb 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INT_LED1_Pin|INT_LED2_Pin;
 800047a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800047e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	2301      	movs	r3, #1
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000488:	2302      	movs	r3, #2
 800048a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048c:	f107 0310 	add.w	r3, r7, #16
 8000490:	4619      	mov	r1, r3
 8000492:	4811      	ldr	r0, [pc, #68]	; (80004d8 <MX_GPIO_Init+0x12c>)
 8000494:	f002 f8ac 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 8000498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	480a      	ldr	r0, [pc, #40]	; (80004dc <MX_GPIO_Init+0x130>)
 80004b2:	f002 f89d 	bl	80025f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2100      	movs	r1, #0
 80004ba:	2017      	movs	r0, #23
 80004bc:	f001 fa6b 	bl	8001996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004c0:	2017      	movs	r0, #23
 80004c2:	f001 fa84 	bl	80019ce <HAL_NVIC_EnableIRQ>

}
 80004c6:	bf00      	nop
 80004c8:	3720      	adds	r7, #32
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010800 	.word	0x40010800
 80004d8:	40011000 	.word	0x40011000
 80004dc:	40010c00 	.word	0x40010c00
 80004e0:	10310000 	.word	0x10310000

080004e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <MX_I2C1_Init+0x50>)
 80004ea:	4a13      	ldr	r2, [pc, #76]	; (8000538 <MX_I2C1_Init+0x54>)
 80004ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <MX_I2C1_Init+0x50>)
 80004f0:	4a12      	ldr	r2, [pc, #72]	; (800053c <MX_I2C1_Init+0x58>)
 80004f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <MX_I2C1_Init+0x50>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <MX_I2C1_Init+0x50>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_I2C1_Init+0x50>)
 8000502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <MX_I2C1_Init+0x50>)
 800050a:	2200      	movs	r2, #0
 800050c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <MX_I2C1_Init+0x50>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <MX_I2C1_Init+0x50>)
 8000516:	2200      	movs	r2, #0
 8000518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <MX_I2C1_Init+0x50>)
 800051c:	2200      	movs	r2, #0
 800051e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <MX_I2C1_Init+0x50>)
 8000522:	f002 fa43 	bl	80029ac <HAL_I2C_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800052c:	f000 f900 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	200000b0 	.word	0x200000b0
 8000538:	40005400 	.word	0x40005400
 800053c:	00061a80 	.word	0x00061a80

08000540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <HAL_I2C_MspInit+0x70>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d123      	bne.n	80005a8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_I2C_MspInit+0x74>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a13      	ldr	r2, [pc, #76]	; (80005b4 <HAL_I2C_MspInit+0x74>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_I2C_MspInit+0x74>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000578:	23c0      	movs	r3, #192	; 0xc0
 800057a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800057c:	2312      	movs	r3, #18
 800057e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000580:	2303      	movs	r3, #3
 8000582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	4619      	mov	r1, r3
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <HAL_I2C_MspInit+0x78>)
 800058c:	f002 f830 	bl	80025f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_I2C_MspInit+0x74>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_I2C_MspInit+0x74>)
 8000596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800059a:	61d3      	str	r3, [r2, #28]
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_I2C_MspInit+0x74>)
 800059e:	69db      	ldr	r3, [r3, #28]
 80005a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40005400 	.word	0x40005400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010c00 	.word	0x40010c00

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c0:	f001 f8b0 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c4:	f000 f822 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c8:	f7ff fef0 	bl	80003ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80005cc:	f7ff ff8a 	bl	80004e4 <MX_I2C1_Init>
  MX_DMA_Init();
 80005d0:	f7ff fe72 	bl	80002b8 <MX_DMA_Init>
  MX_SPI1_Init();
 80005d4:	f000 fde2 	bl	800119c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005d8:	f000 ffa0 	bl	800151c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  comms_set_mode();
 80005dc:	f000 f85c 	bl	8000698 <comms_set_mode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dbprintf("Rota Compact Controller Auxiliary MCU Bootloader");
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <main+0x44>)
 80005e2:	f001 f867 	bl	80016b4 <dbprintf>
  gRunMode = RT_RunMode_BL;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <main+0x48>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(g_comms_mode == COMMS_MODE_PDIO){
 80005ec:	4b06      	ldr	r3, [pc, #24]	; (8000608 <main+0x4c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <main+0x3e>
	  		rt_get_io_values();
 80005f4:	f000 fdcc 	bl	8001190 <rt_get_io_values>
 80005f8:	e7f8      	b.n	80005ec <main+0x30>
		}else{
			rt_bus_proto_bl_dt();
 80005fa:	f000 fc51 	bl	8000ea0 <rt_bus_proto_bl_dt>
	  if(g_comms_mode == COMMS_MODE_PDIO){
 80005fe:	e7f5      	b.n	80005ec <main+0x30>
 8000600:	08004a48 	.word	0x08004a48
 8000604:	20000094 	.word	0x20000094
 8000608:	20000096 	.word	0x20000096

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b090      	sub	sp, #64	; 0x40
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0318 	add.w	r3, r7, #24
 8000616:	2228      	movs	r2, #40	; 0x28
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fdd4 	bl	80041c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062e:	2301      	movs	r3, #1
 8000630:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000644:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800064a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0318 	add.w	r3, r7, #24
 8000654:	4618      	mov	r0, r3
 8000656:	f002 faed 	bl	8002c34 <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000660:	f000 f866 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000664:	230f      	movs	r3, #15
 8000666:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2101      	movs	r1, #1
 800067e:	4618      	mov	r0, r3
 8000680:	f002 fd58 	bl	8003134 <HAL_RCC_ClockConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800068a:	f000 f851 	bl	8000730 <Error_Handler>
  }
}
 800068e:	bf00      	nop
 8000690:	3740      	adds	r7, #64	; 0x40
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <comms_set_mode>:

/* USER CODE BEGIN 4 */

void comms_set_mode()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	SPI_DMA_Reset();
 800069c:	f000 fac2 	bl	8000c24 <SPI_DMA_Reset>
	if (STM_MODE_SEL_GPIO_Port->IDR & STM_MODE_SEL_Pin){
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <comms_set_mode+0x4c>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f003 0320 	and.w	r3, r3, #32
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00c      	beq.n	80006c6 <comms_set_mode+0x2e>
		g_comms_mode = COMMS_MODE_CONF;
 80006ac:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <comms_set_mode+0x50>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
		dbprintf("Conf Mode");
 80006b2:	480e      	ldr	r0, [pc, #56]	; (80006ec <comms_set_mode+0x54>)
 80006b4:	f000 fffe 	bl	80016b4 <dbprintf>
		ERR_LED1_On();
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <comms_set_mode+0x4c>)
 80006c0:	f002 f92a 	bl	8002918 <HAL_GPIO_WritePin>
	}else{
		g_comms_mode = COMMS_MODE_PDIO;
		dbprintf("PDIO Mode");
		ERR_LED1_Off();
	}
}
 80006c4:	e00b      	b.n	80006de <comms_set_mode+0x46>
		g_comms_mode = COMMS_MODE_PDIO;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <comms_set_mode+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
		dbprintf("PDIO Mode");
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <comms_set_mode+0x58>)
 80006ce:	f000 fff1 	bl	80016b4 <dbprintf>
		ERR_LED1_Off();
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d8:	4802      	ldr	r0, [pc, #8]	; (80006e4 <comms_set_mode+0x4c>)
 80006da:	f002 f91d 	bl	8002918 <HAL_GPIO_WritePin>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40011000 	.word	0x40011000
 80006e8:	20000096 	.word	0x20000096
 80006ec:	08004a7c 	.word	0x08004a7c
 80006f0:	08004a88 	.word	0x08004a88

080006f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	80fb      	strh	r3, [r7, #6]
	comms_set_mode();
 80006fe:	f7ff ffcb 	bl	8000698 <comms_set_mode>
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	dbprintf("%s",__func__);
 8000714:	4904      	ldr	r1, [pc, #16]	; (8000728 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <HAL_SPI_TxRxCpltCallback+0x20>)
 8000718:	f000 ffcc 	bl	80016b4 <dbprintf>
	SPI_DMA_Reset();
 800071c:	f000 fa82 	bl	8000c24 <SPI_DMA_Reset>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	08004e34 	.word	0x08004e34
 800072c:	08004a94 	.word	0x08004a94

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	e7fe      	b.n	8000738 <Error_Handler+0x8>
	...

0800073c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000740:	f3bf 8f4f 	dsb	sy
}
 8000744:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <__NVIC_SystemReset+0x24>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800074e:	4904      	ldr	r1, [pc, #16]	; (8000760 <__NVIC_SystemReset+0x24>)
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <__NVIC_SystemReset+0x28>)
 8000752:	4313      	orrs	r3, r2
 8000754:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000756:	f3bf 8f4f 	dsb	sy
}
 800075a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <__NVIC_SystemReset+0x20>
 8000760:	e000ed00 	.word	0xe000ed00
 8000764:	05fa0004 	.word	0x05fa0004

08000768 <rt_bus_proto_frame_pack>:

/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
void rt_bus_proto_frame_pack(tRT_Command_Packet sRT_Command_Packet, uint16_t *datalength)
{
 8000768:	b084      	sub	sp, #16
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	f107 0c10 	add.w	ip, r7, #16
 8000774:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t cCRC = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	80fb      	strh	r3, [r7, #6]

	sRT_Command_Packet.stx = PRT_STX;
 800077c:	2301      	movs	r3, #1
 800077e:	743b      	strb	r3, [r7, #16]
	sRT_Command_Packet.address = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	827b      	strh	r3, [r7, #18]
	sRT_Command_Packet.len = (*datalength)+sizeof(sRT_Command_Packet.cmd);
 8000784:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b29b      	uxth	r3, r3
 800078e:	82bb      	strh	r3, [r7, #20]

	cCRC =  crc16(&sRT_Command_Packet.address, (*datalength)+5);
 8000790:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3305      	adds	r3, #5
 8000798:	b29a      	uxth	r2, r3
 800079a:	f107 0312 	add.w	r3, r7, #18
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fd63 	bl	800026c <crc16>
 80007a6:	4603      	mov	r3, r0
 80007a8:	80fb      	strh	r3, [r7, #6]
	sRT_Command_Packet.crc = cCRC;
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	f8a7 3818 	strh.w	r3, [r7, #2072]	; 0x818
	sRT_Command_Packet.etx = PRT_ETX;
 80007b0:	2303      	movs	r3, #3
 80007b2:	f887 381a 	strb.w	r3, [r7, #2074]	; 0x81a

	int offset = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.stx,sizeof(sRT_Command_Packet.stx));
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	4a22      	ldr	r2, [pc, #136]	; (8000848 <rt_bus_proto_frame_pack+0xe0>)
 80007be:	4413      	add	r3, r2
 80007c0:	7c3a      	ldrb	r2, [r7, #16]
 80007c2:	701a      	strb	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.stx);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.address,sizeof(sRT_Command_Packet.address));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	4a1e      	ldr	r2, [pc, #120]	; (8000848 <rt_bus_proto_frame_pack+0xe0>)
 80007ce:	4413      	add	r3, r2
 80007d0:	8a7a      	ldrh	r2, [r7, #18]
 80007d2:	801a      	strh	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.address);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	3302      	adds	r3, #2
 80007d8:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.len,sizeof(sRT_Command_Packet.len));
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <rt_bus_proto_frame_pack+0xe0>)
 80007de:	4413      	add	r3, r2
 80007e0:	8aba      	ldrh	r2, [r7, #20]
 80007e2:	801a      	strh	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.len);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	3302      	adds	r3, #2
 80007e8:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.cmd,sizeof(sRT_Command_Packet.cmd));
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	4a16      	ldr	r2, [pc, #88]	; (8000848 <rt_bus_proto_frame_pack+0xe0>)
 80007ee:	4413      	add	r3, r2
 80007f0:	7dba      	ldrb	r2, [r7, #22]
 80007f2:	701a      	strb	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.cmd);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.data[0],(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd)));
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	4a12      	ldr	r2, [pc, #72]	; (8000848 <rt_bus_proto_frame_pack+0xe0>)
 80007fe:	4413      	add	r3, r2
 8000800:	8aba      	ldrh	r2, [r7, #20]
 8000802:	3a01      	subs	r2, #1
 8000804:	f107 0117 	add.w	r1, r7, #23
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fccf 	bl	80041ac <memcpy>
	offset +=(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd));
 800080e:	8abb      	ldrh	r3, [r7, #20]
 8000810:	461a      	mov	r2, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	4413      	add	r3, r2
 8000816:	3b01      	subs	r3, #1
 8000818:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.crc,sizeof(sRT_Command_Packet.crc));
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <rt_bus_proto_frame_pack+0xe0>)
 800081e:	4413      	add	r3, r2
 8000820:	f8b7 2818 	ldrh.w	r2, [r7, #2072]	; 0x818
 8000824:	801a      	strh	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.crc);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	3302      	adds	r3, #2
 800082a:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.etx,sizeof(sRT_Command_Packet.etx));
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	4a06      	ldr	r2, [pc, #24]	; (8000848 <rt_bus_proto_frame_pack+0xe0>)
 8000830:	4413      	add	r3, r2
 8000832:	f897 281a 	ldrb.w	r2, [r7, #2074]	; 0x81a
 8000836:	701a      	strb	r2, [r3, #0]
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000842:	b004      	add	sp, #16
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000104 	.word	0x20000104

0800084c <rt_bus_proto_pack_parser>:

tRT_Command_Packet rt_bus_proto_pack_parser(uint8_t *data){
 800084c:	b580      	push	{r7, lr}
 800084e:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8000852:	af00      	add	r7, sp, #0
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	6018      	str	r0, [r3, #0]
 8000858:	463b      	mov	r3, r7
 800085a:	6019      	str	r1, [r3, #0]

	tRT_Command_Packet sRT_Command_Packet;
	int offset = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8000862:	463b      	mov	r3, r7
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	781a      	ldrb	r2, [r3, #0]
	memcpy(&sRT_Command_Packet.stx,&data[0],sizeof(sRT_Command_Packet.stx));
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	701a      	strb	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.stx);
 800086e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000872:	3301      	adds	r3, #1
 8000874:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.address,&data[offset],sizeof(sRT_Command_Packet.address));
 8000878:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800087c:	463a      	mov	r2, r7
 800087e:	6812      	ldr	r2, [r2, #0]
 8000880:	4413      	add	r3, r2
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	b29a      	uxth	r2, r3
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	805a      	strh	r2, [r3, #2]
	offset +=sizeof(sRT_Command_Packet.address);
 800088c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000890:	3302      	adds	r3, #2
 8000892:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.len,&data[offset],sizeof(sRT_Command_Packet.len));
 8000896:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800089a:	463a      	mov	r2, r7
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	809a      	strh	r2, [r3, #4]
	offset +=sizeof(sRT_Command_Packet.len);
 80008aa:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80008ae:	3302      	adds	r3, #2
 80008b0:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.cmd,&data[offset],sizeof(sRT_Command_Packet.cmd));
 80008b4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80008b8:	463a      	mov	r2, r7
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	4413      	add	r3, r2
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	719a      	strb	r2, [r3, #6]
	offset +=sizeof(sRT_Command_Packet.cmd);
 80008c6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80008ca:	3301      	adds	r3, #1
 80008cc:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.data,&data[offset],(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd)));
 80008d0:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80008d4:	463a      	mov	r2, r7
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	18d1      	adds	r1, r2, r3
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	1e5a      	subs	r2, r3, #1
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	3307      	adds	r3, #7
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 fc5f 	bl	80041ac <memcpy>
	offset +=(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd));
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	889b      	ldrh	r3, [r3, #4]
 80008f4:	461a      	mov	r2, r3
 80008f6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80008fa:	4413      	add	r3, r2
 80008fc:	3b01      	subs	r3, #1
 80008fe:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.crc,&data[offset],sizeof(sRT_Command_Packet.crc));
 8000902:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000906:	463a      	mov	r2, r7
 8000908:	6812      	ldr	r2, [r2, #0]
 800090a:	4413      	add	r3, r2
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	b29a      	uxth	r2, r3
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
	offset +=sizeof(sRT_Command_Packet.crc);
 8000918:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800091c:	3302      	adds	r3, #2
 800091e:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.etx,&data[offset],sizeof(sRT_Command_Packet.etx));
 8000922:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000926:	463a      	mov	r2, r7
 8000928:	6812      	ldr	r2, [r2, #0]
 800092a:	4413      	add	r3, r2
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
	return sRT_Command_Packet;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	f107 0308 	add.w	r3, r7, #8
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	f640 030c 	movw	r3, #2060	; 0x80c
 8000946:	461a      	mov	r2, r3
 8000948:	f003 fc30 	bl	80041ac <memcpy>
}
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <rt_bus_cmd_ping_handler>:

uint32_t rt_bus_cmd_ping_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	607a      	str	r2, [r7, #4]
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	460b      	mov	r3, r1
 8000966:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 8000968:	490b      	ldr	r1, [pc, #44]	; (8000998 <rt_bus_cmd_ping_handler+0x40>)
 800096a:	480c      	ldr	r0, [pc, #48]	; (800099c <rt_bus_cmd_ping_handler+0x44>)
 800096c:	f000 fea2 	bl	80016b4 <dbprintf>
	if (rxLen != 1)
 8000970:	897b      	ldrh	r3, [r7, #10]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d001      	beq.n	800097a <rt_bus_cmd_ping_handler+0x22>
	{
		return RT_PROTO_FrameError;
 8000976:	2301      	movs	r3, #1
 8000978:	e009      	b.n	800098e <rt_bus_cmd_ping_handler+0x36>
	}

	txData[0] = rxData[0] + 1;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	b2da      	uxtb	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	701a      	strb	r2, [r3, #0]
	*txLen = 1;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	2201      	movs	r2, #1
 800098a:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	08004e80 	.word	0x08004e80
 800099c:	08004a98 	.word	0x08004a98

080009a0 <rt_bus_cmd_reset>:

uint32_t rt_bus_cmd_reset (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	60f8      	str	r0, [r7, #12]
 80009a8:	607a      	str	r2, [r7, #4]
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	460b      	mov	r3, r1
 80009ae:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 80009b0:	4902      	ldr	r1, [pc, #8]	; (80009bc <rt_bus_cmd_reset+0x1c>)
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <rt_bus_cmd_reset+0x20>)
 80009b4:	f000 fe7e 	bl	80016b4 <dbprintf>
	/*iapMailbox[0] = 0;
	iapMailbox[1] = 0;*/
	NVIC_SystemReset();
 80009b8:	f7ff fec0 	bl	800073c <__NVIC_SystemReset>
 80009bc:	08004e98 	.word	0x08004e98
 80009c0:	08004a98 	.word	0x08004a98

080009c4 <rt_bus_cmd_get_runmode_handler>:
	return RT_PROTO_OK;
}


uint32_t rt_bus_cmd_get_runmode_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	460b      	mov	r3, r1
 80009d2:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 80009d4:	4909      	ldr	r1, [pc, #36]	; (80009fc <rt_bus_cmd_get_runmode_handler+0x38>)
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <rt_bus_cmd_get_runmode_handler+0x3c>)
 80009d8:	f000 fe6c 	bl	80016b4 <dbprintf>
	txData[0] = gRunMode;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <rt_bus_cmd_get_runmode_handler+0x40>)
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	701a      	strb	r2, [r3, #0]
	(*txLen) = (*txLen)+1;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	08004eac 	.word	0x08004eac
 8000a00:	08004a98 	.word	0x08004a98
 8000a04:	20000094 	.word	0x20000094

08000a08 <get_mem_type>:
 *txLen = length;
	return RT_PROTO_OK;
}*/

uint32_t get_mem_type(uint32_t address)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	if ((address >= FLASH_START_ADDRESS) & (address<=FLASH_END_ADDRESS))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f06f 4278 	mvn.w	r2, #4160749568	; 0xf8000000
 8000a16:	4293      	cmp	r3, r2
 8000a18:	bf8c      	ite	hi
 8000a1a:	2301      	movhi	r3, #1
 8000a1c:	2300      	movls	r3, #0
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4913      	ldr	r1, [pc, #76]	; (8000a70 <get_mem_type+0x68>)
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf94      	ite	ls
 8000a28:	2301      	movls	r3, #1
 8000a2a:	2300      	movhi	r3, #0
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	4013      	ands	r3, r2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <get_mem_type+0x32>
		return MEM_TYPE_FLASH;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e015      	b.n	8000a66 <get_mem_type+0x5e>
	else if ((address >= RAM_START_ADDRESS) & (address <= RAM_END_ADDRESS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000a40:	4293      	cmp	r3, r2
 8000a42:	bf8c      	ite	hi
 8000a44:	2301      	movhi	r3, #1
 8000a46:	2300      	movls	r3, #0
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4909      	ldr	r1, [pc, #36]	; (8000a74 <get_mem_type+0x6c>)
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	bf94      	ite	ls
 8000a52:	2301      	movls	r3, #1
 8000a54:	2300      	movhi	r3, #0
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <get_mem_type+0x5c>
		return MEM_TYPE_RAM;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <get_mem_type+0x5e>
	else
		return MEM_TYPE_UNK;
 8000a64:	2303      	movs	r3, #3
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	08040000 	.word	0x08040000
 8000a74:	2000c000 	.word	0x2000c000

08000a78 <rt_bus_cmd_bl_stay>:

uint32_t rt_bus_cmd_bl_stay (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	460b      	mov	r3, r1
 8000a86:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 8000a88:	4905      	ldr	r1, [pc, #20]	; (8000aa0 <rt_bus_cmd_bl_stay+0x28>)
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <rt_bus_cmd_bl_stay+0x2c>)
 8000a8c:	f000 fe12 	bl	80016b4 <dbprintf>
	gStayInBootloader = 1;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <rt_bus_cmd_bl_stay+0x30>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
	return RT_PROTO_OK;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	08004ecc 	.word	0x08004ecc
 8000aa4:	08004a98 	.word	0x08004a98
 8000aa8:	20000095 	.word	0x20000095

08000aac <rt_bus_cmd_bl_erase_handler>:

	return RT_PROTO_OK;
}

uint32_t rt_bus_cmd_bl_erase_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	607a      	str	r2, [r7, #4]
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 8000abc:	4945      	ldr	r1, [pc, #276]	; (8000bd4 <rt_bus_cmd_bl_erase_handler+0x128>)
 8000abe:	4846      	ldr	r0, [pc, #280]	; (8000bd8 <rt_bus_cmd_bl_erase_handler+0x12c>)
 8000ac0:	f000 fdf8 	bl	80016b4 <dbprintf>
	uint32_t eraseaddress;
	uint32_t eraseLen;
	uint32_t mtype = MEM_TYPE_UNK;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	61fb      	str	r3, [r7, #28]

	dbprintf("%s_%d",__func__,__LINE__);
 8000ac8:	f240 1213 	movw	r2, #275	; 0x113
 8000acc:	4941      	ldr	r1, [pc, #260]	; (8000bd4 <rt_bus_cmd_bl_erase_handler+0x128>)
 8000ace:	4843      	ldr	r0, [pc, #268]	; (8000bdc <rt_bus_cmd_bl_erase_handler+0x130>)
 8000ad0:	f000 fdf0 	bl	80016b4 <dbprintf>
	if (rxLen != 0x08)
 8000ad4:	897b      	ldrh	r3, [r7, #10]
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d001      	beq.n	8000ade <rt_bus_cmd_bl_erase_handler+0x32>
		return RT_PROTO_DataError;
 8000ada:	2302      	movs	r3, #2
 8000adc:	e076      	b.n	8000bcc <rt_bus_cmd_bl_erase_handler+0x120>

	dbprintf("%s_%d",__func__,__LINE__);
 8000ade:	f240 1217 	movw	r2, #279	; 0x117
 8000ae2:	493c      	ldr	r1, [pc, #240]	; (8000bd4 <rt_bus_cmd_bl_erase_handler+0x128>)
 8000ae4:	483d      	ldr	r0, [pc, #244]	; (8000bdc <rt_bus_cmd_bl_erase_handler+0x130>)
 8000ae6:	f000 fde5 	bl	80016b4 <dbprintf>
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
	memcpy(&eraseaddress,&rxData[0],4);
 8000aee:	61bb      	str	r3, [r7, #24]
	memcpy(&eraseLen,&rxData[4],4);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3304      	adds	r3, #4
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	617b      	str	r3, [r7, #20]

	dbprintf("Erasing flash... Start Address : %08X, Size: %d",eraseaddress,eraseLen);
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	4619      	mov	r1, r3
 8000afe:	4838      	ldr	r0, [pc, #224]	; (8000be0 <rt_bus_cmd_bl_erase_handler+0x134>)
 8000b00:	f000 fdd8 	bl	80016b4 <dbprintf>

	if (eraseaddress % FLASH_PAGE_SIZE){
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d007      	beq.n	8000b1e <rt_bus_cmd_bl_erase_handler+0x72>
		dbprintf("%s_%d",__func__,__LINE__);
 8000b0e:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8000b12:	4930      	ldr	r1, [pc, #192]	; (8000bd4 <rt_bus_cmd_bl_erase_handler+0x128>)
 8000b14:	4831      	ldr	r0, [pc, #196]	; (8000bdc <rt_bus_cmd_bl_erase_handler+0x130>)
 8000b16:	f000 fdcd 	bl	80016b4 <dbprintf>
		return RT_PROTO_DataError;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	e056      	b.n	8000bcc <rt_bus_cmd_bl_erase_handler+0x120>
	}
	if (eraseLen % FLASH_PAGE_SIZE){
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d007      	beq.n	8000b38 <rt_bus_cmd_bl_erase_handler+0x8c>
		dbprintf("%s_%d",__func__,__LINE__);
 8000b28:	f44f 7291 	mov.w	r2, #290	; 0x122
 8000b2c:	4929      	ldr	r1, [pc, #164]	; (8000bd4 <rt_bus_cmd_bl_erase_handler+0x128>)
 8000b2e:	482b      	ldr	r0, [pc, #172]	; (8000bdc <rt_bus_cmd_bl_erase_handler+0x130>)
 8000b30:	f000 fdc0 	bl	80016b4 <dbprintf>
		return RT_PROTO_DataError;
 8000b34:	2302      	movs	r3, #2
 8000b36:	e049      	b.n	8000bcc <rt_bus_cmd_bl_erase_handler+0x120>
	}

	dbprintf("%s_%d",__func__,__LINE__);
 8000b38:	f44f 7293 	mov.w	r2, #294	; 0x126
 8000b3c:	4925      	ldr	r1, [pc, #148]	; (8000bd4 <rt_bus_cmd_bl_erase_handler+0x128>)
 8000b3e:	4827      	ldr	r0, [pc, #156]	; (8000bdc <rt_bus_cmd_bl_erase_handler+0x130>)
 8000b40:	f000 fdb8 	bl	80016b4 <dbprintf>
	mtype = get_mem_type(eraseaddress);
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff5e 	bl	8000a08 <get_mem_type>
 8000b4c:	61f8      	str	r0, [r7, #28]
	dbprintf("%s_%d",__func__,__LINE__);
 8000b4e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000b52:	4920      	ldr	r1, [pc, #128]	; (8000bd4 <rt_bus_cmd_bl_erase_handler+0x128>)
 8000b54:	4821      	ldr	r0, [pc, #132]	; (8000bdc <rt_bus_cmd_bl_erase_handler+0x130>)
 8000b56:	f000 fdad 	bl	80016b4 <dbprintf>

	if (mtype == MEM_TYPE_FLASH)
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d11e      	bne.n	8000b9e <rt_bus_cmd_bl_erase_handler+0xf2>
	{
		dbprintf("MEM_TYPE_FLASH");
 8000b60:	4820      	ldr	r0, [pc, #128]	; (8000be4 <rt_bus_cmd_bl_erase_handler+0x138>)
 8000b62:	f000 fda7 	bl	80016b4 <dbprintf>
		if (FLASH_If_Init() != HAL_OK){
 8000b66:	f7ff fbd5 	bl	8000314 <FLASH_If_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d004      	beq.n	8000b7a <rt_bus_cmd_bl_erase_handler+0xce>
			dbprintf("Flash init error");
 8000b70:	481d      	ldr	r0, [pc, #116]	; (8000be8 <rt_bus_cmd_bl_erase_handler+0x13c>)
 8000b72:	f000 fd9f 	bl	80016b4 <dbprintf>
			return RT_PROTO_ExcError;
 8000b76:	2304      	movs	r3, #4
 8000b78:	e028      	b.n	8000bcc <rt_bus_cmd_bl_erase_handler+0x120>
		}
		if (FLASH_If_Erase(eraseaddress,eraseLen) != HAL_OK){
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fbe3 	bl	800034c <FLASH_If_Erase>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d004      	beq.n	8000b96 <rt_bus_cmd_bl_erase_handler+0xea>
			dbprintf("RT_PROTO_ExcError");
 8000b8c:	4817      	ldr	r0, [pc, #92]	; (8000bec <rt_bus_cmd_bl_erase_handler+0x140>)
 8000b8e:	f000 fd91 	bl	80016b4 <dbprintf>
			return RT_PROTO_ExcError;
 8000b92:	2304      	movs	r3, #4
 8000b94:	e01a      	b.n	8000bcc <rt_bus_cmd_bl_erase_handler+0x120>
		}
		dbprintf("Erased flash");
 8000b96:	4816      	ldr	r0, [pc, #88]	; (8000bf0 <rt_bus_cmd_bl_erase_handler+0x144>)
 8000b98:	f000 fd8c 	bl	80016b4 <dbprintf>
 8000b9c:	e00f      	b.n	8000bbe <rt_bus_cmd_bl_erase_handler+0x112>
	}
	else if (mtype == MEM_TYPE_RAM)
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d10a      	bne.n	8000bba <rt_bus_cmd_bl_erase_handler+0x10e>
	{
		dbprintf("MEM_TYPE_RAM");
 8000ba4:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <rt_bus_cmd_bl_erase_handler+0x148>)
 8000ba6:	f000 fd85 	bl	80016b4 <dbprintf>
		memset((unsigned char *)eraseaddress,0,eraseLen);
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	4618      	mov	r0, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f003 fb08 	bl	80041c8 <memset>
 8000bb8:	e001      	b.n	8000bbe <rt_bus_cmd_bl_erase_handler+0x112>
	}
	else
	{
		return RT_PROTO_DataError;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e006      	b.n	8000bcc <rt_bus_cmd_bl_erase_handler+0x120>
	}

	dbprintf("%s_%d",__func__,__LINE__);
 8000bbe:	f240 1241 	movw	r2, #321	; 0x141
 8000bc2:	4904      	ldr	r1, [pc, #16]	; (8000bd4 <rt_bus_cmd_bl_erase_handler+0x128>)
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <rt_bus_cmd_bl_erase_handler+0x130>)
 8000bc6:	f000 fd75 	bl	80016b4 <dbprintf>
	return RT_PROTO_OK;
 8000bca:	2300      	movs	r3, #0
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08004ee0 	.word	0x08004ee0
 8000bd8:	08004a98 	.word	0x08004a98
 8000bdc:	08004a9c 	.word	0x08004a9c
 8000be0:	08004aa4 	.word	0x08004aa4
 8000be4:	08004ad4 	.word	0x08004ad4
 8000be8:	08004ae4 	.word	0x08004ae4
 8000bec:	08004af8 	.word	0x08004af8
 8000bf0:	08004b0c 	.word	0x08004b0c
 8000bf4:	08004b1c 	.word	0x08004b1c

08000bf8 <rt_bus_cmd_prepare_response_handler>:

uint32_t rt_bus_cmd_prepare_response_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	460b      	mov	r3, r1
 8000c06:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <rt_bus_cmd_prepare_response_handler+0x24>)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <rt_bus_cmd_prepare_response_handler+0x28>)
 8000c0c:	f000 fd52 	bl	80016b4 <dbprintf>
	return RT_PROTO_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	08004efc 	.word	0x08004efc
 8000c20:	08004a98 	.word	0x08004a98

08000c24 <SPI_DMA_Reset>:

void SPI_DMA_Reset(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	HAL_SPI_DMAStop(&hspi1);
 8000c28:	4809      	ldr	r0, [pc, #36]	; (8000c50 <SPI_DMA_Reset+0x2c>)
 8000c2a:	f002 fda3 	bl	8003774 <HAL_SPI_DMAStop>
	HAL_SPI_TransmitReceive_DMA(&hspi1,gSPI_Tx_Buf, gSPI_Rx_Buf, SPI_RX_BUF_SIZE);
 8000c2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c32:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <SPI_DMA_Reset+0x30>)
 8000c34:	4908      	ldr	r1, [pc, #32]	; (8000c58 <SPI_DMA_Reset+0x34>)
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <SPI_DMA_Reset+0x2c>)
 8000c38:	f002 fc9a 	bl	8003570 <HAL_SPI_TransmitReceive_DMA>
	prevDMACnt = SPI_RX_BUF_SIZE;
 8000c3c:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <SPI_DMA_Reset+0x38>)
 8000c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c42:	801a      	strh	r2, [r3, #0]
	rxFrameSize = 0;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SPI_DMA_Reset+0x3c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20001d20 	.word	0x20001d20
 8000c54:	20001520 	.word	0x20001520
 8000c58:	20000104 	.word	0x20000104
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000098 	.word	0x20000098

08000c64 <rt_bus_proto_bl_process>:

void rt_bus_proto_bl_process(tRT_Command_Packet sRT_Command_Packet )
{
 8000c64:	b084      	sub	sp, #16
 8000c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c6a:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8000c6e:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8000c72:	446f      	add	r7, sp
 8000c74:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000c78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t pSize = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	817b      	strh	r3, [r7, #10]
	uint16_t addr = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	813b      	strh	r3, [r7, #8]
	uint16_t cCRC = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	807b      	strh	r3, [r7, #2]
	uint16_t txSize = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	803b      	strh	r3, [r7, #0]
	uint32_t ret;
	if (isFrameReady)
 8000c8c:	4b73      	ldr	r3, [pc, #460]	; (8000e5c <rt_bus_proto_bl_process+0x1f8>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80c5 	beq.w	8000e20 <rt_bus_proto_bl_process+0x1bc>
	{
		cCRC = crc16(&sRT_Command_Packet.address, (sizeof(sRT_Command_Packet.address)+sizeof(sRT_Command_Packet.len)+sRT_Command_Packet.len));
 8000c96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c98:	3304      	adds	r3, #4
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fae2 	bl	800026c <crc16>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	807b      	strh	r3, [r7, #2]
		if(memcmp(&sRT_Command_Packet.crc,&cCRC,2) == 0){
 8000cac:	1cb9      	adds	r1, r7, #2
 8000cae:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f003 fa6b 	bl	8004190 <memcmp>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d166      	bne.n	8000d8e <rt_bus_proto_bl_process+0x12a>
			for (int i=0;i<gCommandCount ;i++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e05e      	b.n	8000d84 <rt_bus_proto_bl_process+0x120>
			{
				if (commands[i].cmd == sRT_Command_Packet.cmd)
 8000cc6:	4a66      	ldr	r2, [pc, #408]	; (8000e60 <rt_bus_proto_bl_process+0x1fc>)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000cce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d153      	bne.n	8000d7e <rt_bus_proto_bl_process+0x11a>
				{
					txSize = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	803b      	strh	r3, [r7, #0]
					gFrameCount++;
 8000cda:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <rt_bus_proto_bl_process+0x200>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	4a60      	ldr	r2, [pc, #384]	; (8000e64 <rt_bus_proto_bl_process+0x200>)
 8000ce2:	6013      	str	r3, [r2, #0]
					ret = commands[i].handler(&sRT_Command_Packet.data[0],(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd)),&gRT_Command_Packet.data[1],&txSize);
 8000ce4:	4a5e      	ldr	r2, [pc, #376]	; (8000e60 <rt_bus_proto_bl_process+0x1fc>)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	4413      	add	r3, r2
 8000cec:	685c      	ldr	r4, [r3, #4]
 8000cee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	b299      	uxth	r1, r3
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	f107 002f 	add.w	r0, r7, #47	; 0x2f
 8000cfa:	4a5b      	ldr	r2, [pc, #364]	; (8000e68 <rt_bus_proto_bl_process+0x204>)
 8000cfc:	47a0      	blx	r4
 8000cfe:	6078      	str	r0, [r7, #4]
					if(commands[i].cmd != CMD_Prepare_Response){
 8000d00:	4a57      	ldr	r2, [pc, #348]	; (8000e60 <rt_bus_proto_bl_process+0x1fc>)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000d08:	2b09      	cmp	r3, #9
 8000d0a:	d07c      	beq.n	8000e06 <rt_bus_proto_bl_process+0x1a2>
						//							dbprintf("Data :%02X %02X %02X",sRT_Command_Packet.data[0],sRT_Command_Packet.data[1],sRT_Command_Packet.data[2]);
						//							dbprintf("CRC :%04X",sRT_Command_Packet.crc);
						//							dbprintf("ETX :%02X",sRT_Command_Packet.etx);
						//							dbprintf("********************************************************");
						//						}
						gRT_Command_Packet.cmd = commands[i].cmd;
 8000d0c:	4a54      	ldr	r2, [pc, #336]	; (8000e60 <rt_bus_proto_bl_process+0x1fc>)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000d14:	4b55      	ldr	r3, [pc, #340]	; (8000e6c <rt_bus_proto_bl_process+0x208>)
 8000d16:	719a      	strb	r2, [r3, #6]
						if (ret == RT_PROTO_OK)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d107      	bne.n	8000d2e <rt_bus_proto_bl_process+0xca>
						{
							gRT_Command_Packet.data[0]= PRT_ACK;
 8000d1e:	4b53      	ldr	r3, [pc, #332]	; (8000e6c <rt_bus_proto_bl_process+0x208>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	71da      	strb	r2, [r3, #7]
							txSize ++;
 8000d24:	883b      	ldrh	r3, [r7, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	803b      	strh	r3, [r7, #0]
 8000d2c:	e008      	b.n	8000d40 <rt_bus_proto_bl_process+0xdc>
						}
						else
						{
							gRT_Command_Packet.data[0]= PRT_NCK;
 8000d2e:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <rt_bus_proto_bl_process+0x208>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	71da      	strb	r2, [r3, #7]
							gRT_Command_Packet.data[1]= ret;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b4c      	ldr	r3, [pc, #304]	; (8000e6c <rt_bus_proto_bl_process+0x208>)
 8000d3a:	721a      	strb	r2, [r3, #8]
							txSize = 2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	803b      	strh	r3, [r7, #0]
						}
						rt_bus_proto_frame_pack(gRT_Command_Packet/*commands[i].cmd*/,&txSize);
 8000d40:	4b4a      	ldr	r3, [pc, #296]	; (8000e6c <rt_bus_proto_bl_process+0x208>)
 8000d42:	463a      	mov	r2, r7
 8000d44:	f8cd 27fc 	str.w	r2, [sp, #2044]	; 0x7fc
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	f04f 0800 	mov.w	r8, #0
 8000d4e:	4690      	mov	r8, r2
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	2600      	movs	r6, #0
 8000d54:	4616      	mov	r6, r2
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	2500      	movs	r5, #0
 8000d5a:	4615      	mov	r5, r2
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	2400      	movs	r4, #0
 8000d60:	4614      	mov	r4, r2
 8000d62:	4668      	mov	r0, sp
 8000d64:	3310      	adds	r3, #16
 8000d66:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f003 fa1e 	bl	80041ac <memcpy>
 8000d70:	4640      	mov	r0, r8
 8000d72:	4631      	mov	r1, r6
 8000d74:	462a      	mov	r2, r5
 8000d76:	4623      	mov	r3, r4
 8000d78:	f7ff fcf6 	bl	8000768 <rt_bus_proto_frame_pack>
					}
					break;
 8000d7c:	e043      	b.n	8000e06 <rt_bus_proto_bl_process+0x1a2>
			for (int i=0;i<gCommandCount ;i++)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3301      	adds	r3, #1
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	2206      	movs	r2, #6
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	db9c      	blt.n	8000cc6 <rt_bus_proto_bl_process+0x62>
 8000d8c:	e03c      	b.n	8000e08 <rt_bus_proto_bl_process+0x1a4>
				//					dbprintf("ETX :%02X",sRT_Command_Packet.etx);
				//					dbprintf("********************************************************");
				//				}
			}
		}else{
			dbprintf("CRC ERROR: Calculated: %04X Received: %04X",cCRC,sRT_Command_Packet.crc);
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	; 0x830
 8000d96:	461a      	mov	r2, r3
 8000d98:	4835      	ldr	r0, [pc, #212]	; (8000e70 <rt_bus_proto_bl_process+0x20c>)
 8000d9a:	f000 fc8b 	bl	80016b4 <dbprintf>
			dbprintf("********************************************************");
 8000d9e:	4835      	ldr	r0, [pc, #212]	; (8000e74 <rt_bus_proto_bl_process+0x210>)
 8000da0:	f000 fc88 	bl	80016b4 <dbprintf>
			dbprintf("STX :%02X",sRT_Command_Packet.stx);
 8000da4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4833      	ldr	r0, [pc, #204]	; (8000e78 <rt_bus_proto_bl_process+0x214>)
 8000dac:	f000 fc82 	bl	80016b4 <dbprintf>
			dbprintf("ADDR :%04X",sRT_Command_Packet.address);
 8000db0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000db2:	4619      	mov	r1, r3
 8000db4:	4831      	ldr	r0, [pc, #196]	; (8000e7c <rt_bus_proto_bl_process+0x218>)
 8000db6:	f000 fc7d 	bl	80016b4 <dbprintf>
			dbprintf("LEN :%04X",sRT_Command_Packet.len);
 8000dba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4830      	ldr	r0, [pc, #192]	; (8000e80 <rt_bus_proto_bl_process+0x21c>)
 8000dc0:	f000 fc78 	bl	80016b4 <dbprintf>
			dbprintf("CMD :%02X",sRT_Command_Packet.cmd);
 8000dc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000dc8:	4619      	mov	r1, r3
 8000dca:	482e      	ldr	r0, [pc, #184]	; (8000e84 <rt_bus_proto_bl_process+0x220>)
 8000dcc:	f000 fc72 	bl	80016b4 <dbprintf>
			dbprintf("Data :%02X %02X %02X",sRT_Command_Packet.data[0],sRT_Command_Packet.data[1],sRT_Command_Packet.data[2]);
 8000dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000de0:	4829      	ldr	r0, [pc, #164]	; (8000e88 <rt_bus_proto_bl_process+0x224>)
 8000de2:	f000 fc67 	bl	80016b4 <dbprintf>
			dbprintf("CRC :%04X",sRT_Command_Packet.crc);
 8000de6:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	; 0x830
 8000dea:	4619      	mov	r1, r3
 8000dec:	4827      	ldr	r0, [pc, #156]	; (8000e8c <rt_bus_proto_bl_process+0x228>)
 8000dee:	f000 fc61 	bl	80016b4 <dbprintf>
			dbprintf("ETX :%02X",sRT_Command_Packet.etx);
 8000df2:	f897 3832 	ldrb.w	r3, [r7, #2098]	; 0x832
 8000df6:	4619      	mov	r1, r3
 8000df8:	4825      	ldr	r0, [pc, #148]	; (8000e90 <rt_bus_proto_bl_process+0x22c>)
 8000dfa:	f000 fc5b 	bl	80016b4 <dbprintf>
			dbprintf("********************************************************");
 8000dfe:	481d      	ldr	r0, [pc, #116]	; (8000e74 <rt_bus_proto_bl_process+0x210>)
 8000e00:	f000 fc58 	bl	80016b4 <dbprintf>
 8000e04:	e000      	b.n	8000e08 <rt_bus_proto_bl_process+0x1a4>
					break;
 8000e06:	bf00      	nop
		}
		memset(&sRT_Command_Packet,0,sizeof(tRT_Command_Packet));
 8000e08:	f640 020c 	movw	r2, #2060	; 0x80c
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000e12:	f003 f9d9 	bl	80041c8 <memset>
		SPI_DMA_Reset();
 8000e16:	f7ff ff05 	bl	8000c24 <SPI_DMA_Reset>
		isFrameReady = 0;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <rt_bus_proto_bl_process+0x1f8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
	}
	if (rxFrameSize)
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <rt_bus_proto_bl_process+0x230>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d011      	beq.n	8000e4c <rt_bus_proto_bl_process+0x1e8>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
	{
		__disable_irq();
		//dbprintf("lastRxTime: %d now: %d",lastRxTime,HAL_GetTick());
		if (HAL_GetTick() > (lastRxTime + 2000))
 8000e2c:	f000 fcd2 	bl	80017d4 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <rt_bus_proto_bl_process+0x234>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d904      	bls.n	8000e48 <rt_bus_proto_bl_process+0x1e4>
		{
			dbprintf("Timeout resetting...");
 8000e3e:	4817      	ldr	r0, [pc, #92]	; (8000e9c <rt_bus_proto_bl_process+0x238>)
 8000e40:	f000 fc38 	bl	80016b4 <dbprintf>
			SPI_DMA_Reset();
 8000e44:	f7ff feee 	bl	8000c24 <SPI_DMA_Reset>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e48:	b662      	cpsie	i
}
 8000e4a:	bf00      	nop
		}
		__enable_irq();
	}
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e56:	b004      	add	sp, #16
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000097 	.word	0x20000097
 8000e60:	08004e50 	.word	0x08004e50
 8000e64:	200000a0 	.word	0x200000a0
 8000e68:	20000d1c 	.word	0x20000d1c
 8000e6c:	20000d14 	.word	0x20000d14
 8000e70:	08004b2c 	.word	0x08004b2c
 8000e74:	08004b58 	.word	0x08004b58
 8000e78:	08004b94 	.word	0x08004b94
 8000e7c:	08004ba0 	.word	0x08004ba0
 8000e80:	08004bac 	.word	0x08004bac
 8000e84:	08004bb8 	.word	0x08004bb8
 8000e88:	08004bc4 	.word	0x08004bc4
 8000e8c:	08004bdc 	.word	0x08004bdc
 8000e90:	08004be8 	.word	0x08004be8
 8000e94:	20000098 	.word	0x20000098
 8000e98:	2000009c 	.word	0x2000009c
 8000e9c:	08004bf4 	.word	0x08004bf4

08000ea0 <rt_bus_proto_bl_dt>:

void rt_bus_proto_bl_dt(void)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	f5ad 5dc1 	sub.w	sp, sp, #6176	; 0x1820
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8000eac:	446f      	add	r7, sp
	uint16_t currentDMACnt = hspi1.hdmarx->Instance->CNDTR;
 8000eae:	4bb1      	ldr	r3, [pc, #708]	; (8001174 <rt_bus_proto_bl_dt+0x2d4>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000eba:	f102 0206 	add.w	r2, r2, #6
 8000ebe:	8013      	strh	r3, [r2, #0]
	uint16_t size=0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000ec6:	f102 0204 	add.w	r2, r2, #4
 8000eca:	8013      	strh	r3, [r2, #0]
	uint16_t start = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000ed2:	f102 0202 	add.w	r2, r2, #2
 8000ed6:	8013      	strh	r3, [r2, #0]
	tRT_Command_Packet sRT_Command_Packet;
	//
	//	if(currentDMACnt !=prevDMACnt){
	//		dbprintf("currentDMACnt: %d",currentDMACnt);
	//	}
	if (prevDMACnt > currentDMACnt)
 8000ed8:	4ba7      	ldr	r3, [pc, #668]	; (8001178 <rt_bus_proto_bl_dt+0x2d8>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000ee0:	f102 0206 	add.w	r2, r2, #6
 8000ee4:	8812      	ldrh	r2, [r2, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d270      	bcs.n	8000fcc <rt_bus_proto_bl_dt+0x12c>
	{
		lastRxTime = HAL_GetTick();
 8000eea:	f000 fc73 	bl	80017d4 <HAL_GetTick>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4aa2      	ldr	r2, [pc, #648]	; (800117c <rt_bus_proto_bl_dt+0x2dc>)
 8000ef2:	6013      	str	r3, [r2, #0]
		size = prevDMACnt - currentDMACnt;
 8000ef4:	4ba0      	ldr	r3, [pc, #640]	; (8001178 <rt_bus_proto_bl_dt+0x2d8>)
 8000ef6:	881a      	ldrh	r2, [r3, #0]
 8000ef8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000efc:	f103 0306 	add.w	r3, r3, #6
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f08:	f102 0204 	add.w	r2, r2, #4
 8000f0c:	8013      	strh	r3, [r2, #0]
		if (size > SPI_RX_BUF_SIZE)
 8000f0e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f12:	f103 0304 	add.w	r3, r3, #4
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f1c:	f200 811f 	bhi.w	800115e <rt_bus_proto_bl_dt+0x2be>
			return;

		if(size < 9)
 8000f20:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f24:	f103 0304 	add.w	r3, r3, #4
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	f240 8119 	bls.w	8001162 <rt_bus_proto_bl_dt+0x2c2>
			return;
		start = (SPI_RX_BUF_SIZE - prevDMACnt);
 8000f30:	4b91      	ldr	r3, [pc, #580]	; (8001178 <rt_bus_proto_bl_dt+0x2d8>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f38:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f3c:	f102 0202 	add.w	r2, r2, #2
 8000f40:	8013      	strh	r3, [r2, #0]

		if (rxFrameSize + size < SPI_RX_BUF_SIZE)
 8000f42:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f46:	f103 0304 	add.w	r3, r3, #4
 8000f4a:	881a      	ldrh	r2, [r3, #0]
 8000f4c:	4b8c      	ldr	r3, [pc, #560]	; (8001180 <rt_bus_proto_bl_dt+0x2e0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4413      	add	r3, r2
 8000f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f56:	d231      	bcs.n	8000fbc <rt_bus_proto_bl_dt+0x11c>
		{
			sRT_Command_Packet = rt_bus_proto_pack_parser(&gSPI_Rx_Buf[start]);
 8000f58:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f5c:	f103 0302 	add.w	r3, r3, #2
 8000f60:	881b      	ldrh	r3, [r3, #0]
 8000f62:	4a88      	ldr	r2, [pc, #544]	; (8001184 <rt_bus_proto_bl_dt+0x2e4>)
 8000f64:	441a      	add	r2, r3
 8000f66:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fc6d 	bl	800084c <rt_bus_proto_pack_parser>
			rxFrameSize += size;
 8000f72:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f76:	f103 0304 	add.w	r3, r3, #4
 8000f7a:	881a      	ldrh	r2, [r3, #0]
 8000f7c:	4b80      	ldr	r3, [pc, #512]	; (8001180 <rt_bus_proto_bl_dt+0x2e0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a7f      	ldr	r2, [pc, #508]	; (8001180 <rt_bus_proto_bl_dt+0x2e0>)
 8000f84:	6013      	str	r3, [r2, #0]
			if(sRT_Command_Packet.len < size){
 8000f86:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8000f8a:	889b      	ldrh	r3, [r3, #4]
 8000f8c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f90:	f102 0204 	add.w	r2, r2, #4
 8000f94:	8812      	ldrh	r2, [r2, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d910      	bls.n	8000fbc <rt_bus_proto_bl_dt+0x11c>
				if(sRT_Command_Packet.stx == PRT_STX && sRT_Command_Packet.etx==PRT_ETX){
 8000f9a:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d10b      	bne.n	8000fbc <rt_bus_proto_bl_dt+0x11c>
 8000fa4:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8000fa8:	f893 380a 	ldrb.w	r3, [r3, #2058]	; 0x80a
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d105      	bne.n	8000fbc <rt_bus_proto_bl_dt+0x11c>
					isFrameReady = 0x01;
 8000fb0:	4b75      	ldr	r3, [pc, #468]	; (8001188 <rt_bus_proto_bl_dt+0x2e8>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
					dbprintf("Packet Ready");
 8000fb6:	4875      	ldr	r0, [pc, #468]	; (800118c <rt_bus_proto_bl_dt+0x2ec>)
 8000fb8:	f000 fb7c 	bl	80016b4 <dbprintf>
				}
			}
		}
		prevDMACnt = currentDMACnt;
 8000fbc:	4a6e      	ldr	r2, [pc, #440]	; (8001178 <rt_bus_proto_bl_dt+0x2d8>)
 8000fbe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000fc2:	f103 0306 	add.w	r3, r3, #6
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	8013      	strh	r3, [r2, #0]
 8000fca:	e0b9      	b.n	8001140 <rt_bus_proto_bl_dt+0x2a0>

	}
	else if (prevDMACnt < currentDMACnt)
 8000fcc:	4b6a      	ldr	r3, [pc, #424]	; (8001178 <rt_bus_proto_bl_dt+0x2d8>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000fd4:	f102 0206 	add.w	r2, r2, #6
 8000fd8:	8812      	ldrh	r2, [r2, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	f240 80b0 	bls.w	8001140 <rt_bus_proto_bl_dt+0x2a0>
	{

		lastRxTime = HAL_GetTick();
 8000fe0:	f000 fbf8 	bl	80017d4 <HAL_GetTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a65      	ldr	r2, [pc, #404]	; (800117c <rt_bus_proto_bl_dt+0x2dc>)
 8000fe8:	6013      	str	r3, [r2, #0]
		size = prevDMACnt;
 8000fea:	4b63      	ldr	r3, [pc, #396]	; (8001178 <rt_bus_proto_bl_dt+0x2d8>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000ff2:	f102 0204 	add.w	r2, r2, #4
 8000ff6:	8013      	strh	r3, [r2, #0]
		if (size > SPI_RX_BUF_SIZE)
 8000ff8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000ffc:	f103 0304 	add.w	r3, r3, #4
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001006:	f200 80ae 	bhi.w	8001166 <rt_bus_proto_bl_dt+0x2c6>
			return;
		start = (SPI_RX_BUF_SIZE - prevDMACnt);
 800100a:	4b5b      	ldr	r3, [pc, #364]	; (8001178 <rt_bus_proto_bl_dt+0x2d8>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001012:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001016:	f102 0202 	add.w	r2, r2, #2
 800101a:	8013      	strh	r3, [r2, #0]

		if (rxFrameSize + size < SPI_RX_BUF_SIZE)
 800101c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001020:	f103 0304 	add.w	r3, r3, #4
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	4b56      	ldr	r3, [pc, #344]	; (8001180 <rt_bus_proto_bl_dt+0x2e0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001030:	d223      	bcs.n	800107a <rt_bus_proto_bl_dt+0x1da>
		{
			sRT_Command_Packet = rt_bus_proto_pack_parser(&gSPI_Rx_Buf[start]);
 8001032:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001036:	f103 0302 	add.w	r3, r3, #2
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	4a51      	ldr	r2, [pc, #324]	; (8001184 <rt_bus_proto_bl_dt+0x2e4>)
 800103e:	441a      	add	r2, r3
 8001040:	f607 0414 	addw	r4, r7, #2068	; 0x814
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	3b08      	subs	r3, #8
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fbfd 	bl	800084c <rt_bus_proto_pack_parser>
 8001052:	f107 0308 	add.w	r3, r7, #8
 8001056:	3b08      	subs	r3, #8
 8001058:	4620      	mov	r0, r4
 800105a:	4619      	mov	r1, r3
 800105c:	f640 030c 	movw	r3, #2060	; 0x80c
 8001060:	461a      	mov	r2, r3
 8001062:	f003 f8a3 	bl	80041ac <memcpy>
			rxFrameSize += size;
 8001066:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800106a:	f103 0304 	add.w	r3, r3, #4
 800106e:	881a      	ldrh	r2, [r3, #0]
 8001070:	4b43      	ldr	r3, [pc, #268]	; (8001180 <rt_bus_proto_bl_dt+0x2e0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4413      	add	r3, r2
 8001076:	4a42      	ldr	r2, [pc, #264]	; (8001180 <rt_bus_proto_bl_dt+0x2e0>)
 8001078:	6013      	str	r3, [r2, #0]
		}
		size = SPI_RX_BUF_SIZE - currentDMACnt;
 800107a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800107e:	f103 0306 	add.w	r3, r3, #6
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001088:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800108c:	f102 0204 	add.w	r2, r2, #4
 8001090:	8013      	strh	r3, [r2, #0]
		start = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001098:	f102 0202 	add.w	r2, r2, #2
 800109c:	8013      	strh	r3, [r2, #0]


		if (rxFrameSize + size < SPI_RX_BUF_SIZE)
 800109e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010a2:	f103 0304 	add.w	r3, r3, #4
 80010a6:	881a      	ldrh	r2, [r3, #0]
 80010a8:	4b35      	ldr	r3, [pc, #212]	; (8001180 <rt_bus_proto_bl_dt+0x2e0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010b2:	d23e      	bcs.n	8001132 <rt_bus_proto_bl_dt+0x292>
		{
			sRT_Command_Packet = rt_bus_proto_pack_parser(&gSPI_Rx_Buf[start]);
 80010b4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010b8:	f103 0302 	add.w	r3, r3, #2
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	4a31      	ldr	r2, [pc, #196]	; (8001184 <rt_bus_proto_bl_dt+0x2e4>)
 80010c0:	441a      	add	r2, r3
 80010c2:	f607 0414 	addw	r4, r7, #2068	; 0x814
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	3b08      	subs	r3, #8
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fbbc 	bl	800084c <rt_bus_proto_pack_parser>
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	3b08      	subs	r3, #8
 80010da:	4620      	mov	r0, r4
 80010dc:	4619      	mov	r1, r3
 80010de:	f640 030c 	movw	r3, #2060	; 0x80c
 80010e2:	461a      	mov	r2, r3
 80010e4:	f003 f862 	bl	80041ac <memcpy>
			rxFrameSize += size;
 80010e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010ec:	f103 0304 	add.w	r3, r3, #4
 80010f0:	881a      	ldrh	r2, [r3, #0]
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <rt_bus_proto_bl_dt+0x2e0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <rt_bus_proto_bl_dt+0x2e0>)
 80010fa:	6013      	str	r3, [r2, #0]
			if(sRT_Command_Packet.len < size){
 80010fc:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8001100:	889b      	ldrh	r3, [r3, #4]
 8001102:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001106:	f102 0204 	add.w	r2, r2, #4
 800110a:	8812      	ldrh	r2, [r2, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d910      	bls.n	8001132 <rt_bus_proto_bl_dt+0x292>
				if(sRT_Command_Packet.stx == PRT_STX && sRT_Command_Packet.etx==PRT_ETX){
 8001110:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10b      	bne.n	8001132 <rt_bus_proto_bl_dt+0x292>
 800111a:	f607 0314 	addw	r3, r7, #2068	; 0x814
 800111e:	f893 380a 	ldrb.w	r3, [r3, #2058]	; 0x80a
 8001122:	2b03      	cmp	r3, #3
 8001124:	d105      	bne.n	8001132 <rt_bus_proto_bl_dt+0x292>
					isFrameReady = 0x01;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <rt_bus_proto_bl_dt+0x2e8>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
					dbprintf("Packet Ready");
 800112c:	4817      	ldr	r0, [pc, #92]	; (800118c <rt_bus_proto_bl_dt+0x2ec>)
 800112e:	f000 fac1 	bl	80016b4 <dbprintf>
				}
			}

		}
		prevDMACnt = currentDMACnt;
 8001132:	4a11      	ldr	r2, [pc, #68]	; (8001178 <rt_bus_proto_bl_dt+0x2d8>)
 8001134:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001138:	f103 0306 	add.w	r3, r3, #6
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	8013      	strh	r3, [r2, #0]
	}
	rt_bus_proto_bl_process(sRT_Command_Packet);
 8001140:	f607 0414 	addw	r4, r7, #2068	; 0x814
 8001144:	4668      	mov	r0, sp
 8001146:	f104 0310 	add.w	r3, r4, #16
 800114a:	f240 72fc 	movw	r2, #2044	; 0x7fc
 800114e:	4619      	mov	r1, r3
 8001150:	f003 f82c 	bl	80041ac <memcpy>
 8001154:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001158:	f7ff fd84 	bl	8000c64 <rt_bus_proto_bl_process>
 800115c:	e004      	b.n	8001168 <rt_bus_proto_bl_dt+0x2c8>
			return;
 800115e:	bf00      	nop
 8001160:	e002      	b.n	8001168 <rt_bus_proto_bl_dt+0x2c8>
			return;
 8001162:	bf00      	nop
 8001164:	e000      	b.n	8001168 <rt_bus_proto_bl_dt+0x2c8>
			return;
 8001166:	bf00      	nop
}
 8001168:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	20001d20 	.word	0x20001d20
 8001178:	20000000 	.word	0x20000000
 800117c:	2000009c 	.word	0x2000009c
 8001180:	20000098 	.word	0x20000098
 8001184:	20001520 	.word	0x20001520
 8001188:	20000097 	.word	0x20000097
 800118c:	08004c0c 	.word	0x08004c0c

08001190 <rt_get_io_values>:



void rt_get_io_values(void){
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
	//dbprintf("gSPI_Tx_Buf: %02X%02X%02X%02X sizeof(tPDO): %d",gSPI_Tx_Buf[4],gSPI_Tx_Buf[5],gSPI_Tx_Buf[6],gSPI_Tx_Buf[7],sizeof(tPDO));
	return;
 8001194:	bf00      	nop
		{
			dbprintf("Timeout resetting  size: %d...",(prevDMACnt-currentDMACnt));
			SPI_DMA_Reset();
		}
	}*/
}
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_SPI1_Init+0x60>)
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <MX_SPI1_Init+0x64>)
 80011a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_SPI1_Init+0x60>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <MX_SPI1_Init+0x60>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b2:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_SPI1_Init+0x60>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <MX_SPI1_Init+0x60>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_SPI1_Init+0x60>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <MX_SPI1_Init+0x60>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_SPI1_Init+0x60>)
 80011cc:	2208      	movs	r2, #8
 80011ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_SPI1_Init+0x60>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_SPI1_Init+0x60>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_SPI1_Init+0x60>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_SPI1_Init+0x60>)
 80011e4:	220a      	movs	r2, #10
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_SPI1_Init+0x60>)
 80011ea:	f002 f93d 	bl	8003468 <HAL_SPI_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 80011f4:	f7ff fa9c 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20001d20 	.word	0x20001d20
 8001200:	40013000 	.word	0x40013000

08001204 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a47      	ldr	r2, [pc, #284]	; (800133c <HAL_SPI_MspInit+0x138>)
 8001220:	4293      	cmp	r3, r2
 8001222:	f040 8086 	bne.w	8001332 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001226:	4b46      	ldr	r3, [pc, #280]	; (8001340 <HAL_SPI_MspInit+0x13c>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a45      	ldr	r2, [pc, #276]	; (8001340 <HAL_SPI_MspInit+0x13c>)
 800122c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b43      	ldr	r3, [pc, #268]	; (8001340 <HAL_SPI_MspInit+0x13c>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_SPI_MspInit+0x13c>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <HAL_SPI_MspInit+0x13c>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <HAL_SPI_MspInit+0x13c>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001256:	23b0      	movs	r3, #176	; 0xb0
 8001258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4619      	mov	r1, r3
 8001268:	4836      	ldr	r0, [pc, #216]	; (8001344 <HAL_SPI_MspInit+0x140>)
 800126a:	f001 f9c1 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800126e:	2340      	movs	r3, #64	; 0x40
 8001270:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0310 	add.w	r3, r7, #16
 800127e:	4619      	mov	r1, r3
 8001280:	4830      	ldr	r0, [pc, #192]	; (8001344 <HAL_SPI_MspInit+0x140>)
 8001282:	f001 f9b5 	bl	80025f0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8001286:	4b30      	ldr	r3, [pc, #192]	; (8001348 <HAL_SPI_MspInit+0x144>)
 8001288:	4a30      	ldr	r2, [pc, #192]	; (800134c <HAL_SPI_MspInit+0x148>)
 800128a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800128c:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <HAL_SPI_MspInit+0x144>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <HAL_SPI_MspInit+0x144>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001298:	4b2b      	ldr	r3, [pc, #172]	; (8001348 <HAL_SPI_MspInit+0x144>)
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <HAL_SPI_MspInit+0x144>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012a4:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_SPI_MspInit+0x144>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <HAL_SPI_MspInit+0x144>)
 80012ac:	2220      	movs	r2, #32
 80012ae:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012b0:	4b25      	ldr	r3, [pc, #148]	; (8001348 <HAL_SPI_MspInit+0x144>)
 80012b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80012b8:	4823      	ldr	r0, [pc, #140]	; (8001348 <HAL_SPI_MspInit+0x144>)
 80012ba:	f000 fba3 	bl	8001a04 <HAL_DMA_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 80012c4:	f7ff fa34 	bl	8000730 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_SPI_MspInit+0x144>)
 80012cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80012ce:	4a1e      	ldr	r2, [pc, #120]	; (8001348 <HAL_SPI_MspInit+0x144>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <HAL_SPI_MspInit+0x150>)
 80012d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012da:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 80012dc:	2210      	movs	r2, #16
 80012de:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 80012e8:	2280      	movs	r2, #128	; 0x80
 80012ea:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f2:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 8001300:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001304:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001306:	4812      	ldr	r0, [pc, #72]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 8001308:	f000 fb7c 	bl	8001a04 <HAL_DMA_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001312:	f7ff fa0d 	bl	8000730 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a0d      	ldr	r2, [pc, #52]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 800131a:	649a      	str	r2, [r3, #72]	; 0x48
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <HAL_SPI_MspInit+0x14c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2023      	movs	r0, #35	; 0x23
 8001328:	f000 fb35 	bl	8001996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800132c:	2023      	movs	r0, #35	; 0x23
 800132e:	f000 fb4e 	bl	80019ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40013000 	.word	0x40013000
 8001340:	40021000 	.word	0x40021000
 8001344:	40010800 	.word	0x40010800
 8001348:	20001d78 	.word	0x20001d78
 800134c:	4002001c 	.word	0x4002001c
 8001350:	20001dbc 	.word	0x20001dbc
 8001354:	40020030 	.word	0x40020030

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_MspInit+0x5c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_MspInit+0x5c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_MspInit+0x5c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x5c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x5c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_MspInit+0x60>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_MspInit+0x60>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>
	...

080013c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  dbprintf("%s",__func__);
 80013ca:	490a      	ldr	r1, [pc, #40]	; (80013f4 <HardFault_Handler+0x30>)
 80013cc:	480a      	ldr	r0, [pc, #40]	; (80013f8 <HardFault_Handler+0x34>)
 80013ce:	f000 f971 	bl	80016b4 <dbprintf>
  uint16_t hardFaultCounter =0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  if(hardFaultCounter++ ==4000){
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	80fa      	strh	r2, [r7, #6]
 80013dc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80013e0:	d1f9      	bne.n	80013d6 <HardFault_Handler+0x12>
		  ERR_LED1_Toggle();
 80013e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013e6:	4805      	ldr	r0, [pc, #20]	; (80013fc <HardFault_Handler+0x38>)
 80013e8:	f001 faae 	bl	8002948 <HAL_GPIO_TogglePin>
		  hardFaultCounter = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	80fb      	strh	r3, [r7, #6]
	  if(hardFaultCounter++ ==4000){
 80013f0:	e7f1      	b.n	80013d6 <HardFault_Handler+0x12>
 80013f2:	bf00      	nop
 80013f4:	08004f20 	.word	0x08004f20
 80013f8:	08004c1c 	.word	0x08004c1c
 80013fc:	40011000 	.word	0x40011000

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143a:	f000 f9b9 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA1_Channel2_IRQHandler+0x10>)
 800144a:	f000 fcf3 	bl	8001e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20001d78 	.word	0x20001d78

08001458 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <DMA1_Channel3_IRQHandler+0x10>)
 800145e:	f000 fce9 	bl	8001e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001dbc 	.word	0x20001dbc

0800146c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <DMA1_Channel4_IRQHandler+0x10>)
 8001472:	f000 fcdf 	bl	8001e34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20001e00 	.word	0x20001e00

08001480 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001484:	2020      	movs	r0, #32
 8001486:	f001 fa79 	bl	800297c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001494:	4802      	ldr	r0, [pc, #8]	; (80014a0 <SPI1_IRQHandler+0x10>)
 8001496:	f002 f9ad 	bl	80037f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20001d20 	.word	0x20001d20

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f002 fe32 	bl	800413c <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000c000 	.word	0x2000c000
 8001504:	00000400 	.word	0x00000400
 8001508:	200000a4 	.word	0x200000a4
 800150c:	20001ec0 	.word	0x20001ec0

08001510 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr

0800151c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <MX_USART1_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001528:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800152c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART1_UART_Init+0x4c>)
 8001554:	f002 fc3a 	bl	8003dcc <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f7ff f8e7 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20001e44 	.word	0x20001e44
 800156c:	40013800 	.word	0x40013800

08001570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0310 	add.w	r3, r7, #16
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <HAL_UART_MspInit+0xd8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d157      	bne.n	8001640 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001590:	4b2e      	ldr	r3, [pc, #184]	; (800164c <HAL_UART_MspInit+0xdc>)
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	4a2d      	ldr	r2, [pc, #180]	; (800164c <HAL_UART_MspInit+0xdc>)
 8001596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159a:	6193      	str	r3, [r2, #24]
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_UART_MspInit+0xdc>)
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_UART_MspInit+0xdc>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	4a27      	ldr	r2, [pc, #156]	; (800164c <HAL_UART_MspInit+0xdc>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6193      	str	r3, [r2, #24]
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_UART_MspInit+0xdc>)
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 80015c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	481e      	ldr	r0, [pc, #120]	; (8001650 <HAL_UART_MspInit+0xe0>)
 80015d6:	f001 f80b 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DBG_RX_Pin;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4619      	mov	r1, r3
 80015ee:	4818      	ldr	r0, [pc, #96]	; (8001650 <HAL_UART_MspInit+0xe0>)
 80015f0:	f000 fffe 	bl	80025f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_UART_MspInit+0xe4>)
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <HAL_UART_MspInit+0xe8>)
 80015f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_UART_MspInit+0xe4>)
 80015fc:	2210      	movs	r2, #16
 80015fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_UART_MspInit+0xe4>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_UART_MspInit+0xe4>)
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_UART_MspInit+0xe4>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_UART_MspInit+0xe4>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_UART_MspInit+0xe4>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_UART_MspInit+0xe4>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <HAL_UART_MspInit+0xe4>)
 8001626:	f000 f9ed 	bl	8001a04 <HAL_DMA_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001630:	f7ff f87e 	bl	8000730 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_UART_MspInit+0xe4>)
 8001638:	635a      	str	r2, [r3, #52]	; 0x34
 800163a:	4a06      	ldr	r2, [pc, #24]	; (8001654 <HAL_UART_MspInit+0xe4>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001640:	bf00      	nop
 8001642:	3720      	adds	r7, #32
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40013800 	.word	0x40013800
 800164c:	40021000 	.word	0x40021000
 8001650:	40010800 	.word	0x40010800
 8001654:	20001e00 	.word	0x20001e00
 8001658:	40020044 	.word	0x40020044

0800165c <vprintln>:
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    }
}

void vprintln(const char *fmt, va_list argp)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b0b4      	sub	sp, #208	; 0xd0
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4618      	mov	r0, r3
 8001670:	f002 fdc8 	bl	8004204 <vsiprintf>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	dd14      	ble.n	80016a4 <vprintln+0x48>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fdd0 	bl	8000224 <strlen>
 8001684:	4603      	mov	r3, r0
 8001686:	b29a      	uxth	r2, r3
 8001688:	f107 0108 	add.w	r1, r7, #8
 800168c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <vprintln+0x50>)
 8001692:	f002 fbe8 	bl	8003e66 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r",2, 0xffffff);
 8001696:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800169a:	2202      	movs	r2, #2
 800169c:	4904      	ldr	r1, [pc, #16]	; (80016b0 <vprintln+0x54>)
 800169e:	4803      	ldr	r0, [pc, #12]	; (80016ac <vprintln+0x50>)
 80016a0:	f002 fbe1 	bl	8003e66 <HAL_UART_Transmit>
    }
}
 80016a4:	bf00      	nop
 80016a6:	37d0      	adds	r7, #208	; 0xd0
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20001e44 	.word	0x20001e44
 80016b0:	08004c20 	.word	0x08004c20

080016b4 <dbprintf>:

void dbprintf(const char *fmt, ...)
{
 80016b4:	b40f      	push	{r0, r1, r2, r3}
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	607b      	str	r3, [r7, #4]
    vprintln((const char *)fmt, argp);
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	6938      	ldr	r0, [r7, #16]
 80016c6:	f7ff ffc9 	bl	800165c <vprintln>
    va_end(argp);
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016d4:	b004      	add	sp, #16
 80016d6:	4770      	bx	lr

080016d8 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	; (8001710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	; (800171c <LoopFillZerobss+0x22>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016fe:	f7ff ff07 	bl	8001510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001702:	f002 fd21 	bl	8004148 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001706:	f7fe ff59 	bl	80005bc <main>
  bx lr
 800170a:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001714:	08004f88 	.word	0x08004f88
  ldr r2, =_sbss
 8001718:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800171c:	20001ec0 	.word	0x20001ec0

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x28>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x28>)
 800172e:	f043 0310 	orr.w	r3, r3, #16
 8001732:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f923 	bl	8001980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	200f      	movs	r0, #15
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fe0a 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40022000 	.word	0x40022000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f93b 	bl	80019ea <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f903 	bl	8001996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000004 	.word	0x20000004
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	20000008 	.word	0x20000008

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_IncTick+0x1c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_IncTick+0x20>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a03      	ldr	r2, [pc, #12]	; (80017d0 <HAL_IncTick+0x20>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	20001e88 	.word	0x20001e88

080017d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b02      	ldr	r3, [pc, #8]	; (80017e4 <HAL_GetTick+0x10>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	20001e88 	.word	0x20001e88

080017e8 <__NVIC_SetPriorityGrouping>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <__NVIC_SetPriorityGrouping+0x44>)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	60d3      	str	r3, [r2, #12]
}
 8001820:	bf00      	nop
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <__NVIC_GetPriorityGrouping>:
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	; (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4906      	ldr	r1, [pc, #24]	; (8001880 <__NVIC_EnableIRQ+0x34>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	; (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	; 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3b01      	subs	r3, #1
 8001948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800194c:	d301      	bcc.n	8001952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2301      	movs	r3, #1
 8001950:	e00f      	b.n	8001972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001952:	4a0a      	ldr	r2, [pc, #40]	; (800197c <SysTick_Config+0x40>)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800195a:	210f      	movs	r1, #15
 800195c:	f04f 30ff 	mov.w	r0, #4294967295
 8001960:	f7ff ff90 	bl	8001884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <SysTick_Config+0x40>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800196a:	4b04      	ldr	r3, [pc, #16]	; (800197c <SysTick_Config+0x40>)
 800196c:	2207      	movs	r2, #7
 800196e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ff2d 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	4603      	mov	r3, r0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a8:	f7ff ff42 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	6978      	ldr	r0, [r7, #20]
 80019b4:	f7ff ff90 	bl	80018d8 <NVIC_EncodePriority>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff5f 	bl	8001884 <__NVIC_SetPriority>
}
 80019c6:	bf00      	nop
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff35 	bl	800184c <__NVIC_EnableIRQ>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffa2 	bl	800193c <SysTick_Config>
 80019f8:	4603      	mov	r3, r0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e059      	b.n	8001ace <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b2d      	ldr	r3, [pc, #180]	; (8001ad8 <HAL_DMA_Init+0xd4>)
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d80f      	bhi.n	8001a46 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b2b      	ldr	r3, [pc, #172]	; (8001adc <HAL_DMA_Init+0xd8>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a2b      	ldr	r2, [pc, #172]	; (8001ae0 <HAL_DMA_Init+0xdc>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	009a      	lsls	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <HAL_DMA_Init+0xe0>)
 8001a42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a44:	e00e      	b.n	8001a64 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <HAL_DMA_Init+0xe4>)
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a23      	ldr	r2, [pc, #140]	; (8001ae0 <HAL_DMA_Init+0xdc>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	009a      	lsls	r2, r3, #2
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a22      	ldr	r2, [pc, #136]	; (8001aec <HAL_DMA_Init+0xe8>)
 8001a62:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40020407 	.word	0x40020407
 8001adc:	bffdfff8 	.word	0xbffdfff8
 8001ae0:	cccccccd 	.word	0xcccccccd
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	bffdfbf8 	.word	0xbffdfbf8
 8001aec:	40020400 	.word	0x40020400

08001af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_DMA_Start_IT+0x20>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e04a      	b.n	8001ba6 <HAL_DMA_Start_IT+0xb6>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d13a      	bne.n	8001b98 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2202      	movs	r2, #2
 8001b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fbb0 	bl	80022ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 020e 	orr.w	r2, r2, #14
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e00f      	b.n	8001b86 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0204 	bic.w	r2, r2, #4
 8001b74:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 020a 	orr.w	r2, r2, #10
 8001b84:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e005      	b.n	8001ba4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d008      	beq.n	8001bd6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e020      	b.n	8001c18 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 020e 	bic.w	r2, r2, #14
 8001be4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 0201 	bic.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	2101      	movs	r1, #1
 8001c00:	fa01 f202 	lsl.w	r2, r1, r2
 8001c04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d005      	beq.n	8001c46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e0d6      	b.n	8001df4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 020e 	bic.w	r2, r2, #14
 8001c54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0201 	bic.w	r2, r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b64      	ldr	r3, [pc, #400]	; (8001e00 <HAL_DMA_Abort_IT+0x1dc>)
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d958      	bls.n	8001d24 <HAL_DMA_Abort_IT+0x100>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a63      	ldr	r2, [pc, #396]	; (8001e04 <HAL_DMA_Abort_IT+0x1e0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d04f      	beq.n	8001d1c <HAL_DMA_Abort_IT+0xf8>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a61      	ldr	r2, [pc, #388]	; (8001e08 <HAL_DMA_Abort_IT+0x1e4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d048      	beq.n	8001d18 <HAL_DMA_Abort_IT+0xf4>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a60      	ldr	r2, [pc, #384]	; (8001e0c <HAL_DMA_Abort_IT+0x1e8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d040      	beq.n	8001d12 <HAL_DMA_Abort_IT+0xee>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <HAL_DMA_Abort_IT+0x1ec>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d038      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xe8>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a5d      	ldr	r2, [pc, #372]	; (8001e14 <HAL_DMA_Abort_IT+0x1f0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d030      	beq.n	8001d06 <HAL_DMA_Abort_IT+0xe2>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a5b      	ldr	r2, [pc, #364]	; (8001e18 <HAL_DMA_Abort_IT+0x1f4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d028      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xdc>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a53      	ldr	r2, [pc, #332]	; (8001e00 <HAL_DMA_Abort_IT+0x1dc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d020      	beq.n	8001cfa <HAL_DMA_Abort_IT+0xd6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a57      	ldr	r2, [pc, #348]	; (8001e1c <HAL_DMA_Abort_IT+0x1f8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d019      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0xd2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a56      	ldr	r2, [pc, #344]	; (8001e20 <HAL_DMA_Abort_IT+0x1fc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d012      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0xce>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a54      	ldr	r2, [pc, #336]	; (8001e24 <HAL_DMA_Abort_IT+0x200>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00a      	beq.n	8001cec <HAL_DMA_Abort_IT+0xc8>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a53      	ldr	r2, [pc, #332]	; (8001e28 <HAL_DMA_Abort_IT+0x204>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d102      	bne.n	8001ce6 <HAL_DMA_Abort_IT+0xc2>
 8001ce0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce4:	e01b      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cea:	e018      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf0:	e015      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	e013      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e011      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001cfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cfe:	e00e      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001d00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d04:	e00b      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d0a:	e008      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	e005      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d16:	e002      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001d18:	2310      	movs	r3, #16
 8001d1a:	e000      	b.n	8001d1e <HAL_DMA_Abort_IT+0xfa>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	4a43      	ldr	r2, [pc, #268]	; (8001e2c <HAL_DMA_Abort_IT+0x208>)
 8001d20:	6053      	str	r3, [r2, #4]
 8001d22:	e057      	b.n	8001dd4 <HAL_DMA_Abort_IT+0x1b0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a36      	ldr	r2, [pc, #216]	; (8001e04 <HAL_DMA_Abort_IT+0x1e0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d04f      	beq.n	8001dce <HAL_DMA_Abort_IT+0x1aa>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a35      	ldr	r2, [pc, #212]	; (8001e08 <HAL_DMA_Abort_IT+0x1e4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d048      	beq.n	8001dca <HAL_DMA_Abort_IT+0x1a6>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a33      	ldr	r2, [pc, #204]	; (8001e0c <HAL_DMA_Abort_IT+0x1e8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d040      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x1a0>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a32      	ldr	r2, [pc, #200]	; (8001e10 <HAL_DMA_Abort_IT+0x1ec>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d038      	beq.n	8001dbe <HAL_DMA_Abort_IT+0x19a>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a30      	ldr	r2, [pc, #192]	; (8001e14 <HAL_DMA_Abort_IT+0x1f0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d030      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x194>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2f      	ldr	r2, [pc, #188]	; (8001e18 <HAL_DMA_Abort_IT+0x1f4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d028      	beq.n	8001db2 <HAL_DMA_Abort_IT+0x18e>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <HAL_DMA_Abort_IT+0x1dc>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d020      	beq.n	8001dac <HAL_DMA_Abort_IT+0x188>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a2b      	ldr	r2, [pc, #172]	; (8001e1c <HAL_DMA_Abort_IT+0x1f8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d019      	beq.n	8001da8 <HAL_DMA_Abort_IT+0x184>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <HAL_DMA_Abort_IT+0x1fc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d012      	beq.n	8001da4 <HAL_DMA_Abort_IT+0x180>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a28      	ldr	r2, [pc, #160]	; (8001e24 <HAL_DMA_Abort_IT+0x200>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d00a      	beq.n	8001d9e <HAL_DMA_Abort_IT+0x17a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <HAL_DMA_Abort_IT+0x204>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d102      	bne.n	8001d98 <HAL_DMA_Abort_IT+0x174>
 8001d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d96:	e01b      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d9c:	e018      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001da2:	e015      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001da4:	2310      	movs	r3, #16
 8001da6:	e013      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e011      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001db0:	e00e      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001db2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001db6:	e00b      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dbc:	e008      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	e005      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc8:	e002      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001dca:	2310      	movs	r3, #16
 8001dcc:	e000      	b.n	8001dd0 <HAL_DMA_Abort_IT+0x1ac>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_DMA_Abort_IT+0x20c>)
 8001dd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
    } 
  }
  return status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40020080 	.word	0x40020080
 8001e04:	40020008 	.word	0x40020008
 8001e08:	4002001c 	.word	0x4002001c
 8001e0c:	40020030 	.word	0x40020030
 8001e10:	40020044 	.word	0x40020044
 8001e14:	40020058 	.word	0x40020058
 8001e18:	4002006c 	.word	0x4002006c
 8001e1c:	40020408 	.word	0x40020408
 8001e20:	4002041c 	.word	0x4002041c
 8001e24:	40020430 	.word	0x40020430
 8001e28:	40020444 	.word	0x40020444
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	2204      	movs	r2, #4
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80d6 	beq.w	800200a <HAL_DMA_IRQHandler+0x1d6>
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80d0 	beq.w	800200a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 0204 	bic.w	r2, r2, #4
 8001e86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b9b      	ldr	r3, [pc, #620]	; (80020fc <HAL_DMA_IRQHandler+0x2c8>)
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d958      	bls.n	8001f46 <HAL_DMA_IRQHandler+0x112>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a99      	ldr	r2, [pc, #612]	; (8002100 <HAL_DMA_IRQHandler+0x2cc>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d04f      	beq.n	8001f3e <HAL_DMA_IRQHandler+0x10a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a98      	ldr	r2, [pc, #608]	; (8002104 <HAL_DMA_IRQHandler+0x2d0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d048      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x106>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a96      	ldr	r2, [pc, #600]	; (8002108 <HAL_DMA_IRQHandler+0x2d4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d040      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x100>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a95      	ldr	r2, [pc, #596]	; (800210c <HAL_DMA_IRQHandler+0x2d8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d038      	beq.n	8001f2e <HAL_DMA_IRQHandler+0xfa>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a93      	ldr	r2, [pc, #588]	; (8002110 <HAL_DMA_IRQHandler+0x2dc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d030      	beq.n	8001f28 <HAL_DMA_IRQHandler+0xf4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a92      	ldr	r2, [pc, #584]	; (8002114 <HAL_DMA_IRQHandler+0x2e0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d028      	beq.n	8001f22 <HAL_DMA_IRQHandler+0xee>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a89      	ldr	r2, [pc, #548]	; (80020fc <HAL_DMA_IRQHandler+0x2c8>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d020      	beq.n	8001f1c <HAL_DMA_IRQHandler+0xe8>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a8e      	ldr	r2, [pc, #568]	; (8002118 <HAL_DMA_IRQHandler+0x2e4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d019      	beq.n	8001f18 <HAL_DMA_IRQHandler+0xe4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a8c      	ldr	r2, [pc, #560]	; (800211c <HAL_DMA_IRQHandler+0x2e8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d012      	beq.n	8001f14 <HAL_DMA_IRQHandler+0xe0>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a8b      	ldr	r2, [pc, #556]	; (8002120 <HAL_DMA_IRQHandler+0x2ec>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d00a      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xda>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a89      	ldr	r2, [pc, #548]	; (8002124 <HAL_DMA_IRQHandler+0x2f0>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d102      	bne.n	8001f08 <HAL_DMA_IRQHandler+0xd4>
 8001f02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f06:	e01b      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f0c:	e018      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f12:	e015      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f14:	2340      	movs	r3, #64	; 0x40
 8001f16:	e013      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e011      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001f20:	e00e      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f26:	e00b      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f2c:	e008      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f32:	e005      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f38:	e002      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f3a:	2340      	movs	r3, #64	; 0x40
 8001f3c:	e000      	b.n	8001f40 <HAL_DMA_IRQHandler+0x10c>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	4a79      	ldr	r2, [pc, #484]	; (8002128 <HAL_DMA_IRQHandler+0x2f4>)
 8001f42:	6053      	str	r3, [r2, #4]
 8001f44:	e057      	b.n	8001ff6 <HAL_DMA_IRQHandler+0x1c2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a6d      	ldr	r2, [pc, #436]	; (8002100 <HAL_DMA_IRQHandler+0x2cc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d04f      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x1bc>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a6b      	ldr	r2, [pc, #428]	; (8002104 <HAL_DMA_IRQHandler+0x2d0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d048      	beq.n	8001fec <HAL_DMA_IRQHandler+0x1b8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a6a      	ldr	r2, [pc, #424]	; (8002108 <HAL_DMA_IRQHandler+0x2d4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d040      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x1b2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a68      	ldr	r2, [pc, #416]	; (800210c <HAL_DMA_IRQHandler+0x2d8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d038      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x1ac>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a67      	ldr	r2, [pc, #412]	; (8002110 <HAL_DMA_IRQHandler+0x2dc>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d030      	beq.n	8001fda <HAL_DMA_IRQHandler+0x1a6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a65      	ldr	r2, [pc, #404]	; (8002114 <HAL_DMA_IRQHandler+0x2e0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d028      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x1a0>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a5d      	ldr	r2, [pc, #372]	; (80020fc <HAL_DMA_IRQHandler+0x2c8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d020      	beq.n	8001fce <HAL_DMA_IRQHandler+0x19a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a61      	ldr	r2, [pc, #388]	; (8002118 <HAL_DMA_IRQHandler+0x2e4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_DMA_IRQHandler+0x196>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a60      	ldr	r2, [pc, #384]	; (800211c <HAL_DMA_IRQHandler+0x2e8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d012      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x192>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5e      	ldr	r2, [pc, #376]	; (8002120 <HAL_DMA_IRQHandler+0x2ec>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x18c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a5d      	ldr	r2, [pc, #372]	; (8002124 <HAL_DMA_IRQHandler+0x2f0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d102      	bne.n	8001fba <HAL_DMA_IRQHandler+0x186>
 8001fb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fb8:	e01b      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fbe:	e018      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc4:	e015      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fc6:	2340      	movs	r3, #64	; 0x40
 8001fc8:	e013      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fca:	2304      	movs	r3, #4
 8001fcc:	e011      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fd2:	e00e      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fd8:	e00b      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fde:	e008      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fe4:	e005      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fea:	e002      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001fec:	2340      	movs	r3, #64	; 0x40
 8001fee:	e000      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x1be>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_DMA_IRQHandler+0x2f8>)
 8001ff4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8136 	beq.w	800226c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002008:	e130      	b.n	800226c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2202      	movs	r2, #2
 8002010:	409a      	lsls	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	f000 80f8 	beq.w	800220c <HAL_DMA_IRQHandler+0x3d8>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80f2 	beq.w	800220c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10b      	bne.n	800204e <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 020a 	bic.w	r2, r2, #10
 8002044:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_DMA_IRQHandler+0x2c8>)
 8002056:	429a      	cmp	r2, r3
 8002058:	d973      	bls.n	8002142 <HAL_DMA_IRQHandler+0x30e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a28      	ldr	r2, [pc, #160]	; (8002100 <HAL_DMA_IRQHandler+0x2cc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d06a      	beq.n	800213a <HAL_DMA_IRQHandler+0x306>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <HAL_DMA_IRQHandler+0x2d0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d063      	beq.n	8002136 <HAL_DMA_IRQHandler+0x302>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a25      	ldr	r2, [pc, #148]	; (8002108 <HAL_DMA_IRQHandler+0x2d4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d05b      	beq.n	8002130 <HAL_DMA_IRQHandler+0x2fc>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a23      	ldr	r2, [pc, #140]	; (800210c <HAL_DMA_IRQHandler+0x2d8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d038      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x2c0>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a22      	ldr	r2, [pc, #136]	; (8002110 <HAL_DMA_IRQHandler+0x2dc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d030      	beq.n	80020ee <HAL_DMA_IRQHandler+0x2ba>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_DMA_IRQHandler+0x2e0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d028      	beq.n	80020e8 <HAL_DMA_IRQHandler+0x2b4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a18      	ldr	r2, [pc, #96]	; (80020fc <HAL_DMA_IRQHandler+0x2c8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d020      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x2ae>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <HAL_DMA_IRQHandler+0x2e4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <HAL_DMA_IRQHandler+0x2aa>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1b      	ldr	r2, [pc, #108]	; (800211c <HAL_DMA_IRQHandler+0x2e8>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d012      	beq.n	80020da <HAL_DMA_IRQHandler+0x2a6>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_DMA_IRQHandler+0x2ec>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00a      	beq.n	80020d4 <HAL_DMA_IRQHandler+0x2a0>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <HAL_DMA_IRQHandler+0x2f0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d102      	bne.n	80020ce <HAL_DMA_IRQHandler+0x29a>
 80020c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020cc:	e036      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 80020ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d2:	e033      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 80020d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d8:	e030      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 80020da:	2320      	movs	r3, #32
 80020dc:	e02e      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 80020de:	2302      	movs	r3, #2
 80020e0:	e02c      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 80020e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020e6:	e029      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 80020e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80020ec:	e026      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 80020ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020f2:	e023      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 80020f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f8:	e020      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 80020fa:	bf00      	nop
 80020fc:	40020080 	.word	0x40020080
 8002100:	40020008 	.word	0x40020008
 8002104:	4002001c 	.word	0x4002001c
 8002108:	40020030 	.word	0x40020030
 800210c:	40020044 	.word	0x40020044
 8002110:	40020058 	.word	0x40020058
 8002114:	4002006c 	.word	0x4002006c
 8002118:	40020408 	.word	0x40020408
 800211c:	4002041c 	.word	0x4002041c
 8002120:	40020430 	.word	0x40020430
 8002124:	40020444 	.word	0x40020444
 8002128:	40020400 	.word	0x40020400
 800212c:	40020000 	.word	0x40020000
 8002130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002134:	e002      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 8002136:	2320      	movs	r3, #32
 8002138:	e000      	b.n	800213c <HAL_DMA_IRQHandler+0x308>
 800213a:	2302      	movs	r3, #2
 800213c:	4a4e      	ldr	r2, [pc, #312]	; (8002278 <HAL_DMA_IRQHandler+0x444>)
 800213e:	6053      	str	r3, [r2, #4]
 8002140:	e057      	b.n	80021f2 <HAL_DMA_IRQHandler+0x3be>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a4d      	ldr	r2, [pc, #308]	; (800227c <HAL_DMA_IRQHandler+0x448>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d04f      	beq.n	80021ec <HAL_DMA_IRQHandler+0x3b8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a4b      	ldr	r2, [pc, #300]	; (8002280 <HAL_DMA_IRQHandler+0x44c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d048      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x3b4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a4a      	ldr	r2, [pc, #296]	; (8002284 <HAL_DMA_IRQHandler+0x450>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d040      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x3ae>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a48      	ldr	r2, [pc, #288]	; (8002288 <HAL_DMA_IRQHandler+0x454>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d038      	beq.n	80021dc <HAL_DMA_IRQHandler+0x3a8>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a47      	ldr	r2, [pc, #284]	; (800228c <HAL_DMA_IRQHandler+0x458>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d030      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x3a2>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a45      	ldr	r2, [pc, #276]	; (8002290 <HAL_DMA_IRQHandler+0x45c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d028      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x39c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a44      	ldr	r2, [pc, #272]	; (8002294 <HAL_DMA_IRQHandler+0x460>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d020      	beq.n	80021ca <HAL_DMA_IRQHandler+0x396>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a42      	ldr	r2, [pc, #264]	; (8002298 <HAL_DMA_IRQHandler+0x464>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x392>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a41      	ldr	r2, [pc, #260]	; (800229c <HAL_DMA_IRQHandler+0x468>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d012      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x38e>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_DMA_IRQHandler+0x46c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00a      	beq.n	80021bc <HAL_DMA_IRQHandler+0x388>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <HAL_DMA_IRQHandler+0x470>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d102      	bne.n	80021b6 <HAL_DMA_IRQHandler+0x382>
 80021b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b4:	e01b      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ba:	e018      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c0:	e015      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021c2:	2320      	movs	r3, #32
 80021c4:	e013      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e011      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ce:	e00e      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d4:	e00b      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021da:	e008      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e0:	e005      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e6:	e002      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021e8:	2320      	movs	r3, #32
 80021ea:	e000      	b.n	80021ee <HAL_DMA_IRQHandler+0x3ba>
 80021ec:	2302      	movs	r3, #2
 80021ee:	4a2e      	ldr	r2, [pc, #184]	; (80022a8 <HAL_DMA_IRQHandler+0x474>)
 80021f0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d034      	beq.n	800226c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800220a:	e02f      	b.n	800226c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002210:	2208      	movs	r2, #8
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d028      	beq.n	800226e <HAL_DMA_IRQHandler+0x43a>
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d023      	beq.n	800226e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 020e 	bic.w	r2, r2, #14
 8002234:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f202 	lsl.w	r2, r1, r2
 8002244:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	4798      	blx	r3
    }
  }
  return;
 800226c:	bf00      	nop
 800226e:	bf00      	nop
}
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40020400 	.word	0x40020400
 800227c:	40020008 	.word	0x40020008
 8002280:	4002001c 	.word	0x4002001c
 8002284:	40020030 	.word	0x40020030
 8002288:	40020044 	.word	0x40020044
 800228c:	40020058 	.word	0x40020058
 8002290:	4002006c 	.word	0x4002006c
 8002294:	40020080 	.word	0x40020080
 8002298:	40020408 	.word	0x40020408
 800229c:	4002041c 	.word	0x4002041c
 80022a0:	40020430 	.word	0x40020430
 80022a4:	40020444 	.word	0x40020444
 80022a8:	40020000 	.word	0x40020000

080022ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f202 	lsl.w	r2, r1, r2
 80022c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d108      	bne.n	80022ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022ea:	e007      	b.n	80022fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	60da      	str	r2, [r3, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
	...

08002308 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002312:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_FLASH_Unlock+0x40>)
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_FLASH_Unlock+0x40>)
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <HAL_FLASH_Unlock+0x44>)
 8002322:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_FLASH_Unlock+0x40>)
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_FLASH_Unlock+0x48>)
 8002328:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_FLASH_Unlock+0x40>)
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800233a:	79fb      	ldrb	r3, [r7, #7]
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000
 800234c:	45670123 	.word	0x45670123
 8002350:	cdef89ab 	.word	0xcdef89ab

08002354 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_FLASH_Lock+0x1c>)
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_FLASH_Lock+0x1c>)
 800235e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002362:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40022000 	.word	0x40022000

08002374 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7ff fa2a 	bl	80017d4 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002382:	e010      	b.n	80023a6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238a:	d00c      	beq.n	80023a6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d007      	beq.n	80023a2 <FLASH_WaitForLastOperation+0x2e>
 8002392:	f7ff fa1f 	bl	80017d4 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d201      	bcs.n	80023a6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e025      	b.n	80023f2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <FLASH_WaitForLastOperation+0x88>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1e8      	bne.n	8002384 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80023b2:	4b12      	ldr	r3, [pc, #72]	; (80023fc <FLASH_WaitForLastOperation+0x88>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d002      	beq.n	80023c4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <FLASH_WaitForLastOperation+0x88>)
 80023c0:	2220      	movs	r2, #32
 80023c2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80023c4:	4b0d      	ldr	r3, [pc, #52]	; (80023fc <FLASH_WaitForLastOperation+0x88>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10b      	bne.n	80023e8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <FLASH_WaitForLastOperation+0x88>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d105      	bne.n	80023e8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <FLASH_WaitForLastOperation+0x88>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80023e8:	f000 f80a 	bl	8002400 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40022000 	.word	0x40022000

08002400 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <FLASH_SetErrorCode+0x98>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002416:	4b21      	ldr	r3, [pc, #132]	; (800249c <FLASH_SetErrorCode+0x9c>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	4a1f      	ldr	r2, [pc, #124]	; (800249c <FLASH_SetErrorCode+0x9c>)
 8002420:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f043 0310 	orr.w	r3, r3, #16
 8002428:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <FLASH_SetErrorCode+0x98>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <FLASH_SetErrorCode+0x9c>)
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <FLASH_SetErrorCode+0x9c>)
 8002440:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f043 0304 	orr.w	r3, r3, #4
 8002448:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <FLASH_SetErrorCode+0x98>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002456:	4b11      	ldr	r3, [pc, #68]	; (800249c <FLASH_SetErrorCode+0x9c>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	4a0f      	ldr	r2, [pc, #60]	; (800249c <FLASH_SetErrorCode+0x9c>)
 8002460:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002462:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <FLASH_SetErrorCode+0x98>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <FLASH_SetErrorCode+0x98>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f240 1201 	movw	r2, #257	; 0x101
 8002474:	4293      	cmp	r3, r2
 8002476:	d106      	bne.n	8002486 <FLASH_SetErrorCode+0x86>
 8002478:	4b07      	ldr	r3, [pc, #28]	; (8002498 <FLASH_SetErrorCode+0x98>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	4a06      	ldr	r2, [pc, #24]	; (8002498 <FLASH_SetErrorCode+0x98>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	61d3      	str	r3, [r2, #28]
}  
 8002484:	e002      	b.n	800248c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002486:	4a04      	ldr	r2, [pc, #16]	; (8002498 <FLASH_SetErrorCode+0x98>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	60d3      	str	r3, [r2, #12]
}  
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40022000 	.word	0x40022000
 800249c:	20001e90 	.word	0x20001e90

080024a0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024b2:	4b2f      	ldr	r3, [pc, #188]	; (8002570 <HAL_FLASHEx_Erase+0xd0>)
 80024b4:	7e1b      	ldrb	r3, [r3, #24]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_FLASHEx_Erase+0x1e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e053      	b.n	8002566 <HAL_FLASHEx_Erase+0xc6>
 80024be:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <HAL_FLASHEx_Erase+0xd0>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d116      	bne.n	80024fa <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80024cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024d0:	f7ff ff50 	bl	8002374 <FLASH_WaitForLastOperation>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d141      	bne.n	800255e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80024da:	2001      	movs	r0, #1
 80024dc:	f000 f84c 	bl	8002578 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024e4:	f7ff ff46 	bl	8002374 <FLASH_WaitForLastOperation>
 80024e8:	4603      	mov	r3, r0
 80024ea:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80024ec:	4b21      	ldr	r3, [pc, #132]	; (8002574 <HAL_FLASHEx_Erase+0xd4>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	4a20      	ldr	r2, [pc, #128]	; (8002574 <HAL_FLASHEx_Erase+0xd4>)
 80024f2:	f023 0304 	bic.w	r3, r3, #4
 80024f6:	6113      	str	r3, [r2, #16]
 80024f8:	e031      	b.n	800255e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80024fa:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024fe:	f7ff ff39 	bl	8002374 <FLASH_WaitForLastOperation>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d12a      	bne.n	800255e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	f04f 32ff 	mov.w	r2, #4294967295
 800250e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	e019      	b.n	800254c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002518:	68b8      	ldr	r0, [r7, #8]
 800251a:	f000 f849 	bl	80025b0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800251e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002522:	f7ff ff27 	bl	8002374 <FLASH_WaitForLastOperation>
 8002526:	4603      	mov	r3, r0
 8002528:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_FLASHEx_Erase+0xd4>)
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_FLASHEx_Erase+0xd4>)
 8002530:	f023 0302 	bic.w	r3, r3, #2
 8002534:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	601a      	str	r2, [r3, #0]
            break;
 8002542:	e00c      	b.n	800255e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800254a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	02da      	lsls	r2, r3, #11
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	429a      	cmp	r2, r3
 800255c:	d3dc      	bcc.n	8002518 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <HAL_FLASHEx_Erase+0xd0>)
 8002560:	2200      	movs	r2, #0
 8002562:	761a      	strb	r2, [r3, #24]

  return status;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20001e90 	.word	0x20001e90
 8002574:	40022000 	.word	0x40022000

08002578 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <FLASH_MassErase+0x30>)
 8002582:	2200      	movs	r2, #0
 8002584:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <FLASH_MassErase+0x34>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <FLASH_MassErase+0x34>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <FLASH_MassErase+0x34>)
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	4a05      	ldr	r2, [pc, #20]	; (80025ac <FLASH_MassErase+0x34>)
 8002598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800259c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	20001e90 	.word	0x20001e90
 80025ac:	40022000 	.word	0x40022000

080025b0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <FLASH_PageErase+0x38>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80025be:	4b0b      	ldr	r3, [pc, #44]	; (80025ec <FLASH_PageErase+0x3c>)
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <FLASH_PageErase+0x3c>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80025ca:	4a08      	ldr	r2, [pc, #32]	; (80025ec <FLASH_PageErase+0x3c>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <FLASH_PageErase+0x3c>)
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4a05      	ldr	r2, [pc, #20]	; (80025ec <FLASH_PageErase+0x3c>)
 80025d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025da:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20001e90 	.word	0x20001e90
 80025ec:	40022000 	.word	0x40022000

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b08b      	sub	sp, #44	; 0x2c
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025fa:	2300      	movs	r3, #0
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025fe:	2300      	movs	r3, #0
 8002600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002602:	e179      	b.n	80028f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002604:	2201      	movs	r2, #1
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	429a      	cmp	r2, r3
 800261e:	f040 8168 	bne.w	80028f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4aa0      	ldr	r2, [pc, #640]	; (80028a8 <HAL_GPIO_Init+0x2b8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d05e      	beq.n	80026ea <HAL_GPIO_Init+0xfa>
 800262c:	4a9e      	ldr	r2, [pc, #632]	; (80028a8 <HAL_GPIO_Init+0x2b8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d875      	bhi.n	800271e <HAL_GPIO_Init+0x12e>
 8002632:	4a9e      	ldr	r2, [pc, #632]	; (80028ac <HAL_GPIO_Init+0x2bc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d058      	beq.n	80026ea <HAL_GPIO_Init+0xfa>
 8002638:	4a9c      	ldr	r2, [pc, #624]	; (80028ac <HAL_GPIO_Init+0x2bc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d86f      	bhi.n	800271e <HAL_GPIO_Init+0x12e>
 800263e:	4a9c      	ldr	r2, [pc, #624]	; (80028b0 <HAL_GPIO_Init+0x2c0>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d052      	beq.n	80026ea <HAL_GPIO_Init+0xfa>
 8002644:	4a9a      	ldr	r2, [pc, #616]	; (80028b0 <HAL_GPIO_Init+0x2c0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d869      	bhi.n	800271e <HAL_GPIO_Init+0x12e>
 800264a:	4a9a      	ldr	r2, [pc, #616]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d04c      	beq.n	80026ea <HAL_GPIO_Init+0xfa>
 8002650:	4a98      	ldr	r2, [pc, #608]	; (80028b4 <HAL_GPIO_Init+0x2c4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d863      	bhi.n	800271e <HAL_GPIO_Init+0x12e>
 8002656:	4a98      	ldr	r2, [pc, #608]	; (80028b8 <HAL_GPIO_Init+0x2c8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d046      	beq.n	80026ea <HAL_GPIO_Init+0xfa>
 800265c:	4a96      	ldr	r2, [pc, #600]	; (80028b8 <HAL_GPIO_Init+0x2c8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d85d      	bhi.n	800271e <HAL_GPIO_Init+0x12e>
 8002662:	2b12      	cmp	r3, #18
 8002664:	d82a      	bhi.n	80026bc <HAL_GPIO_Init+0xcc>
 8002666:	2b12      	cmp	r3, #18
 8002668:	d859      	bhi.n	800271e <HAL_GPIO_Init+0x12e>
 800266a:	a201      	add	r2, pc, #4	; (adr r2, 8002670 <HAL_GPIO_Init+0x80>)
 800266c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002670:	080026eb 	.word	0x080026eb
 8002674:	080026c5 	.word	0x080026c5
 8002678:	080026d7 	.word	0x080026d7
 800267c:	08002719 	.word	0x08002719
 8002680:	0800271f 	.word	0x0800271f
 8002684:	0800271f 	.word	0x0800271f
 8002688:	0800271f 	.word	0x0800271f
 800268c:	0800271f 	.word	0x0800271f
 8002690:	0800271f 	.word	0x0800271f
 8002694:	0800271f 	.word	0x0800271f
 8002698:	0800271f 	.word	0x0800271f
 800269c:	0800271f 	.word	0x0800271f
 80026a0:	0800271f 	.word	0x0800271f
 80026a4:	0800271f 	.word	0x0800271f
 80026a8:	0800271f 	.word	0x0800271f
 80026ac:	0800271f 	.word	0x0800271f
 80026b0:	0800271f 	.word	0x0800271f
 80026b4:	080026cd 	.word	0x080026cd
 80026b8:	080026e1 	.word	0x080026e1
 80026bc:	4a7f      	ldr	r2, [pc, #508]	; (80028bc <HAL_GPIO_Init+0x2cc>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026c2:	e02c      	b.n	800271e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	623b      	str	r3, [r7, #32]
          break;
 80026ca:	e029      	b.n	8002720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	3304      	adds	r3, #4
 80026d2:	623b      	str	r3, [r7, #32]
          break;
 80026d4:	e024      	b.n	8002720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	3308      	adds	r3, #8
 80026dc:	623b      	str	r3, [r7, #32]
          break;
 80026de:	e01f      	b.n	8002720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	330c      	adds	r3, #12
 80026e6:	623b      	str	r3, [r7, #32]
          break;
 80026e8:	e01a      	b.n	8002720 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026f2:	2304      	movs	r3, #4
 80026f4:	623b      	str	r3, [r7, #32]
          break;
 80026f6:	e013      	b.n	8002720 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002700:	2308      	movs	r3, #8
 8002702:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	611a      	str	r2, [r3, #16]
          break;
 800270a:	e009      	b.n	8002720 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800270c:	2308      	movs	r3, #8
 800270e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	615a      	str	r2, [r3, #20]
          break;
 8002716:	e003      	b.n	8002720 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002718:	2300      	movs	r3, #0
 800271a:	623b      	str	r3, [r7, #32]
          break;
 800271c:	e000      	b.n	8002720 <HAL_GPIO_Init+0x130>
          break;
 800271e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2bff      	cmp	r3, #255	; 0xff
 8002724:	d801      	bhi.n	800272a <HAL_GPIO_Init+0x13a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	e001      	b.n	800272e <HAL_GPIO_Init+0x13e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2bff      	cmp	r3, #255	; 0xff
 8002734:	d802      	bhi.n	800273c <HAL_GPIO_Init+0x14c>
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	e002      	b.n	8002742 <HAL_GPIO_Init+0x152>
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	3b08      	subs	r3, #8
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	210f      	movs	r1, #15
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	fa01 f303 	lsl.w	r3, r1, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	401a      	ands	r2, r3
 8002754:	6a39      	ldr	r1, [r7, #32]
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	431a      	orrs	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80c1 	beq.w	80028f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_GPIO_Init+0x2d0>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002788:	4a4e      	ldr	r2, [pc, #312]	; (80028c4 <HAL_GPIO_Init+0x2d4>)
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	089b      	lsrs	r3, r3, #2
 800278e:	3302      	adds	r3, #2
 8002790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002794:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	220f      	movs	r2, #15
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	43db      	mvns	r3, r3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a46      	ldr	r2, [pc, #280]	; (80028c8 <HAL_GPIO_Init+0x2d8>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d01f      	beq.n	80027f4 <HAL_GPIO_Init+0x204>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a45      	ldr	r2, [pc, #276]	; (80028cc <HAL_GPIO_Init+0x2dc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d019      	beq.n	80027f0 <HAL_GPIO_Init+0x200>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a44      	ldr	r2, [pc, #272]	; (80028d0 <HAL_GPIO_Init+0x2e0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <HAL_GPIO_Init+0x1fc>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a43      	ldr	r2, [pc, #268]	; (80028d4 <HAL_GPIO_Init+0x2e4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d00d      	beq.n	80027e8 <HAL_GPIO_Init+0x1f8>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a42      	ldr	r2, [pc, #264]	; (80028d8 <HAL_GPIO_Init+0x2e8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d007      	beq.n	80027e4 <HAL_GPIO_Init+0x1f4>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a41      	ldr	r2, [pc, #260]	; (80028dc <HAL_GPIO_Init+0x2ec>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d101      	bne.n	80027e0 <HAL_GPIO_Init+0x1f0>
 80027dc:	2305      	movs	r3, #5
 80027de:	e00a      	b.n	80027f6 <HAL_GPIO_Init+0x206>
 80027e0:	2306      	movs	r3, #6
 80027e2:	e008      	b.n	80027f6 <HAL_GPIO_Init+0x206>
 80027e4:	2304      	movs	r3, #4
 80027e6:	e006      	b.n	80027f6 <HAL_GPIO_Init+0x206>
 80027e8:	2303      	movs	r3, #3
 80027ea:	e004      	b.n	80027f6 <HAL_GPIO_Init+0x206>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e002      	b.n	80027f6 <HAL_GPIO_Init+0x206>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_GPIO_Init+0x206>
 80027f4:	2300      	movs	r3, #0
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	f002 0203 	and.w	r2, r2, #3
 80027fc:	0092      	lsls	r2, r2, #2
 80027fe:	4093      	lsls	r3, r2
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002806:	492f      	ldr	r1, [pc, #188]	; (80028c4 <HAL_GPIO_Init+0x2d4>)
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	3302      	adds	r3, #2
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	492e      	ldr	r1, [pc, #184]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800282e:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	43db      	mvns	r3, r3
 8002836:	492a      	ldr	r1, [pc, #168]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002838:	4013      	ands	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4924      	ldr	r1, [pc, #144]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	e006      	b.n	8002864 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	43db      	mvns	r3, r3
 800285e:	4920      	ldr	r1, [pc, #128]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002860:	4013      	ands	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d006      	beq.n	800287e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	491a      	ldr	r1, [pc, #104]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
 800287c:	e006      	b.n	800288c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	43db      	mvns	r3, r3
 8002886:	4916      	ldr	r1, [pc, #88]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 8002888:	4013      	ands	r3, r2
 800288a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d025      	beq.n	80028e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4910      	ldr	r1, [pc, #64]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60cb      	str	r3, [r1, #12]
 80028a4:	e025      	b.n	80028f2 <HAL_GPIO_Init+0x302>
 80028a6:	bf00      	nop
 80028a8:	10320000 	.word	0x10320000
 80028ac:	10310000 	.word	0x10310000
 80028b0:	10220000 	.word	0x10220000
 80028b4:	10210000 	.word	0x10210000
 80028b8:	10120000 	.word	0x10120000
 80028bc:	10110000 	.word	0x10110000
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40010000 	.word	0x40010000
 80028c8:	40010800 	.word	0x40010800
 80028cc:	40010c00 	.word	0x40010c00
 80028d0:	40011000 	.word	0x40011000
 80028d4:	40011400 	.word	0x40011400
 80028d8:	40011800 	.word	0x40011800
 80028dc:	40011c00 	.word	0x40011c00
 80028e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_GPIO_Init+0x324>)
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4909      	ldr	r1, [pc, #36]	; (8002914 <HAL_GPIO_Init+0x324>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	f47f ae7e 	bne.w	8002604 <HAL_GPIO_Init+0x14>
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	372c      	adds	r7, #44	; 0x2c
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40010400 	.word	0x40010400

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002934:	e003      	b.n	800293e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	611a      	str	r2, [r3, #16]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4013      	ands	r3, r2
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	43d9      	mvns	r1, r3
 8002966:	887b      	ldrh	r3, [r7, #2]
 8002968:	400b      	ands	r3, r1
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	611a      	str	r2, [r3, #16]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
	...

0800297c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d006      	beq.n	80029a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002992:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd feaa 	bl	80006f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029a0:	bf00      	nop
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e12b      	b.n	8002c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7fd fdb4 	bl	8000540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a10:	f000 fce4 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8002a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4a81      	ldr	r2, [pc, #516]	; (8002c20 <HAL_I2C_Init+0x274>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d807      	bhi.n	8002a30 <HAL_I2C_Init+0x84>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a80      	ldr	r2, [pc, #512]	; (8002c24 <HAL_I2C_Init+0x278>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e006      	b.n	8002a3e <HAL_I2C_Init+0x92>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a7d      	ldr	r2, [pc, #500]	; (8002c28 <HAL_I2C_Init+0x27c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	bf94      	ite	ls
 8002a38:	2301      	movls	r3, #1
 8002a3a:	2300      	movhi	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0e7      	b.n	8002c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a78      	ldr	r2, [pc, #480]	; (8002c2c <HAL_I2C_Init+0x280>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0c9b      	lsrs	r3, r3, #18
 8002a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a6a      	ldr	r2, [pc, #424]	; (8002c20 <HAL_I2C_Init+0x274>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d802      	bhi.n	8002a80 <HAL_I2C_Init+0xd4>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	e009      	b.n	8002a94 <HAL_I2C_Init+0xe8>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	4a69      	ldr	r2, [pc, #420]	; (8002c30 <HAL_I2C_Init+0x284>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	3301      	adds	r3, #1
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	495c      	ldr	r1, [pc, #368]	; (8002c20 <HAL_I2C_Init+0x274>)
 8002ab0:	428b      	cmp	r3, r1
 8002ab2:	d819      	bhi.n	8002ae8 <HAL_I2C_Init+0x13c>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1e59      	subs	r1, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac2:	1c59      	adds	r1, r3, #1
 8002ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ac8:	400b      	ands	r3, r1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_I2C_Init+0x138>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e59      	subs	r1, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae2:	e051      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	e04f      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d111      	bne.n	8002b14 <HAL_I2C_Init+0x168>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e012      	b.n	8002b3a <HAL_I2C_Init+0x18e>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	0099      	lsls	r1, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Init+0x196>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e022      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10e      	bne.n	8002b68 <HAL_I2C_Init+0x1bc>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1e58      	subs	r0, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	440b      	add	r3, r1
 8002b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b66:	e00f      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	0099      	lsls	r1, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	6809      	ldr	r1, [r1, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6911      	ldr	r1, [r2, #16]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68d2      	ldr	r2, [r2, #12]
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	000186a0 	.word	0x000186a0
 8002c24:	001e847f 	.word	0x001e847f
 8002c28:	003d08ff 	.word	0x003d08ff
 8002c2c:	431bde83 	.word	0x431bde83
 8002c30:	10624dd3 	.word	0x10624dd3

08002c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e26c      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 8087 	beq.w	8002d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c54:	4b92      	ldr	r3, [pc, #584]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d00c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c60:	4b8f      	ldr	r3, [pc, #572]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	d112      	bne.n	8002c92 <HAL_RCC_OscConfig+0x5e>
 8002c6c:	4b8c      	ldr	r3, [pc, #560]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c78:	d10b      	bne.n	8002c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c7a:	4b89      	ldr	r3, [pc, #548]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d06c      	beq.n	8002d60 <HAL_RCC_OscConfig+0x12c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d168      	bne.n	8002d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e246      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9a:	d106      	bne.n	8002caa <HAL_RCC_OscConfig+0x76>
 8002c9c:	4b80      	ldr	r3, [pc, #512]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a7f      	ldr	r2, [pc, #508]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e02e      	b.n	8002d08 <HAL_RCC_OscConfig+0xd4>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCC_OscConfig+0x98>
 8002cb2:	4b7b      	ldr	r3, [pc, #492]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7a      	ldr	r2, [pc, #488]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	4b78      	ldr	r3, [pc, #480]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a77      	ldr	r2, [pc, #476]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	e01d      	b.n	8002d08 <HAL_RCC_OscConfig+0xd4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCC_OscConfig+0xbc>
 8002cd6:	4b72      	ldr	r3, [pc, #456]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a71      	ldr	r2, [pc, #452]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	4b6f      	ldr	r3, [pc, #444]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a6e      	ldr	r2, [pc, #440]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCC_OscConfig+0xd4>
 8002cf0:	4b6b      	ldr	r3, [pc, #428]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a6a      	ldr	r2, [pc, #424]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a67      	ldr	r2, [pc, #412]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fe fd60 	bl	80017d4 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d18:	f7fe fd5c 	bl	80017d4 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b64      	cmp	r3, #100	; 0x64
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e1fa      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0xe4>
 8002d36:	e014      	b.n	8002d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fe fd4c 	bl	80017d4 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe fd48 	bl	80017d4 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b64      	cmp	r3, #100	; 0x64
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e1e6      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	4b53      	ldr	r3, [pc, #332]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x10c>
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d063      	beq.n	8002e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d7a:	4b49      	ldr	r3, [pc, #292]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d11c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x18c>
 8002d86:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d116      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_RCC_OscConfig+0x176>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e1ba      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4939      	ldr	r1, [pc, #228]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dbe:	e03a      	b.n	8002e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d020      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dc8:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dce:	f7fe fd01 	bl	80017d4 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dd6:	f7fe fcfd 	bl	80017d4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e19b      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df4:	4b2a      	ldr	r3, [pc, #168]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4927      	ldr	r1, [pc, #156]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]
 8002e08:	e015      	b.n	8002e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0a:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fce0 	bl	80017d4 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe fcdc 	bl	80017d4 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e17a      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d03a      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d019      	beq.n	8002e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7fe fcc0 	bl	80017d4 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e58:	f7fe fcbc 	bl	80017d4 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e15a      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0f0      	beq.n	8002e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e76:	2001      	movs	r0, #1
 8002e78:	f000 fad8 	bl	800342c <RCC_Delay>
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_RCC_OscConfig+0x274>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fe fca6 	bl	80017d4 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8a:	e00f      	b.n	8002eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fca2 	bl	80017d4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d908      	bls.n	8002eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e140      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
 8002e9e:	bf00      	nop
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	42420000 	.word	0x42420000
 8002ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eac:	4b9e      	ldr	r3, [pc, #632]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e9      	bne.n	8002e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a6 	beq.w	8003012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eca:	4b97      	ldr	r3, [pc, #604]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed6:	4b94      	ldr	r3, [pc, #592]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4a93      	ldr	r2, [pc, #588]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	61d3      	str	r3, [r2, #28]
 8002ee2:	4b91      	ldr	r3, [pc, #580]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b8e      	ldr	r3, [pc, #568]	; (800312c <HAL_RCC_OscConfig+0x4f8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d118      	bne.n	8002f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efe:	4b8b      	ldr	r3, [pc, #556]	; (800312c <HAL_RCC_OscConfig+0x4f8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a8a      	ldr	r2, [pc, #552]	; (800312c <HAL_RCC_OscConfig+0x4f8>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0a:	f7fe fc63 	bl	80017d4 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7fe fc5f 	bl	80017d4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b64      	cmp	r3, #100	; 0x64
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0fd      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCC_OscConfig+0x4f8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x312>
 8002f38:	4b7b      	ldr	r3, [pc, #492]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4a7a      	ldr	r2, [pc, #488]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6213      	str	r3, [r2, #32]
 8002f44:	e02d      	b.n	8002fa2 <HAL_RCC_OscConfig+0x36e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x334>
 8002f4e:	4b76      	ldr	r3, [pc, #472]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f50:	6a1b      	ldr	r3, [r3, #32]
 8002f52:	4a75      	ldr	r2, [pc, #468]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	6213      	str	r3, [r2, #32]
 8002f5a:	4b73      	ldr	r3, [pc, #460]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4a72      	ldr	r2, [pc, #456]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f60:	f023 0304 	bic.w	r3, r3, #4
 8002f64:	6213      	str	r3, [r2, #32]
 8002f66:	e01c      	b.n	8002fa2 <HAL_RCC_OscConfig+0x36e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	d10c      	bne.n	8002f8a <HAL_RCC_OscConfig+0x356>
 8002f70:	4b6d      	ldr	r3, [pc, #436]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4a6c      	ldr	r2, [pc, #432]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	f043 0304 	orr.w	r3, r3, #4
 8002f7a:	6213      	str	r3, [r2, #32]
 8002f7c:	4b6a      	ldr	r3, [pc, #424]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a69      	ldr	r2, [pc, #420]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6213      	str	r3, [r2, #32]
 8002f88:	e00b      	b.n	8002fa2 <HAL_RCC_OscConfig+0x36e>
 8002f8a:	4b67      	ldr	r3, [pc, #412]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	4a66      	ldr	r2, [pc, #408]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6213      	str	r3, [r2, #32]
 8002f96:	4b64      	ldr	r3, [pc, #400]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4a63      	ldr	r2, [pc, #396]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d015      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002faa:	f7fe fc13 	bl	80017d4 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe fc0f 	bl	80017d4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e0ab      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc8:	4b57      	ldr	r3, [pc, #348]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d0ee      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x37e>
 8002fd4:	e014      	b.n	8003000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd6:	f7fe fbfd 	bl	80017d4 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fdc:	e00a      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fde:	f7fe fbf9 	bl	80017d4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e095      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ee      	bne.n	8002fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003000:	7dfb      	ldrb	r3, [r7, #23]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d105      	bne.n	8003012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003006:	4b48      	ldr	r3, [pc, #288]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4a47      	ldr	r2, [pc, #284]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 800300c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 8081 	beq.w	800311e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800301c:	4b42      	ldr	r3, [pc, #264]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b08      	cmp	r3, #8
 8003026:	d061      	beq.n	80030ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d146      	bne.n	80030be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <HAL_RCC_OscConfig+0x4fc>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe fbcd 	bl	80017d4 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe fbc9 	bl	80017d4 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e067      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003050:	4b35      	ldr	r3, [pc, #212]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003064:	d108      	bne.n	8003078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003066:	4b30      	ldr	r3, [pc, #192]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	492d      	ldr	r1, [pc, #180]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a19      	ldr	r1, [r3, #32]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	430b      	orrs	r3, r1
 800308a:	4927      	ldr	r1, [pc, #156]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003090:	4b27      	ldr	r3, [pc, #156]	; (8003130 <HAL_RCC_OscConfig+0x4fc>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fe fb9d 	bl	80017d4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309e:	f7fe fb99 	bl	80017d4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e037      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b0:	4b1d      	ldr	r3, [pc, #116]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x46a>
 80030bc:	e02f      	b.n	800311e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030be:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <HAL_RCC_OscConfig+0x4fc>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fb86 	bl	80017d4 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fe fb82 	bl	80017d4 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e020      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030de:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x498>
 80030ea:	e018      	b.n	800311e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e013      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_OscConfig+0x4f4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	429a      	cmp	r2, r3
 800310a:	d106      	bne.n	800311a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	429a      	cmp	r2, r3
 8003118:	d001      	beq.n	800311e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	40007000 	.word	0x40007000
 8003130:	42420060 	.word	0x42420060

08003134 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0d0      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003148:	4b6a      	ldr	r3, [pc, #424]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d910      	bls.n	8003178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 0207 	bic.w	r2, r3, #7
 800315e:	4965      	ldr	r1, [pc, #404]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0b8      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d020      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003190:	4b59      	ldr	r3, [pc, #356]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800319a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0308 	and.w	r3, r3, #8
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a8:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b4:	4b50      	ldr	r3, [pc, #320]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	494d      	ldr	r1, [pc, #308]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d040      	beq.n	8003254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	4b47      	ldr	r3, [pc, #284]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d115      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e07f      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f2:	4b41      	ldr	r3, [pc, #260]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d109      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e073      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e06b      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003212:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	4936      	ldr	r1, [pc, #216]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003224:	f7fe fad6 	bl	80017d4 <HAL_GetTick>
 8003228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	e00a      	b.n	8003242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800322c:	f7fe fad2 	bl	80017d4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e053      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 020c 	and.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	429a      	cmp	r2, r3
 8003252:	d1eb      	bne.n	800322c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003254:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d210      	bcs.n	8003284 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 0207 	bic.w	r2, r3, #7
 800326a:	4922      	ldr	r1, [pc, #136]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e032      	b.n	80032ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003290:	4b19      	ldr	r3, [pc, #100]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4916      	ldr	r1, [pc, #88]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ae:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	490e      	ldr	r1, [pc, #56]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032c2:	f000 f821 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80032c6:	4602      	mov	r2, r0
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	490a      	ldr	r1, [pc, #40]	; (80032fc <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	5ccb      	ldrb	r3, [r1, r3]
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	4a09      	ldr	r2, [pc, #36]	; (8003300 <HAL_RCC_ClockConfig+0x1cc>)
 80032dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032de:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x1d0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fa34 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40021000 	.word	0x40021000
 80032fc:	08004f34 	.word	0x08004f34
 8003300:	20000004 	.word	0x20000004
 8003304:	20000008 	.word	0x20000008

08003308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003308:	b490      	push	{r4, r7}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003310:	1d3c      	adds	r4, r7, #4
 8003312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003318:	f240 2301 	movw	r3, #513	; 0x201
 800331c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	2300      	movs	r3, #0
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b04      	cmp	r3, #4
 8003340:	d002      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x40>
 8003342:	2b08      	cmp	r3, #8
 8003344:	d003      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x46>
 8003346:	e02d      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800334a:	623b      	str	r3, [r7, #32]
      break;
 800334c:	e02d      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	0c9b      	lsrs	r3, r3, #18
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800335a:	4413      	add	r3, r2
 800335c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003360:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d013      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	0c5b      	lsrs	r3, r3, #17
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800337a:	4413      	add	r3, r2
 800337c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003380:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003386:	fb02 f203 	mul.w	r2, r2, r3
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
 8003392:	e004      	b.n	800339e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003398:	fb02 f303 	mul.w	r3, r2, r3
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	623b      	str	r3, [r7, #32]
      break;
 80033a2:	e002      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a6:	623b      	str	r3, [r7, #32]
      break;
 80033a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033aa:	6a3b      	ldr	r3, [r7, #32]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3728      	adds	r7, #40	; 0x28
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc90      	pop	{r4, r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	08004c24 	.word	0x08004c24
 80033bc:	40021000 	.word	0x40021000
 80033c0:	007a1200 	.word	0x007a1200
 80033c4:	003d0900 	.word	0x003d0900

080033c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033cc:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	20000004 	.word	0x20000004

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e0:	f7ff fff2 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4903      	ldr	r1, [pc, #12]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	08004f44 	.word	0x08004f44

08003404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003408:	f7ff ffde 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	0adb      	lsrs	r3, r3, #11
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	08004f44 	.word	0x08004f44

0800342c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003434:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <RCC_Delay+0x34>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <RCC_Delay+0x38>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	0a5b      	lsrs	r3, r3, #9
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	fb02 f303 	mul.w	r3, r2, r3
 8003446:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003448:	bf00      	nop
  }
  while (Delay --);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1e5a      	subs	r2, r3, #1
 800344e:	60fa      	str	r2, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1f9      	bne.n	8003448 <RCC_Delay+0x1c>
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	20000004 	.word	0x20000004
 8003464:	10624dd3 	.word	0x10624dd3

08003468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e076      	b.n	8003568 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	2b00      	cmp	r3, #0
 8003480:	d108      	bne.n	8003494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800348a:	d009      	beq.n	80034a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	61da      	str	r2, [r3, #28]
 8003492:	e005      	b.n	80034a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fea2 	bl	8001204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003524:	ea42 0103 	orr.w	r1, r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	0c1a      	lsrs	r2, r3, #16
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f002 0204 	and.w	r2, r2, #4
 8003546:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003556:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_SPI_TransmitReceive_DMA+0x20>
 800358c:	2302      	movs	r3, #2
 800358e:	e0e3      	b.n	8003758 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80035a6:	7dbb      	ldrb	r3, [r7, #22]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d00d      	beq.n	80035c8 <HAL_SPI_TransmitReceive_DMA+0x58>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b2:	d106      	bne.n	80035c2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d102      	bne.n	80035c2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80035bc:	7dbb      	ldrb	r3, [r7, #22]
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d002      	beq.n	80035c8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
 80035c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035c6:	e0c2      	b.n	800374e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d005      	beq.n	80035da <HAL_SPI_TransmitReceive_DMA+0x6a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_SPI_TransmitReceive_DMA+0x6a>
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035de:	e0b6      	b.n	800374e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d003      	beq.n	80035f4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2205      	movs	r2, #5
 80035f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	887a      	ldrh	r2, [r7, #2]
 800360a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	887a      	ldrh	r2, [r7, #2]
 8003616:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b04      	cmp	r3, #4
 8003634:	d108      	bne.n	8003648 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363a:	4a49      	ldr	r2, [pc, #292]	; (8003760 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	4a48      	ldr	r2, [pc, #288]	; (8003764 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003644:	629a      	str	r2, [r3, #40]	; 0x28
 8003646:	e007      	b.n	8003658 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364c:	4a46      	ldr	r2, [pc, #280]	; (8003768 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003654:	4a45      	ldr	r2, [pc, #276]	; (800376c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	4a44      	ldr	r2, [pc, #272]	; (8003770 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800365e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	2200      	movs	r2, #0
 8003666:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	4619      	mov	r1, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003680:	f7fe fa36 	bl	8001af0 <HAL_DMA_Start_IT>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00c      	beq.n	80036a4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800368e:	f043 0210 	orr.w	r2, r3, #16
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80036a2:	e054      	b.n	800374e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0201 	orr.w	r2, r2, #1
 80036b2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b8:	2200      	movs	r2, #0
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c0:	2200      	movs	r2, #0
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d0:	2200      	movs	r2, #0
 80036d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4619      	mov	r1, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80036ec:	f7fe fa00 	bl	8001af0 <HAL_DMA_Start_IT>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00c      	beq.n	8003710 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800370e:	e01e      	b.n	800374e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d007      	beq.n	800372e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0220 	orr.w	r2, r2, #32
 800373c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0202 	orr.w	r2, r2, #2
 800374c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	08003b3d 	.word	0x08003b3d
 8003764:	08003a09 	.word	0x08003a09
 8003768:	08003b59 	.word	0x08003b59
 800376c:	08003aaf 	.word	0x08003aaf
 8003770:	08003b75 	.word	0x08003b75

08003774 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00f      	beq.n	80037a8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fa0e 	bl	8001bae <HAL_DMA_Abort>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d007      	beq.n	80037a8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f043 0210 	orr.w	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00f      	beq.n	80037d0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fe f9fa 	bl	8001bae <HAL_DMA_Abort>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d007      	beq.n	80037d0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c4:	f043 0210 	orr.w	r2, r3, #16
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0203 	bic.w	r2, r2, #3
 80037de:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10f      	bne.n	8003838 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
    return;
 8003836:	e0be      	b.n	80039b6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_SPI_IRQHandler+0x66>
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	09db      	lsrs	r3, r3, #7
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
    return;
 8003858:	e0ad      	b.n	80039b6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	095b      	lsrs	r3, r3, #5
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_SPI_IRQHandler+0x80>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80a1 	beq.w	80039b6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 0301 	and.w	r3, r3, #1
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 809a 	beq.w	80039b6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	099b      	lsrs	r3, r3, #6
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d023      	beq.n	80038d6 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b03      	cmp	r3, #3
 8003898:	d011      	beq.n	80038be <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800389e:	f043 0204 	orr.w	r2, r3, #4
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	e00b      	b.n	80038d6 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	693b      	ldr	r3, [r7, #16]
        return;
 80038d4:	e06f      	b.n	80039b6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	095b      	lsrs	r3, r3, #5
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d014      	beq.n	800390c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f043 0201 	orr.w	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	2b00      	cmp	r3, #0
 8003912:	d04f      	beq.n	80039b4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003922:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d104      	bne.n	8003940 <HAL_SPI_IRQHandler+0x14c>
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d034      	beq.n	80039aa <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0203 	bic.w	r2, r2, #3
 800394e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d011      	beq.n	800397c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <HAL_SPI_IRQHandler+0x1c8>)
 800395e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe f95d 	bl	8001c24 <HAL_DMA_Abort_IT>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003980:	2b00      	cmp	r3, #0
 8003982:	d016      	beq.n	80039b2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003988:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <HAL_SPI_IRQHandler+0x1c8>)
 800398a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe f947 	bl	8001c24 <HAL_DMA_Abort_IT>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80039a8:	e003      	b.n	80039b2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f823 	bl	80039f6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80039b0:	e000      	b.n	80039b4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80039b2:	bf00      	nop
    return;
 80039b4:	bf00      	nop
  }
}
 80039b6:	3720      	adds	r7, #32
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	08003bb5 	.word	0x08003bb5

080039c0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr

080039d2 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr

08003a08 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a16:	f7fd fedd 	bl	80017d4 <HAL_GetTick>
 8003a1a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0320 	and.w	r3, r3, #32
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d03b      	beq.n	8003aa2 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0220 	bic.w	r2, r2, #32
 8003a38:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10d      	bne.n	8003a5e <SPI_DMAReceiveCplt+0x56>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a4a:	d108      	bne.n	8003a5e <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0203 	bic.w	r2, r2, #3
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	e007      	b.n	8003a6e <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	2164      	movs	r1, #100	; 0x64
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 f93a 	bl	8003cec <SPI_EndRxTransaction>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff ffab 	bl	80039f6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003aa0:	e002      	b.n	8003aa8 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f7ff ff8c 	bl	80039c0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003abc:	f7fd fe8a 	bl	80017d4 <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d02f      	beq.n	8003b30 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0220 	bic.w	r2, r2, #32
 8003ade:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	2164      	movs	r1, #100	; 0x64
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f953 	bl	8003d90 <SPI_EndRxTxTransaction>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0203 	bic.w	r2, r2, #3
 8003b0a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7ff ff64 	bl	80039f6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b2e:	e002      	b.n	8003b36 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7fc fdeb 	bl	800070c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ff41 	bl	80039d2 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7ff ff3c 	bl	80039e4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0203 	bic.w	r2, r2, #3
 8003b90:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f043 0210 	orr.w	r2, r3, #16
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7ff ff25 	bl	80039f6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff ff11 	bl	80039f6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bec:	f7fd fdf2 	bl	80017d4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bfc:	f7fd fdea 	bl	80017d4 <HAL_GetTick>
 8003c00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	015b      	lsls	r3, r3, #5
 8003c08:	0d1b      	lsrs	r3, r3, #20
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c12:	e054      	b.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d050      	beq.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c1c:	f7fd fdda 	bl	80017d4 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d902      	bls.n	8003c32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d13d      	bne.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c4a:	d111      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c54:	d004      	beq.n	8003c60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c5e:	d107      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c78:	d10f      	bne.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e017      	b.n	8003cde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d19b      	bne.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000004 	.word	0x20000004

08003cec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af02      	add	r7, sp, #8
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d00:	d111      	bne.n	8003d26 <SPI_EndRxTransaction+0x3a>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0a:	d004      	beq.n	8003d16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d14:	d107      	bne.n	8003d26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d24:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d2e:	d117      	bne.n	8003d60 <SPI_EndRxTransaction+0x74>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d38:	d112      	bne.n	8003d60 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2200      	movs	r2, #0
 8003d42:	2101      	movs	r1, #1
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff ff49 	bl	8003bdc <SPI_WaitFlagStateUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d01a      	beq.n	8003d86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e013      	b.n	8003d88 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2200      	movs	r2, #0
 8003d68:	2180      	movs	r1, #128	; 0x80
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff ff36 	bl	8003bdc <SPI_WaitFlagStateUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e000      	b.n	8003d88 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2200      	movs	r2, #0
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff ff18 	bl	8003bdc <SPI_WaitFlagStateUntilTimeout>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db6:	f043 0220 	orr.w	r2, r3, #32
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e000      	b.n	8003dc4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e03f      	b.n	8003e5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7fd fbbc 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2224      	movs	r2, #36	; 0x24
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f905 	bl	8004020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695a      	ldr	r2, [r3, #20]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b08a      	sub	sp, #40	; 0x28
 8003e6a:	af02      	add	r7, sp, #8
 8003e6c:	60f8      	str	r0, [r7, #12]
 8003e6e:	60b9      	str	r1, [r7, #8]
 8003e70:	603b      	str	r3, [r7, #0]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d17c      	bne.n	8003f80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <HAL_UART_Transmit+0x2c>
 8003e8c:	88fb      	ldrh	r3, [r7, #6]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e075      	b.n	8003f82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_UART_Transmit+0x3e>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e06e      	b.n	8003f82 <HAL_UART_Transmit+0x11c>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2221      	movs	r2, #33	; 0x21
 8003eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eba:	f7fd fc8b 	bl	80017d4 <HAL_GetTick>
 8003ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed4:	d108      	bne.n	8003ee8 <HAL_UART_Transmit+0x82>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d104      	bne.n	8003ee8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	e003      	b.n	8003ef0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ef8:	e02a      	b.n	8003f50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2180      	movs	r1, #128	; 0x80
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f840 	bl	8003f8a <UART_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e036      	b.n	8003f82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10b      	bne.n	8003f32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	3302      	adds	r3, #2
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	e007      	b.n	8003f42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1cf      	bne.n	8003efa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	2140      	movs	r1, #64	; 0x40
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f810 	bl	8003f8a <UART_WaitOnFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e006      	b.n	8003f82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	603b      	str	r3, [r7, #0]
 8003f96:	4613      	mov	r3, r2
 8003f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9a:	e02c      	b.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa2:	d028      	beq.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0x30>
 8003faa:	f7fd fc13 	bl	80017d4 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d21d      	bcs.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e00f      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d0c3      	beq.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800405a:	f023 030c 	bic.w	r3, r3, #12
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	430b      	orrs	r3, r1
 8004066:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2c      	ldr	r2, [pc, #176]	; (8004134 <UART_SetConfig+0x114>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d103      	bne.n	8004090 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7ff f9bc 	bl	8003404 <HAL_RCC_GetPCLK2Freq>
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	e002      	b.n	8004096 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7ff f9a4 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004094:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009a      	lsls	r2, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	4a22      	ldr	r2, [pc, #136]	; (8004138 <UART_SetConfig+0x118>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	0119      	lsls	r1, r3, #4
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009a      	lsls	r2, r3, #2
 80040c0:	441a      	add	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80040cc:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <UART_SetConfig+0x118>)
 80040ce:	fba3 0302 	umull	r0, r3, r3, r2
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2064      	movs	r0, #100	; 0x64
 80040d6:	fb00 f303 	mul.w	r3, r0, r3
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	3332      	adds	r3, #50	; 0x32
 80040e0:	4a15      	ldr	r2, [pc, #84]	; (8004138 <UART_SetConfig+0x118>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ec:	4419      	add	r1, r3
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009a      	lsls	r2, r3, #2
 80040f8:	441a      	add	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	fbb2 f2f3 	udiv	r2, r2, r3
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <UART_SetConfig+0x118>)
 8004106:	fba3 0302 	umull	r0, r3, r3, r2
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2064      	movs	r0, #100	; 0x64
 800410e:	fb00 f303 	mul.w	r3, r0, r3
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	3332      	adds	r3, #50	; 0x32
 8004118:	4a07      	ldr	r2, [pc, #28]	; (8004138 <UART_SetConfig+0x118>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	f003 020f 	and.w	r2, r3, #15
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	440a      	add	r2, r1
 800412a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40013800 	.word	0x40013800
 8004138:	51eb851f 	.word	0x51eb851f

0800413c <__errno>:
 800413c:	4b01      	ldr	r3, [pc, #4]	; (8004144 <__errno+0x8>)
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000010 	.word	0x20000010

08004148 <__libc_init_array>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	2600      	movs	r6, #0
 800414c:	4d0c      	ldr	r5, [pc, #48]	; (8004180 <__libc_init_array+0x38>)
 800414e:	4c0d      	ldr	r4, [pc, #52]	; (8004184 <__libc_init_array+0x3c>)
 8004150:	1b64      	subs	r4, r4, r5
 8004152:	10a4      	asrs	r4, r4, #2
 8004154:	42a6      	cmp	r6, r4
 8004156:	d109      	bne.n	800416c <__libc_init_array+0x24>
 8004158:	f000 fc6a 	bl	8004a30 <_init>
 800415c:	2600      	movs	r6, #0
 800415e:	4d0a      	ldr	r5, [pc, #40]	; (8004188 <__libc_init_array+0x40>)
 8004160:	4c0a      	ldr	r4, [pc, #40]	; (800418c <__libc_init_array+0x44>)
 8004162:	1b64      	subs	r4, r4, r5
 8004164:	10a4      	asrs	r4, r4, #2
 8004166:	42a6      	cmp	r6, r4
 8004168:	d105      	bne.n	8004176 <__libc_init_array+0x2e>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004170:	4798      	blx	r3
 8004172:	3601      	adds	r6, #1
 8004174:	e7ee      	b.n	8004154 <__libc_init_array+0xc>
 8004176:	f855 3b04 	ldr.w	r3, [r5], #4
 800417a:	4798      	blx	r3
 800417c:	3601      	adds	r6, #1
 800417e:	e7f2      	b.n	8004166 <__libc_init_array+0x1e>
 8004180:	08004f80 	.word	0x08004f80
 8004184:	08004f80 	.word	0x08004f80
 8004188:	08004f80 	.word	0x08004f80
 800418c:	08004f84 	.word	0x08004f84

08004190 <memcmp>:
 8004190:	b530      	push	{r4, r5, lr}
 8004192:	2400      	movs	r4, #0
 8004194:	3901      	subs	r1, #1
 8004196:	42a2      	cmp	r2, r4
 8004198:	d101      	bne.n	800419e <memcmp+0xe>
 800419a:	2000      	movs	r0, #0
 800419c:	e005      	b.n	80041aa <memcmp+0x1a>
 800419e:	5d03      	ldrb	r3, [r0, r4]
 80041a0:	3401      	adds	r4, #1
 80041a2:	5d0d      	ldrb	r5, [r1, r4]
 80041a4:	42ab      	cmp	r3, r5
 80041a6:	d0f6      	beq.n	8004196 <memcmp+0x6>
 80041a8:	1b58      	subs	r0, r3, r5
 80041aa:	bd30      	pop	{r4, r5, pc}

080041ac <memcpy>:
 80041ac:	440a      	add	r2, r1
 80041ae:	4291      	cmp	r1, r2
 80041b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80041b4:	d100      	bne.n	80041b8 <memcpy+0xc>
 80041b6:	4770      	bx	lr
 80041b8:	b510      	push	{r4, lr}
 80041ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041be:	4291      	cmp	r1, r2
 80041c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c4:	d1f9      	bne.n	80041ba <memcpy+0xe>
 80041c6:	bd10      	pop	{r4, pc}

080041c8 <memset>:
 80041c8:	4603      	mov	r3, r0
 80041ca:	4402      	add	r2, r0
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d100      	bne.n	80041d2 <memset+0xa>
 80041d0:	4770      	bx	lr
 80041d2:	f803 1b01 	strb.w	r1, [r3], #1
 80041d6:	e7f9      	b.n	80041cc <memset+0x4>

080041d8 <_vsiprintf_r>:
 80041d8:	b500      	push	{lr}
 80041da:	b09b      	sub	sp, #108	; 0x6c
 80041dc:	9100      	str	r1, [sp, #0]
 80041de:	9104      	str	r1, [sp, #16]
 80041e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041e4:	9105      	str	r1, [sp, #20]
 80041e6:	9102      	str	r1, [sp, #8]
 80041e8:	4905      	ldr	r1, [pc, #20]	; (8004200 <_vsiprintf_r+0x28>)
 80041ea:	9103      	str	r1, [sp, #12]
 80041ec:	4669      	mov	r1, sp
 80041ee:	f000 f86f 	bl	80042d0 <_svfiprintf_r>
 80041f2:	2200      	movs	r2, #0
 80041f4:	9b00      	ldr	r3, [sp, #0]
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	b01b      	add	sp, #108	; 0x6c
 80041fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80041fe:	bf00      	nop
 8004200:	ffff0208 	.word	0xffff0208

08004204 <vsiprintf>:
 8004204:	4613      	mov	r3, r2
 8004206:	460a      	mov	r2, r1
 8004208:	4601      	mov	r1, r0
 800420a:	4802      	ldr	r0, [pc, #8]	; (8004214 <vsiprintf+0x10>)
 800420c:	6800      	ldr	r0, [r0, #0]
 800420e:	f7ff bfe3 	b.w	80041d8 <_vsiprintf_r>
 8004212:	bf00      	nop
 8004214:	20000010 	.word	0x20000010

08004218 <__ssputs_r>:
 8004218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	688e      	ldr	r6, [r1, #8]
 800421e:	4682      	mov	sl, r0
 8004220:	429e      	cmp	r6, r3
 8004222:	460c      	mov	r4, r1
 8004224:	4690      	mov	r8, r2
 8004226:	461f      	mov	r7, r3
 8004228:	d838      	bhi.n	800429c <__ssputs_r+0x84>
 800422a:	898a      	ldrh	r2, [r1, #12]
 800422c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004230:	d032      	beq.n	8004298 <__ssputs_r+0x80>
 8004232:	6825      	ldr	r5, [r4, #0]
 8004234:	6909      	ldr	r1, [r1, #16]
 8004236:	3301      	adds	r3, #1
 8004238:	eba5 0901 	sub.w	r9, r5, r1
 800423c:	6965      	ldr	r5, [r4, #20]
 800423e:	444b      	add	r3, r9
 8004240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004244:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004248:	106d      	asrs	r5, r5, #1
 800424a:	429d      	cmp	r5, r3
 800424c:	bf38      	it	cc
 800424e:	461d      	movcc	r5, r3
 8004250:	0553      	lsls	r3, r2, #21
 8004252:	d531      	bpl.n	80042b8 <__ssputs_r+0xa0>
 8004254:	4629      	mov	r1, r5
 8004256:	f000 fb45 	bl	80048e4 <_malloc_r>
 800425a:	4606      	mov	r6, r0
 800425c:	b950      	cbnz	r0, 8004274 <__ssputs_r+0x5c>
 800425e:	230c      	movs	r3, #12
 8004260:	f04f 30ff 	mov.w	r0, #4294967295
 8004264:	f8ca 3000 	str.w	r3, [sl]
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426e:	81a3      	strh	r3, [r4, #12]
 8004270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004274:	464a      	mov	r2, r9
 8004276:	6921      	ldr	r1, [r4, #16]
 8004278:	f7ff ff98 	bl	80041ac <memcpy>
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	6126      	str	r6, [r4, #16]
 800428a:	444e      	add	r6, r9
 800428c:	6026      	str	r6, [r4, #0]
 800428e:	463e      	mov	r6, r7
 8004290:	6165      	str	r5, [r4, #20]
 8004292:	eba5 0509 	sub.w	r5, r5, r9
 8004296:	60a5      	str	r5, [r4, #8]
 8004298:	42be      	cmp	r6, r7
 800429a:	d900      	bls.n	800429e <__ssputs_r+0x86>
 800429c:	463e      	mov	r6, r7
 800429e:	4632      	mov	r2, r6
 80042a0:	4641      	mov	r1, r8
 80042a2:	6820      	ldr	r0, [r4, #0]
 80042a4:	f000 fab8 	bl	8004818 <memmove>
 80042a8:	68a3      	ldr	r3, [r4, #8]
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	1b9b      	subs	r3, r3, r6
 80042ae:	4432      	add	r2, r6
 80042b0:	2000      	movs	r0, #0
 80042b2:	60a3      	str	r3, [r4, #8]
 80042b4:	6022      	str	r2, [r4, #0]
 80042b6:	e7db      	b.n	8004270 <__ssputs_r+0x58>
 80042b8:	462a      	mov	r2, r5
 80042ba:	f000 fb6d 	bl	8004998 <_realloc_r>
 80042be:	4606      	mov	r6, r0
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d1e1      	bne.n	8004288 <__ssputs_r+0x70>
 80042c4:	4650      	mov	r0, sl
 80042c6:	6921      	ldr	r1, [r4, #16]
 80042c8:	f000 fac0 	bl	800484c <_free_r>
 80042cc:	e7c7      	b.n	800425e <__ssputs_r+0x46>
	...

080042d0 <_svfiprintf_r>:
 80042d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042d4:	4698      	mov	r8, r3
 80042d6:	898b      	ldrh	r3, [r1, #12]
 80042d8:	4607      	mov	r7, r0
 80042da:	061b      	lsls	r3, r3, #24
 80042dc:	460d      	mov	r5, r1
 80042de:	4614      	mov	r4, r2
 80042e0:	b09d      	sub	sp, #116	; 0x74
 80042e2:	d50e      	bpl.n	8004302 <_svfiprintf_r+0x32>
 80042e4:	690b      	ldr	r3, [r1, #16]
 80042e6:	b963      	cbnz	r3, 8004302 <_svfiprintf_r+0x32>
 80042e8:	2140      	movs	r1, #64	; 0x40
 80042ea:	f000 fafb 	bl	80048e4 <_malloc_r>
 80042ee:	6028      	str	r0, [r5, #0]
 80042f0:	6128      	str	r0, [r5, #16]
 80042f2:	b920      	cbnz	r0, 80042fe <_svfiprintf_r+0x2e>
 80042f4:	230c      	movs	r3, #12
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	e0d1      	b.n	80044a2 <_svfiprintf_r+0x1d2>
 80042fe:	2340      	movs	r3, #64	; 0x40
 8004300:	616b      	str	r3, [r5, #20]
 8004302:	2300      	movs	r3, #0
 8004304:	9309      	str	r3, [sp, #36]	; 0x24
 8004306:	2320      	movs	r3, #32
 8004308:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800430c:	2330      	movs	r3, #48	; 0x30
 800430e:	f04f 0901 	mov.w	r9, #1
 8004312:	f8cd 800c 	str.w	r8, [sp, #12]
 8004316:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044bc <_svfiprintf_r+0x1ec>
 800431a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800431e:	4623      	mov	r3, r4
 8004320:	469a      	mov	sl, r3
 8004322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004326:	b10a      	cbz	r2, 800432c <_svfiprintf_r+0x5c>
 8004328:	2a25      	cmp	r2, #37	; 0x25
 800432a:	d1f9      	bne.n	8004320 <_svfiprintf_r+0x50>
 800432c:	ebba 0b04 	subs.w	fp, sl, r4
 8004330:	d00b      	beq.n	800434a <_svfiprintf_r+0x7a>
 8004332:	465b      	mov	r3, fp
 8004334:	4622      	mov	r2, r4
 8004336:	4629      	mov	r1, r5
 8004338:	4638      	mov	r0, r7
 800433a:	f7ff ff6d 	bl	8004218 <__ssputs_r>
 800433e:	3001      	adds	r0, #1
 8004340:	f000 80aa 	beq.w	8004498 <_svfiprintf_r+0x1c8>
 8004344:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004346:	445a      	add	r2, fp
 8004348:	9209      	str	r2, [sp, #36]	; 0x24
 800434a:	f89a 3000 	ldrb.w	r3, [sl]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80a2 	beq.w	8004498 <_svfiprintf_r+0x1c8>
 8004354:	2300      	movs	r3, #0
 8004356:	f04f 32ff 	mov.w	r2, #4294967295
 800435a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800435e:	f10a 0a01 	add.w	sl, sl, #1
 8004362:	9304      	str	r3, [sp, #16]
 8004364:	9307      	str	r3, [sp, #28]
 8004366:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800436a:	931a      	str	r3, [sp, #104]	; 0x68
 800436c:	4654      	mov	r4, sl
 800436e:	2205      	movs	r2, #5
 8004370:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004374:	4851      	ldr	r0, [pc, #324]	; (80044bc <_svfiprintf_r+0x1ec>)
 8004376:	f000 fa41 	bl	80047fc <memchr>
 800437a:	9a04      	ldr	r2, [sp, #16]
 800437c:	b9d8      	cbnz	r0, 80043b6 <_svfiprintf_r+0xe6>
 800437e:	06d0      	lsls	r0, r2, #27
 8004380:	bf44      	itt	mi
 8004382:	2320      	movmi	r3, #32
 8004384:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004388:	0711      	lsls	r1, r2, #28
 800438a:	bf44      	itt	mi
 800438c:	232b      	movmi	r3, #43	; 0x2b
 800438e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004392:	f89a 3000 	ldrb.w	r3, [sl]
 8004396:	2b2a      	cmp	r3, #42	; 0x2a
 8004398:	d015      	beq.n	80043c6 <_svfiprintf_r+0xf6>
 800439a:	4654      	mov	r4, sl
 800439c:	2000      	movs	r0, #0
 800439e:	f04f 0c0a 	mov.w	ip, #10
 80043a2:	9a07      	ldr	r2, [sp, #28]
 80043a4:	4621      	mov	r1, r4
 80043a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043aa:	3b30      	subs	r3, #48	; 0x30
 80043ac:	2b09      	cmp	r3, #9
 80043ae:	d94e      	bls.n	800444e <_svfiprintf_r+0x17e>
 80043b0:	b1b0      	cbz	r0, 80043e0 <_svfiprintf_r+0x110>
 80043b2:	9207      	str	r2, [sp, #28]
 80043b4:	e014      	b.n	80043e0 <_svfiprintf_r+0x110>
 80043b6:	eba0 0308 	sub.w	r3, r0, r8
 80043ba:	fa09 f303 	lsl.w	r3, r9, r3
 80043be:	4313      	orrs	r3, r2
 80043c0:	46a2      	mov	sl, r4
 80043c2:	9304      	str	r3, [sp, #16]
 80043c4:	e7d2      	b.n	800436c <_svfiprintf_r+0x9c>
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	1d19      	adds	r1, r3, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	9103      	str	r1, [sp, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	bfbb      	ittet	lt
 80043d2:	425b      	neglt	r3, r3
 80043d4:	f042 0202 	orrlt.w	r2, r2, #2
 80043d8:	9307      	strge	r3, [sp, #28]
 80043da:	9307      	strlt	r3, [sp, #28]
 80043dc:	bfb8      	it	lt
 80043de:	9204      	strlt	r2, [sp, #16]
 80043e0:	7823      	ldrb	r3, [r4, #0]
 80043e2:	2b2e      	cmp	r3, #46	; 0x2e
 80043e4:	d10c      	bne.n	8004400 <_svfiprintf_r+0x130>
 80043e6:	7863      	ldrb	r3, [r4, #1]
 80043e8:	2b2a      	cmp	r3, #42	; 0x2a
 80043ea:	d135      	bne.n	8004458 <_svfiprintf_r+0x188>
 80043ec:	9b03      	ldr	r3, [sp, #12]
 80043ee:	3402      	adds	r4, #2
 80043f0:	1d1a      	adds	r2, r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	9203      	str	r2, [sp, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	bfb8      	it	lt
 80043fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80043fe:	9305      	str	r3, [sp, #20]
 8004400:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044cc <_svfiprintf_r+0x1fc>
 8004404:	2203      	movs	r2, #3
 8004406:	4650      	mov	r0, sl
 8004408:	7821      	ldrb	r1, [r4, #0]
 800440a:	f000 f9f7 	bl	80047fc <memchr>
 800440e:	b140      	cbz	r0, 8004422 <_svfiprintf_r+0x152>
 8004410:	2340      	movs	r3, #64	; 0x40
 8004412:	eba0 000a 	sub.w	r0, r0, sl
 8004416:	fa03 f000 	lsl.w	r0, r3, r0
 800441a:	9b04      	ldr	r3, [sp, #16]
 800441c:	3401      	adds	r4, #1
 800441e:	4303      	orrs	r3, r0
 8004420:	9304      	str	r3, [sp, #16]
 8004422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004426:	2206      	movs	r2, #6
 8004428:	4825      	ldr	r0, [pc, #148]	; (80044c0 <_svfiprintf_r+0x1f0>)
 800442a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800442e:	f000 f9e5 	bl	80047fc <memchr>
 8004432:	2800      	cmp	r0, #0
 8004434:	d038      	beq.n	80044a8 <_svfiprintf_r+0x1d8>
 8004436:	4b23      	ldr	r3, [pc, #140]	; (80044c4 <_svfiprintf_r+0x1f4>)
 8004438:	bb1b      	cbnz	r3, 8004482 <_svfiprintf_r+0x1b2>
 800443a:	9b03      	ldr	r3, [sp, #12]
 800443c:	3307      	adds	r3, #7
 800443e:	f023 0307 	bic.w	r3, r3, #7
 8004442:	3308      	adds	r3, #8
 8004444:	9303      	str	r3, [sp, #12]
 8004446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004448:	4433      	add	r3, r6
 800444a:	9309      	str	r3, [sp, #36]	; 0x24
 800444c:	e767      	b.n	800431e <_svfiprintf_r+0x4e>
 800444e:	460c      	mov	r4, r1
 8004450:	2001      	movs	r0, #1
 8004452:	fb0c 3202 	mla	r2, ip, r2, r3
 8004456:	e7a5      	b.n	80043a4 <_svfiprintf_r+0xd4>
 8004458:	2300      	movs	r3, #0
 800445a:	f04f 0c0a 	mov.w	ip, #10
 800445e:	4619      	mov	r1, r3
 8004460:	3401      	adds	r4, #1
 8004462:	9305      	str	r3, [sp, #20]
 8004464:	4620      	mov	r0, r4
 8004466:	f810 2b01 	ldrb.w	r2, [r0], #1
 800446a:	3a30      	subs	r2, #48	; 0x30
 800446c:	2a09      	cmp	r2, #9
 800446e:	d903      	bls.n	8004478 <_svfiprintf_r+0x1a8>
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0c5      	beq.n	8004400 <_svfiprintf_r+0x130>
 8004474:	9105      	str	r1, [sp, #20]
 8004476:	e7c3      	b.n	8004400 <_svfiprintf_r+0x130>
 8004478:	4604      	mov	r4, r0
 800447a:	2301      	movs	r3, #1
 800447c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004480:	e7f0      	b.n	8004464 <_svfiprintf_r+0x194>
 8004482:	ab03      	add	r3, sp, #12
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	462a      	mov	r2, r5
 8004488:	4638      	mov	r0, r7
 800448a:	4b0f      	ldr	r3, [pc, #60]	; (80044c8 <_svfiprintf_r+0x1f8>)
 800448c:	a904      	add	r1, sp, #16
 800448e:	f3af 8000 	nop.w
 8004492:	1c42      	adds	r2, r0, #1
 8004494:	4606      	mov	r6, r0
 8004496:	d1d6      	bne.n	8004446 <_svfiprintf_r+0x176>
 8004498:	89ab      	ldrh	r3, [r5, #12]
 800449a:	065b      	lsls	r3, r3, #25
 800449c:	f53f af2c 	bmi.w	80042f8 <_svfiprintf_r+0x28>
 80044a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044a2:	b01d      	add	sp, #116	; 0x74
 80044a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a8:	ab03      	add	r3, sp, #12
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	462a      	mov	r2, r5
 80044ae:	4638      	mov	r0, r7
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <_svfiprintf_r+0x1f8>)
 80044b2:	a904      	add	r1, sp, #16
 80044b4:	f000 f87c 	bl	80045b0 <_printf_i>
 80044b8:	e7eb      	b.n	8004492 <_svfiprintf_r+0x1c2>
 80044ba:	bf00      	nop
 80044bc:	08004f4c 	.word	0x08004f4c
 80044c0:	08004f56 	.word	0x08004f56
 80044c4:	00000000 	.word	0x00000000
 80044c8:	08004219 	.word	0x08004219
 80044cc:	08004f52 	.word	0x08004f52

080044d0 <_printf_common>:
 80044d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d4:	4616      	mov	r6, r2
 80044d6:	4699      	mov	r9, r3
 80044d8:	688a      	ldr	r2, [r1, #8]
 80044da:	690b      	ldr	r3, [r1, #16]
 80044dc:	4607      	mov	r7, r0
 80044de:	4293      	cmp	r3, r2
 80044e0:	bfb8      	it	lt
 80044e2:	4613      	movlt	r3, r2
 80044e4:	6033      	str	r3, [r6, #0]
 80044e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80044ea:	460c      	mov	r4, r1
 80044ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044f0:	b10a      	cbz	r2, 80044f6 <_printf_common+0x26>
 80044f2:	3301      	adds	r3, #1
 80044f4:	6033      	str	r3, [r6, #0]
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	0699      	lsls	r1, r3, #26
 80044fa:	bf42      	ittt	mi
 80044fc:	6833      	ldrmi	r3, [r6, #0]
 80044fe:	3302      	addmi	r3, #2
 8004500:	6033      	strmi	r3, [r6, #0]
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	f015 0506 	ands.w	r5, r5, #6
 8004508:	d106      	bne.n	8004518 <_printf_common+0x48>
 800450a:	f104 0a19 	add.w	sl, r4, #25
 800450e:	68e3      	ldr	r3, [r4, #12]
 8004510:	6832      	ldr	r2, [r6, #0]
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	42ab      	cmp	r3, r5
 8004516:	dc28      	bgt.n	800456a <_printf_common+0x9a>
 8004518:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800451c:	1e13      	subs	r3, r2, #0
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	bf18      	it	ne
 8004522:	2301      	movne	r3, #1
 8004524:	0692      	lsls	r2, r2, #26
 8004526:	d42d      	bmi.n	8004584 <_printf_common+0xb4>
 8004528:	4649      	mov	r1, r9
 800452a:	4638      	mov	r0, r7
 800452c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004530:	47c0      	blx	r8
 8004532:	3001      	adds	r0, #1
 8004534:	d020      	beq.n	8004578 <_printf_common+0xa8>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	68e5      	ldr	r5, [r4, #12]
 800453a:	f003 0306 	and.w	r3, r3, #6
 800453e:	2b04      	cmp	r3, #4
 8004540:	bf18      	it	ne
 8004542:	2500      	movne	r5, #0
 8004544:	6832      	ldr	r2, [r6, #0]
 8004546:	f04f 0600 	mov.w	r6, #0
 800454a:	68a3      	ldr	r3, [r4, #8]
 800454c:	bf08      	it	eq
 800454e:	1aad      	subeq	r5, r5, r2
 8004550:	6922      	ldr	r2, [r4, #16]
 8004552:	bf08      	it	eq
 8004554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004558:	4293      	cmp	r3, r2
 800455a:	bfc4      	itt	gt
 800455c:	1a9b      	subgt	r3, r3, r2
 800455e:	18ed      	addgt	r5, r5, r3
 8004560:	341a      	adds	r4, #26
 8004562:	42b5      	cmp	r5, r6
 8004564:	d11a      	bne.n	800459c <_printf_common+0xcc>
 8004566:	2000      	movs	r0, #0
 8004568:	e008      	b.n	800457c <_printf_common+0xac>
 800456a:	2301      	movs	r3, #1
 800456c:	4652      	mov	r2, sl
 800456e:	4649      	mov	r1, r9
 8004570:	4638      	mov	r0, r7
 8004572:	47c0      	blx	r8
 8004574:	3001      	adds	r0, #1
 8004576:	d103      	bne.n	8004580 <_printf_common+0xb0>
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004580:	3501      	adds	r5, #1
 8004582:	e7c4      	b.n	800450e <_printf_common+0x3e>
 8004584:	2030      	movs	r0, #48	; 0x30
 8004586:	18e1      	adds	r1, r4, r3
 8004588:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004592:	4422      	add	r2, r4
 8004594:	3302      	adds	r3, #2
 8004596:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800459a:	e7c5      	b.n	8004528 <_printf_common+0x58>
 800459c:	2301      	movs	r3, #1
 800459e:	4622      	mov	r2, r4
 80045a0:	4649      	mov	r1, r9
 80045a2:	4638      	mov	r0, r7
 80045a4:	47c0      	blx	r8
 80045a6:	3001      	adds	r0, #1
 80045a8:	d0e6      	beq.n	8004578 <_printf_common+0xa8>
 80045aa:	3601      	adds	r6, #1
 80045ac:	e7d9      	b.n	8004562 <_printf_common+0x92>
	...

080045b0 <_printf_i>:
 80045b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045b4:	460c      	mov	r4, r1
 80045b6:	7e27      	ldrb	r7, [r4, #24]
 80045b8:	4691      	mov	r9, r2
 80045ba:	2f78      	cmp	r7, #120	; 0x78
 80045bc:	4680      	mov	r8, r0
 80045be:	469a      	mov	sl, r3
 80045c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80045c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c6:	d807      	bhi.n	80045d8 <_printf_i+0x28>
 80045c8:	2f62      	cmp	r7, #98	; 0x62
 80045ca:	d80a      	bhi.n	80045e2 <_printf_i+0x32>
 80045cc:	2f00      	cmp	r7, #0
 80045ce:	f000 80d9 	beq.w	8004784 <_printf_i+0x1d4>
 80045d2:	2f58      	cmp	r7, #88	; 0x58
 80045d4:	f000 80a4 	beq.w	8004720 <_printf_i+0x170>
 80045d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80045e0:	e03a      	b.n	8004658 <_printf_i+0xa8>
 80045e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80045e6:	2b15      	cmp	r3, #21
 80045e8:	d8f6      	bhi.n	80045d8 <_printf_i+0x28>
 80045ea:	a001      	add	r0, pc, #4	; (adr r0, 80045f0 <_printf_i+0x40>)
 80045ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80045f0:	08004649 	.word	0x08004649
 80045f4:	0800465d 	.word	0x0800465d
 80045f8:	080045d9 	.word	0x080045d9
 80045fc:	080045d9 	.word	0x080045d9
 8004600:	080045d9 	.word	0x080045d9
 8004604:	080045d9 	.word	0x080045d9
 8004608:	0800465d 	.word	0x0800465d
 800460c:	080045d9 	.word	0x080045d9
 8004610:	080045d9 	.word	0x080045d9
 8004614:	080045d9 	.word	0x080045d9
 8004618:	080045d9 	.word	0x080045d9
 800461c:	0800476b 	.word	0x0800476b
 8004620:	0800468d 	.word	0x0800468d
 8004624:	0800474d 	.word	0x0800474d
 8004628:	080045d9 	.word	0x080045d9
 800462c:	080045d9 	.word	0x080045d9
 8004630:	0800478d 	.word	0x0800478d
 8004634:	080045d9 	.word	0x080045d9
 8004638:	0800468d 	.word	0x0800468d
 800463c:	080045d9 	.word	0x080045d9
 8004640:	080045d9 	.word	0x080045d9
 8004644:	08004755 	.word	0x08004755
 8004648:	680b      	ldr	r3, [r1, #0]
 800464a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800464e:	1d1a      	adds	r2, r3, #4
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	600a      	str	r2, [r1, #0]
 8004654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004658:	2301      	movs	r3, #1
 800465a:	e0a4      	b.n	80047a6 <_printf_i+0x1f6>
 800465c:	6825      	ldr	r5, [r4, #0]
 800465e:	6808      	ldr	r0, [r1, #0]
 8004660:	062e      	lsls	r6, r5, #24
 8004662:	f100 0304 	add.w	r3, r0, #4
 8004666:	d50a      	bpl.n	800467e <_printf_i+0xce>
 8004668:	6805      	ldr	r5, [r0, #0]
 800466a:	600b      	str	r3, [r1, #0]
 800466c:	2d00      	cmp	r5, #0
 800466e:	da03      	bge.n	8004678 <_printf_i+0xc8>
 8004670:	232d      	movs	r3, #45	; 0x2d
 8004672:	426d      	negs	r5, r5
 8004674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004678:	230a      	movs	r3, #10
 800467a:	485e      	ldr	r0, [pc, #376]	; (80047f4 <_printf_i+0x244>)
 800467c:	e019      	b.n	80046b2 <_printf_i+0x102>
 800467e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004682:	6805      	ldr	r5, [r0, #0]
 8004684:	600b      	str	r3, [r1, #0]
 8004686:	bf18      	it	ne
 8004688:	b22d      	sxthne	r5, r5
 800468a:	e7ef      	b.n	800466c <_printf_i+0xbc>
 800468c:	680b      	ldr	r3, [r1, #0]
 800468e:	6825      	ldr	r5, [r4, #0]
 8004690:	1d18      	adds	r0, r3, #4
 8004692:	6008      	str	r0, [r1, #0]
 8004694:	0628      	lsls	r0, r5, #24
 8004696:	d501      	bpl.n	800469c <_printf_i+0xec>
 8004698:	681d      	ldr	r5, [r3, #0]
 800469a:	e002      	b.n	80046a2 <_printf_i+0xf2>
 800469c:	0669      	lsls	r1, r5, #25
 800469e:	d5fb      	bpl.n	8004698 <_printf_i+0xe8>
 80046a0:	881d      	ldrh	r5, [r3, #0]
 80046a2:	2f6f      	cmp	r7, #111	; 0x6f
 80046a4:	bf0c      	ite	eq
 80046a6:	2308      	moveq	r3, #8
 80046a8:	230a      	movne	r3, #10
 80046aa:	4852      	ldr	r0, [pc, #328]	; (80047f4 <_printf_i+0x244>)
 80046ac:	2100      	movs	r1, #0
 80046ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046b2:	6866      	ldr	r6, [r4, #4]
 80046b4:	2e00      	cmp	r6, #0
 80046b6:	bfa8      	it	ge
 80046b8:	6821      	ldrge	r1, [r4, #0]
 80046ba:	60a6      	str	r6, [r4, #8]
 80046bc:	bfa4      	itt	ge
 80046be:	f021 0104 	bicge.w	r1, r1, #4
 80046c2:	6021      	strge	r1, [r4, #0]
 80046c4:	b90d      	cbnz	r5, 80046ca <_printf_i+0x11a>
 80046c6:	2e00      	cmp	r6, #0
 80046c8:	d04d      	beq.n	8004766 <_printf_i+0x1b6>
 80046ca:	4616      	mov	r6, r2
 80046cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80046d0:	fb03 5711 	mls	r7, r3, r1, r5
 80046d4:	5dc7      	ldrb	r7, [r0, r7]
 80046d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80046da:	462f      	mov	r7, r5
 80046dc:	42bb      	cmp	r3, r7
 80046de:	460d      	mov	r5, r1
 80046e0:	d9f4      	bls.n	80046cc <_printf_i+0x11c>
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d10b      	bne.n	80046fe <_printf_i+0x14e>
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	07df      	lsls	r7, r3, #31
 80046ea:	d508      	bpl.n	80046fe <_printf_i+0x14e>
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	6861      	ldr	r1, [r4, #4]
 80046f0:	4299      	cmp	r1, r3
 80046f2:	bfde      	ittt	le
 80046f4:	2330      	movle	r3, #48	; 0x30
 80046f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046fe:	1b92      	subs	r2, r2, r6
 8004700:	6122      	str	r2, [r4, #16]
 8004702:	464b      	mov	r3, r9
 8004704:	4621      	mov	r1, r4
 8004706:	4640      	mov	r0, r8
 8004708:	f8cd a000 	str.w	sl, [sp]
 800470c:	aa03      	add	r2, sp, #12
 800470e:	f7ff fedf 	bl	80044d0 <_printf_common>
 8004712:	3001      	adds	r0, #1
 8004714:	d14c      	bne.n	80047b0 <_printf_i+0x200>
 8004716:	f04f 30ff 	mov.w	r0, #4294967295
 800471a:	b004      	add	sp, #16
 800471c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004720:	4834      	ldr	r0, [pc, #208]	; (80047f4 <_printf_i+0x244>)
 8004722:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004726:	680e      	ldr	r6, [r1, #0]
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	f856 5b04 	ldr.w	r5, [r6], #4
 800472e:	061f      	lsls	r7, r3, #24
 8004730:	600e      	str	r6, [r1, #0]
 8004732:	d514      	bpl.n	800475e <_printf_i+0x1ae>
 8004734:	07d9      	lsls	r1, r3, #31
 8004736:	bf44      	itt	mi
 8004738:	f043 0320 	orrmi.w	r3, r3, #32
 800473c:	6023      	strmi	r3, [r4, #0]
 800473e:	b91d      	cbnz	r5, 8004748 <_printf_i+0x198>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	f023 0320 	bic.w	r3, r3, #32
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	2310      	movs	r3, #16
 800474a:	e7af      	b.n	80046ac <_printf_i+0xfc>
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	f043 0320 	orr.w	r3, r3, #32
 8004752:	6023      	str	r3, [r4, #0]
 8004754:	2378      	movs	r3, #120	; 0x78
 8004756:	4828      	ldr	r0, [pc, #160]	; (80047f8 <_printf_i+0x248>)
 8004758:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800475c:	e7e3      	b.n	8004726 <_printf_i+0x176>
 800475e:	065e      	lsls	r6, r3, #25
 8004760:	bf48      	it	mi
 8004762:	b2ad      	uxthmi	r5, r5
 8004764:	e7e6      	b.n	8004734 <_printf_i+0x184>
 8004766:	4616      	mov	r6, r2
 8004768:	e7bb      	b.n	80046e2 <_printf_i+0x132>
 800476a:	680b      	ldr	r3, [r1, #0]
 800476c:	6826      	ldr	r6, [r4, #0]
 800476e:	1d1d      	adds	r5, r3, #4
 8004770:	6960      	ldr	r0, [r4, #20]
 8004772:	600d      	str	r5, [r1, #0]
 8004774:	0635      	lsls	r5, r6, #24
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	d501      	bpl.n	800477e <_printf_i+0x1ce>
 800477a:	6018      	str	r0, [r3, #0]
 800477c:	e002      	b.n	8004784 <_printf_i+0x1d4>
 800477e:	0671      	lsls	r1, r6, #25
 8004780:	d5fb      	bpl.n	800477a <_printf_i+0x1ca>
 8004782:	8018      	strh	r0, [r3, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	4616      	mov	r6, r2
 8004788:	6123      	str	r3, [r4, #16]
 800478a:	e7ba      	b.n	8004702 <_printf_i+0x152>
 800478c:	680b      	ldr	r3, [r1, #0]
 800478e:	1d1a      	adds	r2, r3, #4
 8004790:	600a      	str	r2, [r1, #0]
 8004792:	681e      	ldr	r6, [r3, #0]
 8004794:	2100      	movs	r1, #0
 8004796:	4630      	mov	r0, r6
 8004798:	6862      	ldr	r2, [r4, #4]
 800479a:	f000 f82f 	bl	80047fc <memchr>
 800479e:	b108      	cbz	r0, 80047a4 <_printf_i+0x1f4>
 80047a0:	1b80      	subs	r0, r0, r6
 80047a2:	6060      	str	r0, [r4, #4]
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	6123      	str	r3, [r4, #16]
 80047a8:	2300      	movs	r3, #0
 80047aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047ae:	e7a8      	b.n	8004702 <_printf_i+0x152>
 80047b0:	4632      	mov	r2, r6
 80047b2:	4649      	mov	r1, r9
 80047b4:	4640      	mov	r0, r8
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	47d0      	blx	sl
 80047ba:	3001      	adds	r0, #1
 80047bc:	d0ab      	beq.n	8004716 <_printf_i+0x166>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	079b      	lsls	r3, r3, #30
 80047c2:	d413      	bmi.n	80047ec <_printf_i+0x23c>
 80047c4:	68e0      	ldr	r0, [r4, #12]
 80047c6:	9b03      	ldr	r3, [sp, #12]
 80047c8:	4298      	cmp	r0, r3
 80047ca:	bfb8      	it	lt
 80047cc:	4618      	movlt	r0, r3
 80047ce:	e7a4      	b.n	800471a <_printf_i+0x16a>
 80047d0:	2301      	movs	r3, #1
 80047d2:	4632      	mov	r2, r6
 80047d4:	4649      	mov	r1, r9
 80047d6:	4640      	mov	r0, r8
 80047d8:	47d0      	blx	sl
 80047da:	3001      	adds	r0, #1
 80047dc:	d09b      	beq.n	8004716 <_printf_i+0x166>
 80047de:	3501      	adds	r5, #1
 80047e0:	68e3      	ldr	r3, [r4, #12]
 80047e2:	9903      	ldr	r1, [sp, #12]
 80047e4:	1a5b      	subs	r3, r3, r1
 80047e6:	42ab      	cmp	r3, r5
 80047e8:	dcf2      	bgt.n	80047d0 <_printf_i+0x220>
 80047ea:	e7eb      	b.n	80047c4 <_printf_i+0x214>
 80047ec:	2500      	movs	r5, #0
 80047ee:	f104 0619 	add.w	r6, r4, #25
 80047f2:	e7f5      	b.n	80047e0 <_printf_i+0x230>
 80047f4:	08004f5d 	.word	0x08004f5d
 80047f8:	08004f6e 	.word	0x08004f6e

080047fc <memchr>:
 80047fc:	4603      	mov	r3, r0
 80047fe:	b510      	push	{r4, lr}
 8004800:	b2c9      	uxtb	r1, r1
 8004802:	4402      	add	r2, r0
 8004804:	4293      	cmp	r3, r2
 8004806:	4618      	mov	r0, r3
 8004808:	d101      	bne.n	800480e <memchr+0x12>
 800480a:	2000      	movs	r0, #0
 800480c:	e003      	b.n	8004816 <memchr+0x1a>
 800480e:	7804      	ldrb	r4, [r0, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	428c      	cmp	r4, r1
 8004814:	d1f6      	bne.n	8004804 <memchr+0x8>
 8004816:	bd10      	pop	{r4, pc}

08004818 <memmove>:
 8004818:	4288      	cmp	r0, r1
 800481a:	b510      	push	{r4, lr}
 800481c:	eb01 0402 	add.w	r4, r1, r2
 8004820:	d902      	bls.n	8004828 <memmove+0x10>
 8004822:	4284      	cmp	r4, r0
 8004824:	4623      	mov	r3, r4
 8004826:	d807      	bhi.n	8004838 <memmove+0x20>
 8004828:	1e43      	subs	r3, r0, #1
 800482a:	42a1      	cmp	r1, r4
 800482c:	d008      	beq.n	8004840 <memmove+0x28>
 800482e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004832:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004836:	e7f8      	b.n	800482a <memmove+0x12>
 8004838:	4601      	mov	r1, r0
 800483a:	4402      	add	r2, r0
 800483c:	428a      	cmp	r2, r1
 800483e:	d100      	bne.n	8004842 <memmove+0x2a>
 8004840:	bd10      	pop	{r4, pc}
 8004842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800484a:	e7f7      	b.n	800483c <memmove+0x24>

0800484c <_free_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4605      	mov	r5, r0
 8004850:	2900      	cmp	r1, #0
 8004852:	d043      	beq.n	80048dc <_free_r+0x90>
 8004854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004858:	1f0c      	subs	r4, r1, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfb8      	it	lt
 800485e:	18e4      	addlt	r4, r4, r3
 8004860:	f000 f8d0 	bl	8004a04 <__malloc_lock>
 8004864:	4a1e      	ldr	r2, [pc, #120]	; (80048e0 <_free_r+0x94>)
 8004866:	6813      	ldr	r3, [r2, #0]
 8004868:	4610      	mov	r0, r2
 800486a:	b933      	cbnz	r3, 800487a <_free_r+0x2e>
 800486c:	6063      	str	r3, [r4, #4]
 800486e:	6014      	str	r4, [r2, #0]
 8004870:	4628      	mov	r0, r5
 8004872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004876:	f000 b8cb 	b.w	8004a10 <__malloc_unlock>
 800487a:	42a3      	cmp	r3, r4
 800487c:	d90a      	bls.n	8004894 <_free_r+0x48>
 800487e:	6821      	ldr	r1, [r4, #0]
 8004880:	1862      	adds	r2, r4, r1
 8004882:	4293      	cmp	r3, r2
 8004884:	bf01      	itttt	eq
 8004886:	681a      	ldreq	r2, [r3, #0]
 8004888:	685b      	ldreq	r3, [r3, #4]
 800488a:	1852      	addeq	r2, r2, r1
 800488c:	6022      	streq	r2, [r4, #0]
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	6004      	str	r4, [r0, #0]
 8004892:	e7ed      	b.n	8004870 <_free_r+0x24>
 8004894:	461a      	mov	r2, r3
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	b10b      	cbz	r3, 800489e <_free_r+0x52>
 800489a:	42a3      	cmp	r3, r4
 800489c:	d9fa      	bls.n	8004894 <_free_r+0x48>
 800489e:	6811      	ldr	r1, [r2, #0]
 80048a0:	1850      	adds	r0, r2, r1
 80048a2:	42a0      	cmp	r0, r4
 80048a4:	d10b      	bne.n	80048be <_free_r+0x72>
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	4401      	add	r1, r0
 80048aa:	1850      	adds	r0, r2, r1
 80048ac:	4283      	cmp	r3, r0
 80048ae:	6011      	str	r1, [r2, #0]
 80048b0:	d1de      	bne.n	8004870 <_free_r+0x24>
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4401      	add	r1, r0
 80048b8:	6011      	str	r1, [r2, #0]
 80048ba:	6053      	str	r3, [r2, #4]
 80048bc:	e7d8      	b.n	8004870 <_free_r+0x24>
 80048be:	d902      	bls.n	80048c6 <_free_r+0x7a>
 80048c0:	230c      	movs	r3, #12
 80048c2:	602b      	str	r3, [r5, #0]
 80048c4:	e7d4      	b.n	8004870 <_free_r+0x24>
 80048c6:	6820      	ldr	r0, [r4, #0]
 80048c8:	1821      	adds	r1, r4, r0
 80048ca:	428b      	cmp	r3, r1
 80048cc:	bf01      	itttt	eq
 80048ce:	6819      	ldreq	r1, [r3, #0]
 80048d0:	685b      	ldreq	r3, [r3, #4]
 80048d2:	1809      	addeq	r1, r1, r0
 80048d4:	6021      	streq	r1, [r4, #0]
 80048d6:	6063      	str	r3, [r4, #4]
 80048d8:	6054      	str	r4, [r2, #4]
 80048da:	e7c9      	b.n	8004870 <_free_r+0x24>
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	200000a8 	.word	0x200000a8

080048e4 <_malloc_r>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	1ccd      	adds	r5, r1, #3
 80048e8:	f025 0503 	bic.w	r5, r5, #3
 80048ec:	3508      	adds	r5, #8
 80048ee:	2d0c      	cmp	r5, #12
 80048f0:	bf38      	it	cc
 80048f2:	250c      	movcc	r5, #12
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	4606      	mov	r6, r0
 80048f8:	db01      	blt.n	80048fe <_malloc_r+0x1a>
 80048fa:	42a9      	cmp	r1, r5
 80048fc:	d903      	bls.n	8004906 <_malloc_r+0x22>
 80048fe:	230c      	movs	r3, #12
 8004900:	6033      	str	r3, [r6, #0]
 8004902:	2000      	movs	r0, #0
 8004904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004906:	f000 f87d 	bl	8004a04 <__malloc_lock>
 800490a:	4921      	ldr	r1, [pc, #132]	; (8004990 <_malloc_r+0xac>)
 800490c:	680a      	ldr	r2, [r1, #0]
 800490e:	4614      	mov	r4, r2
 8004910:	b99c      	cbnz	r4, 800493a <_malloc_r+0x56>
 8004912:	4f20      	ldr	r7, [pc, #128]	; (8004994 <_malloc_r+0xb0>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	b923      	cbnz	r3, 8004922 <_malloc_r+0x3e>
 8004918:	4621      	mov	r1, r4
 800491a:	4630      	mov	r0, r6
 800491c:	f000 f862 	bl	80049e4 <_sbrk_r>
 8004920:	6038      	str	r0, [r7, #0]
 8004922:	4629      	mov	r1, r5
 8004924:	4630      	mov	r0, r6
 8004926:	f000 f85d 	bl	80049e4 <_sbrk_r>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d123      	bne.n	8004976 <_malloc_r+0x92>
 800492e:	230c      	movs	r3, #12
 8004930:	4630      	mov	r0, r6
 8004932:	6033      	str	r3, [r6, #0]
 8004934:	f000 f86c 	bl	8004a10 <__malloc_unlock>
 8004938:	e7e3      	b.n	8004902 <_malloc_r+0x1e>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	1b5b      	subs	r3, r3, r5
 800493e:	d417      	bmi.n	8004970 <_malloc_r+0x8c>
 8004940:	2b0b      	cmp	r3, #11
 8004942:	d903      	bls.n	800494c <_malloc_r+0x68>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	441c      	add	r4, r3
 8004948:	6025      	str	r5, [r4, #0]
 800494a:	e004      	b.n	8004956 <_malloc_r+0x72>
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	42a2      	cmp	r2, r4
 8004950:	bf0c      	ite	eq
 8004952:	600b      	streq	r3, [r1, #0]
 8004954:	6053      	strne	r3, [r2, #4]
 8004956:	4630      	mov	r0, r6
 8004958:	f000 f85a 	bl	8004a10 <__malloc_unlock>
 800495c:	f104 000b 	add.w	r0, r4, #11
 8004960:	1d23      	adds	r3, r4, #4
 8004962:	f020 0007 	bic.w	r0, r0, #7
 8004966:	1ac2      	subs	r2, r0, r3
 8004968:	d0cc      	beq.n	8004904 <_malloc_r+0x20>
 800496a:	1a1b      	subs	r3, r3, r0
 800496c:	50a3      	str	r3, [r4, r2]
 800496e:	e7c9      	b.n	8004904 <_malloc_r+0x20>
 8004970:	4622      	mov	r2, r4
 8004972:	6864      	ldr	r4, [r4, #4]
 8004974:	e7cc      	b.n	8004910 <_malloc_r+0x2c>
 8004976:	1cc4      	adds	r4, r0, #3
 8004978:	f024 0403 	bic.w	r4, r4, #3
 800497c:	42a0      	cmp	r0, r4
 800497e:	d0e3      	beq.n	8004948 <_malloc_r+0x64>
 8004980:	1a21      	subs	r1, r4, r0
 8004982:	4630      	mov	r0, r6
 8004984:	f000 f82e 	bl	80049e4 <_sbrk_r>
 8004988:	3001      	adds	r0, #1
 800498a:	d1dd      	bne.n	8004948 <_malloc_r+0x64>
 800498c:	e7cf      	b.n	800492e <_malloc_r+0x4a>
 800498e:	bf00      	nop
 8004990:	200000a8 	.word	0x200000a8
 8004994:	200000ac 	.word	0x200000ac

08004998 <_realloc_r>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	4607      	mov	r7, r0
 800499c:	4614      	mov	r4, r2
 800499e:	460e      	mov	r6, r1
 80049a0:	b921      	cbnz	r1, 80049ac <_realloc_r+0x14>
 80049a2:	4611      	mov	r1, r2
 80049a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80049a8:	f7ff bf9c 	b.w	80048e4 <_malloc_r>
 80049ac:	b922      	cbnz	r2, 80049b8 <_realloc_r+0x20>
 80049ae:	f7ff ff4d 	bl	800484c <_free_r>
 80049b2:	4625      	mov	r5, r4
 80049b4:	4628      	mov	r0, r5
 80049b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b8:	f000 f830 	bl	8004a1c <_malloc_usable_size_r>
 80049bc:	42a0      	cmp	r0, r4
 80049be:	d20f      	bcs.n	80049e0 <_realloc_r+0x48>
 80049c0:	4621      	mov	r1, r4
 80049c2:	4638      	mov	r0, r7
 80049c4:	f7ff ff8e 	bl	80048e4 <_malloc_r>
 80049c8:	4605      	mov	r5, r0
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d0f2      	beq.n	80049b4 <_realloc_r+0x1c>
 80049ce:	4631      	mov	r1, r6
 80049d0:	4622      	mov	r2, r4
 80049d2:	f7ff fbeb 	bl	80041ac <memcpy>
 80049d6:	4631      	mov	r1, r6
 80049d8:	4638      	mov	r0, r7
 80049da:	f7ff ff37 	bl	800484c <_free_r>
 80049de:	e7e9      	b.n	80049b4 <_realloc_r+0x1c>
 80049e0:	4635      	mov	r5, r6
 80049e2:	e7e7      	b.n	80049b4 <_realloc_r+0x1c>

080049e4 <_sbrk_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	2300      	movs	r3, #0
 80049e8:	4d05      	ldr	r5, [pc, #20]	; (8004a00 <_sbrk_r+0x1c>)
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	602b      	str	r3, [r5, #0]
 80049f0:	f7fc fd58 	bl	80014a4 <_sbrk>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_sbrk_r+0x1a>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_sbrk_r+0x1a>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	20001eb0 	.word	0x20001eb0

08004a04 <__malloc_lock>:
 8004a04:	4801      	ldr	r0, [pc, #4]	; (8004a0c <__malloc_lock+0x8>)
 8004a06:	f000 b811 	b.w	8004a2c <__retarget_lock_acquire_recursive>
 8004a0a:	bf00      	nop
 8004a0c:	20001eb8 	.word	0x20001eb8

08004a10 <__malloc_unlock>:
 8004a10:	4801      	ldr	r0, [pc, #4]	; (8004a18 <__malloc_unlock+0x8>)
 8004a12:	f000 b80c 	b.w	8004a2e <__retarget_lock_release_recursive>
 8004a16:	bf00      	nop
 8004a18:	20001eb8 	.word	0x20001eb8

08004a1c <_malloc_usable_size_r>:
 8004a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a20:	1f18      	subs	r0, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bfbc      	itt	lt
 8004a26:	580b      	ldrlt	r3, [r1, r0]
 8004a28:	18c0      	addlt	r0, r0, r3
 8004a2a:	4770      	bx	lr

08004a2c <__retarget_lock_acquire_recursive>:
 8004a2c:	4770      	bx	lr

08004a2e <__retarget_lock_release_recursive>:
 8004a2e:	4770      	bx	lr

08004a30 <_init>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr

08004a3c <_fini>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr
