
F1_CompactController_AuxMCU_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004148  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004704  08004704  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004704  08004704  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004704  08004704  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800470c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002740  20000074  08004780  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027b4  08004780  000227b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105c9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a58  00000000  00000000  00030666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000330c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00033da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afaf  00000000  00000000  00034990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001106a  00000000  00000000  0004f93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095e8f  00000000  00000000  000609a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6838  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000374c  00000000  00000000  000f688c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000074 	.word	0x20000074
 8000200:	00000000 	.word	0x00000000
 8000204:	08004314 	.word	0x08004314

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000078 	.word	0x20000078
 8000220:	08004314 	.word	0x08004314

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <crc_ccitt_byte>:

/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
static inline unsigned short crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	80fb      	strh	r3, [r7, #6]
 8000240:	4613      	mov	r3, r2
 8000242:	717b      	strb	r3, [r7, #5]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	0a1b      	lsrs	r3, r3, #8
 8000248:	b29a      	uxth	r2, r3
 800024a:	88f9      	ldrh	r1, [r7, #6]
 800024c:	797b      	ldrb	r3, [r7, #5]
 800024e:	404b      	eors	r3, r1
 8000250:	b2db      	uxtb	r3, r3
 8000252:	4905      	ldr	r1, [pc, #20]	; (8000268 <crc_ccitt_byte+0x34>)
 8000254:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000258:	4053      	eors	r3, r2
 800025a:	b29b      	uxth	r3, r3
}
 800025c:	4618      	mov	r0, r3
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	0800443c 	.word	0x0800443c

0800026c <crc16>:
unsigned short crc16(unsigned char *data_p, unsigned short length)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	807b      	strh	r3, [r7, #2]
	unsigned int crc = 0x0000;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
	while (length--)
 800027c:	e00a      	b.n	8000294 <crc16+0x28>
		crc = crc_ccitt_byte(crc, *data_p++);
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	b298      	uxth	r0, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	607a      	str	r2, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	4619      	mov	r1, r3
 800028c:	f7ff ffd2 	bl	8000234 <crc_ccitt_byte>
 8000290:	4603      	mov	r3, r0
 8000292:	60fb      	str	r3, [r7, #12]
	while (length--)
 8000294:	887b      	ldrh	r3, [r7, #2]
 8000296:	1e5a      	subs	r2, r3, #1
 8000298:	807a      	strh	r2, [r7, #2]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1ef      	bne.n	800027e <crc16+0x12>
	return (crc>>8) | (crc<<8);;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	0a1b      	lsrs	r3, r3, #8
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	021b      	lsls	r3, r3, #8
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4313      	orrs	r3, r2
 80002ae:	b29b      	uxth	r3, r3
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_DMA_Init+0x58>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a13      	ldr	r2, [pc, #76]	; (8000310 <MX_DMA_Init+0x58>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6153      	str	r3, [r2, #20]
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_DMA_Init+0x58>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f003 0301 	and.w	r3, r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2100      	movs	r1, #0
 80002da:	200c      	movs	r0, #12
 80002dc:	f001 f95b 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80002e0:	200c      	movs	r0, #12
 80002e2:	f001 f974 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2100      	movs	r1, #0
 80002ea:	200d      	movs	r0, #13
 80002ec:	f001 f953 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002f0:	200d      	movs	r0, #13
 80002f2:	f001 f96c 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	200e      	movs	r0, #14
 80002fc:	f001 f94b 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000300:	200e      	movs	r0, #14
 8000302:	f001 f964 	bl	80015ce <HAL_NVIC_EnableIRQ>

}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b088      	sub	sp, #32
 8000318:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000328:	4b43      	ldr	r3, [pc, #268]	; (8000438 <MX_GPIO_Init+0x124>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a42      	ldr	r2, [pc, #264]	; (8000438 <MX_GPIO_Init+0x124>)
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b40      	ldr	r3, [pc, #256]	; (8000438 <MX_GPIO_Init+0x124>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0310 	and.w	r3, r3, #16
 800033c:	60fb      	str	r3, [r7, #12]
 800033e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000340:	4b3d      	ldr	r3, [pc, #244]	; (8000438 <MX_GPIO_Init+0x124>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a3c      	ldr	r2, [pc, #240]	; (8000438 <MX_GPIO_Init+0x124>)
 8000346:	f043 0320 	orr.w	r3, r3, #32
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b3a      	ldr	r3, [pc, #232]	; (8000438 <MX_GPIO_Init+0x124>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	60bb      	str	r3, [r7, #8]
 8000356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b37      	ldr	r3, [pc, #220]	; (8000438 <MX_GPIO_Init+0x124>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a36      	ldr	r2, [pc, #216]	; (8000438 <MX_GPIO_Init+0x124>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b34      	ldr	r3, [pc, #208]	; (8000438 <MX_GPIO_Init+0x124>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	4b31      	ldr	r3, [pc, #196]	; (8000438 <MX_GPIO_Init+0x124>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a30      	ldr	r2, [pc, #192]	; (8000438 <MX_GPIO_Init+0x124>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b2e      	ldr	r3, [pc, #184]	; (8000438 <MX_GPIO_Init+0x124>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f640 110c 	movw	r1, #2316	; 0x90c
 800038e:	482b      	ldr	r0, [pc, #172]	; (800043c <MX_GPIO_Init+0x128>)
 8000390:	f001 ff4e 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT_LED1_Pin|INT_LED2_Pin, GPIO_PIN_SET);
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800039a:	4829      	ldr	r0, [pc, #164]	; (8000440 <MX_GPIO_Init+0x12c>)
 800039c:	f001 ff48 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a6:	4827      	ldr	r0, [pc, #156]	; (8000444 <MX_GPIO_Init+0x130>)
 80003a8:	f001 ff42 	bl	8002230 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin;
 80003ac:	f640 130c 	movw	r3, #2316	; 0x90c
 80003b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	4619      	mov	r1, r3
 80003c4:	481d      	ldr	r0, [pc, #116]	; (800043c <MX_GPIO_Init+0x128>)
 80003c6:	f001 fd9f 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_MODE_SEL_Pin;
 80003ca:	2320      	movs	r3, #32
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003ce:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <MX_GPIO_Init+0x134>)
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STM_MODE_SEL_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	4818      	ldr	r0, [pc, #96]	; (8000440 <MX_GPIO_Init+0x12c>)
 80003de:	f001 fd93 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INT_LED1_Pin|INT_LED2_Pin;
 80003e2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80003e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e8:	2301      	movs	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f0:	2302      	movs	r3, #2
 80003f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003f4:	f107 0310 	add.w	r3, r7, #16
 80003f8:	4619      	mov	r1, r3
 80003fa:	4811      	ldr	r0, [pc, #68]	; (8000440 <MX_GPIO_Init+0x12c>)
 80003fc:	f001 fd84 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 8000400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000404:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	480a      	ldr	r0, [pc, #40]	; (8000444 <MX_GPIO_Init+0x130>)
 800041a:	f001 fd75 	bl	8001f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2100      	movs	r1, #0
 8000422:	2017      	movs	r0, #23
 8000424:	f001 f8b7 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000428:	2017      	movs	r0, #23
 800042a:	f001 f8d0 	bl	80015ce <HAL_NVIC_EnableIRQ>

}
 800042e:	bf00      	nop
 8000430:	3720      	adds	r7, #32
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800
 8000440:	40011000 	.word	0x40011000
 8000444:	40010c00 	.word	0x40010c00
 8000448:	10310000 	.word	0x10310000

0800044c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <MX_I2C1_Init+0x50>)
 8000452:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <MX_I2C1_Init+0x54>)
 8000454:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <MX_I2C1_Init+0x50>)
 8000458:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <MX_I2C1_Init+0x58>)
 800045a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <MX_I2C1_Init+0x50>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000462:	4b0e      	ldr	r3, [pc, #56]	; (800049c <MX_I2C1_Init+0x50>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000468:	4b0c      	ldr	r3, [pc, #48]	; (800049c <MX_I2C1_Init+0x50>)
 800046a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800046e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000470:	4b0a      	ldr	r3, [pc, #40]	; (800049c <MX_I2C1_Init+0x50>)
 8000472:	2200      	movs	r2, #0
 8000474:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000476:	4b09      	ldr	r3, [pc, #36]	; (800049c <MX_I2C1_Init+0x50>)
 8000478:	2200      	movs	r2, #0
 800047a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047c:	4b07      	ldr	r3, [pc, #28]	; (800049c <MX_I2C1_Init+0x50>)
 800047e:	2200      	movs	r2, #0
 8000480:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <MX_I2C1_Init+0x50>)
 8000484:	2200      	movs	r2, #0
 8000486:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_I2C1_Init+0x50>)
 800048a:	f001 ff01 	bl	8002290 <HAL_I2C_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000494:	f000 f8fa 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000498:	bf00      	nop
 800049a:	bd80      	pop	{r7, pc}
 800049c:	200000b4 	.word	0x200000b4
 80004a0:	40005400 	.word	0x40005400
 80004a4:	00061a80 	.word	0x00061a80

080004a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a15      	ldr	r2, [pc, #84]	; (8000518 <HAL_I2C_MspInit+0x70>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d123      	bne.n	8000510 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <HAL_I2C_MspInit+0x74>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a13      	ldr	r2, [pc, #76]	; (800051c <HAL_I2C_MspInit+0x74>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <HAL_I2C_MspInit+0x74>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80004e0:	23c0      	movs	r3, #192	; 0xc0
 80004e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004e4:	2312      	movs	r3, #18
 80004e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e8:	2303      	movs	r3, #3
 80004ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <HAL_I2C_MspInit+0x78>)
 80004f4:	f001 fd08 	bl	8001f08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_I2C_MspInit+0x74>)
 80004fa:	69db      	ldr	r3, [r3, #28]
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <HAL_I2C_MspInit+0x74>)
 80004fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000502:	61d3      	str	r3, [r2, #28]
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <HAL_I2C_MspInit+0x74>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000510:	bf00      	nop
 8000512:	3720      	adds	r7, #32
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40005400 	.word	0x40005400
 800051c:	40021000 	.word	0x40021000
 8000520:	40010c00 	.word	0x40010c00

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fefc 	bl	8001324 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f81e 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f7ff fef0 	bl	8000314 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000534:	f7ff ff8a 	bl	800044c <MX_I2C1_Init>
  MX_DMA_Init();
 8000538:	f7ff febe 	bl	80002b8 <MX_DMA_Init>
  MX_SPI1_Init();
 800053c:	f000 fc4a 	bl	8000dd4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000540:	f000 fdec 	bl	800111c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  comms_set_mode();
 8000544:	f000 f858 	bl	80005f8 <comms_set_mode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dbprintf("Rota Compact Controller Auxiliary MCU Bootloader");
 8000548:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x40>)
 800054a:	f000 feb3 	bl	80012b4 <dbprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(g_comms_mode == COMMS_MODE_PDIO){
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <main+0x44>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d102      	bne.n	800055c <main+0x38>
	  		rt_get_io_values();
 8000556:	f000 fbf5 	bl	8000d44 <rt_get_io_values>
 800055a:	e7f8      	b.n	800054e <main+0x2a>
		}else{
			rt_bus_proto_bl_dt();
 800055c:	f000 fb2e 	bl	8000bbc <rt_bus_proto_bl_dt>
	  if(g_comms_mode == COMMS_MODE_PDIO){
 8000560:	e7f5      	b.n	800054e <main+0x2a>
 8000562:	bf00      	nop
 8000564:	0800432c 	.word	0x0800432c
 8000568:	20000092 	.word	0x20000092

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b090      	sub	sp, #64	; 0x40
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0318 	add.w	r3, r7, #24
 8000576:	2228      	movs	r2, #40	; 0x28
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fa96 	bl	8003aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058e:	2301      	movs	r3, #1
 8000590:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000596:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0318 	add.w	r3, r7, #24
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 ffaf 	bl	8002518 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005c0:	f000 f864 	bl	800068c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fa1a 	bl	8002a18 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ea:	f000 f84f 	bl	800068c <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3740      	adds	r7, #64	; 0x40
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <comms_set_mode>:

/* USER CODE BEGIN 4 */

void comms_set_mode()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	if (STM_MODE_SEL_GPIO_Port->IDR & STM_MODE_SEL_Pin){
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <comms_set_mode+0x48>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f003 0320 	and.w	r3, r3, #32
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00c      	beq.n	8000622 <comms_set_mode+0x2a>
		g_comms_mode = COMMS_MODE_CONF;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <comms_set_mode+0x4c>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
		dbprintf("Conf Mode");
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <comms_set_mode+0x50>)
 8000610:	f000 fe50 	bl	80012b4 <dbprintf>
		ERR_LED1_On();
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800061a:	4809      	ldr	r0, [pc, #36]	; (8000640 <comms_set_mode+0x48>)
 800061c:	f001 fe08 	bl	8002230 <HAL_GPIO_WritePin>
	}else{
		g_comms_mode = COMMS_MODE_PDIO;
		dbprintf("PDIO Mode");
		ERR_LED1_Off();
	}
}
 8000620:	e00b      	b.n	800063a <comms_set_mode+0x42>
		g_comms_mode = COMMS_MODE_PDIO;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <comms_set_mode+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
		dbprintf("PDIO Mode");
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <comms_set_mode+0x54>)
 800062a:	f000 fe43 	bl	80012b4 <dbprintf>
		ERR_LED1_Off();
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000634:	4802      	ldr	r0, [pc, #8]	; (8000640 <comms_set_mode+0x48>)
 8000636:	f001 fdfb 	bl	8002230 <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40011000 	.word	0x40011000
 8000644:	20000092 	.word	0x20000092
 8000648:	08004360 	.word	0x08004360
 800064c:	0800436c 	.word	0x0800436c

08000650 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	80fb      	strh	r3, [r7, #6]
	comms_set_mode();
 800065a:	f7ff ffcd 	bl	80005f8 <comms_set_mode>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	dbprintf("%s",__func__);
 8000670:	4904      	ldr	r1, [pc, #16]	; (8000684 <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_SPI_TxRxCpltCallback+0x20>)
 8000674:	f000 fe1e 	bl	80012b4 <dbprintf>
	SPI_DMA_Reset();
 8000678:	f000 f9b6 	bl	80009e8 <SPI_DMA_Reset>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0800463c 	.word	0x0800463c
 8000688:	08004378 	.word	0x08004378

0800068c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
}
 8000692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000694:	e7fe      	b.n	8000694 <Error_Handler+0x8>
	...

08000698 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <__NVIC_SystemReset+0x24>)
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006aa:	4904      	ldr	r1, [pc, #16]	; (80006bc <__NVIC_SystemReset+0x24>)
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <__NVIC_SystemReset+0x28>)
 80006ae:	4313      	orrs	r3, r2
 80006b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006b2:	f3bf 8f4f 	dsb	sy
}
 80006b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <__NVIC_SystemReset+0x20>
 80006bc:	e000ed00 	.word	0xe000ed00
 80006c0:	05fa0004 	.word	0x05fa0004

080006c4 <rt_bus_proto_frame_pack>:
uint32_t test[2]= {0, 0};
/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
void rt_bus_proto_frame_pack(uint8_t cmd, uint16_t *datalength)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
	uint16_t cCRC = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	81fb      	strh	r3, [r7, #14]


	txBuffer[0] = PRT_STX;
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]

	txBuffer[1] = (/*uBusId*/0 & 0xFF00)>>8;
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = (/*uBusId*/0 & 0x00FF);
 80006e0:	4b22      	ldr	r3, [pc, #136]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	709a      	strb	r2, [r3, #2]

	txBuffer[3] = (((*datalength)+1) & 0xFF00)>>8;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	3301      	adds	r3, #1
 80006ec:	121b      	asrs	r3, r3, #8
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 80006f2:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = (((*datalength)+1) & 0xFF);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b1b      	ldr	r3, [pc, #108]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 8000700:	711a      	strb	r2, [r3, #4]

	txBuffer[5] = cmd;
 8000702:	4a1a      	ldr	r2, [pc, #104]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	7153      	strb	r3, [r2, #5]

	cCRC =  crc16(&txBuffer[PRT_AD_MSB_IDX], *datalength+5);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	3305      	adds	r3, #5
 800070e:	b29b      	uxth	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	4817      	ldr	r0, [pc, #92]	; (8000770 <rt_bus_proto_frame_pack+0xac>)
 8000714:	f7ff fdaa 	bl	800026c <crc16>
 8000718:	4603      	mov	r3, r0
 800071a:	81fb      	strh	r3, [r7, #14]

	txBuffer[*datalength + 6] = (cCRC & 0xFF00)>>8;
 800071c:	89fb      	ldrh	r3, [r7, #14]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29a      	uxth	r2, r3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	3306      	adds	r3, #6
 8000728:	b2d1      	uxtb	r1, r2
 800072a:	4a10      	ldr	r2, [pc, #64]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 800072c:	54d1      	strb	r1, [r2, r3]
	txBuffer[*datalength + 7] = (cCRC & 0x00FF);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	3307      	adds	r3, #7
 8000734:	89fa      	ldrh	r2, [r7, #14]
 8000736:	b2d1      	uxtb	r1, r2
 8000738:	4a0c      	ldr	r2, [pc, #48]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 800073a:	54d1      	strb	r1, [r2, r3]
	txBuffer[*datalength + 8] = PRT_ETX;
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	3308      	adds	r3, #8
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 8000744:	2103      	movs	r1, #3
 8000746:	54d1      	strb	r1, [r2, r3]

	*datalength += 9;
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	3309      	adds	r3, #9
 800074e:	b29a      	uxth	r2, r3
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	801a      	strh	r2, [r3, #0]

	memcpy(&gSPI_Tx_Buf[0],&txBuffer[0],*datalength);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	4904      	ldr	r1, [pc, #16]	; (800076c <rt_bus_proto_frame_pack+0xa8>)
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <rt_bus_proto_frame_pack+0xb0>)
 800075e:	f003 f997 	bl	8003a90 <memcpy>

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20001538 	.word	0x20001538
 8000770:	20001539 	.word	0x20001539
 8000774:	20000128 	.word	0x20000128

08000778 <rt_bus_cmd_ping_handler>:

uint32_t rt_bus_cmd_ping_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	460b      	mov	r3, r1
 8000786:	817b      	strh	r3, [r7, #10]
	if (rxLen != 1)
 8000788:	897b      	ldrh	r3, [r7, #10]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d001      	beq.n	8000792 <rt_bus_cmd_ping_handler+0x1a>
	{
		return RT_PROTO_FrameError;
 800078e:	2301      	movs	r3, #1
 8000790:	e009      	b.n	80007a6 <rt_bus_cmd_ping_handler+0x2e>
	}

	txData[0] = rxData[0] + 1;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	b2da      	uxtb	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	701a      	strb	r2, [r3, #0]
	*txLen = 1;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2201      	movs	r2, #1
 80007a2:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <rt_bus_cmd_reset>:

uint32_t rt_bus_cmd_reset (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	460b      	mov	r3, r1
 80007be:	817b      	strh	r3, [r7, #10]
	/*iapMailbox[0] = 0;
	iapMailbox[1] = 0;*/
	NVIC_SystemReset();
 80007c0:	f7ff ff6a 	bl	8000698 <__NVIC_SystemReset>

080007c4 <rt_bus_cmd_get_runmode_handler>:
	return RT_PROTO_OK;
}


uint32_t rt_bus_cmd_get_runmode_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b087      	sub	sp, #28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	460b      	mov	r3, r1
 80007d2:	817b      	strh	r3, [r7, #10]
	uint32_t length = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
	txData[0] = gRunMode;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <rt_bus_cmd_get_runmode_handler+0x38>)
 80007da:	781a      	ldrb	r2, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	701a      	strb	r2, [r3, #0]
	length ++;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	3301      	adds	r3, #1
 80007e4:	617b      	str	r3, [r7, #20]
	*txLen = length;
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	371c      	adds	r7, #28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000090 	.word	0x20000090

08000800 <rt_bus_cmd_read_data_handler>:

uint32_t rt_bus_cmd_read_data_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	460b      	mov	r3, r1
 800080e:	817b      	strh	r3, [r7, #10]
	test[0] +=0x01010101;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <rt_bus_cmd_read_data_handler+0x44>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f103 3301 	add.w	r3, r3, #16843009	; 0x1010101
 8000818:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <rt_bus_cmd_read_data_handler+0x44>)
 800081a:	6013      	str	r3, [r2, #0]
	test[1] +=0x01010101;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <rt_bus_cmd_read_data_handler+0x44>)
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f103 3301 	add.w	r3, r3, #16843009	; 0x1010101
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <rt_bus_cmd_read_data_handler+0x44>)
 8000826:	6053      	str	r3, [r2, #4]
	memcpy(&txData[0],&test[0],8);
 8000828:	2208      	movs	r2, #8
 800082a:	4906      	ldr	r1, [pc, #24]	; (8000844 <rt_bus_cmd_read_data_handler+0x44>)
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f003 f92f 	bl	8003a90 <memcpy>
	*txLen = 8;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2208      	movs	r2, #8
 8000836:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000a0 	.word	0x200000a0

08000848 <get_mem_type>:
 *txLen = length;
	return RT_PROTO_OK;
}*/

uint32_t get_mem_type(uint32_t address)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	//if ((address >= FLASH_START_ADDRESS) & (address<=FLASH_END_ADDRESS))
	return MEM_TYPE_FLASH;
 8000850:	2300      	movs	r3, #0
	//else if ((address >= RAM_START_ADDRESS) & (address <= RAM_END_ADDRESS))
	return MEM_TYPE_RAM;
	//else
	return MEM_TYPE_UNK;
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <rt_bus_cmd_bl_stay>:

uint32_t rt_bus_cmd_bl_stay (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	460b      	mov	r3, r1
 800086a:	817b      	strh	r3, [r7, #10]
	gStayInBootloader = 1;
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <rt_bus_cmd_bl_stay+0x24>)
 800086e:	2201      	movs	r2, #1
 8000870:	701a      	strb	r2, [r3, #0]
	return RT_PROTO_OK;
 8000872:	2300      	movs	r3, #0
}
 8000874:	4618      	mov	r0, r3
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000091 	.word	0x20000091

08000884 <rt_bus_cmd_bl_write_handler>:

uint32_t rt_bus_cmd_bl_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	; 0x38
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	607a      	str	r2, [r7, #4]
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	460b      	mov	r3, r1
 8000892:	817b      	strh	r3, [r7, #10]
	uint32_t writeaddress;
	uint32_t mtype;
	uint8_t decBuffer[16];
	uint8_t *iv;
	uint8_t *data;
	if (rxLen != 1060)
 8000894:	897b      	ldrh	r3, [r7, #10]
 8000896:	f240 4224 	movw	r2, #1060	; 0x424
 800089a:	4293      	cmp	r3, r2
 800089c:	d001      	beq.n	80008a2 <rt_bus_cmd_bl_write_handler+0x1e>
		return RT_PROTO_DataError;
 800089e:	2302      	movs	r3, #2
 80008a0:	e04c      	b.n	800093c <rt_bus_cmd_bl_write_handler+0xb8>
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	681b      	ldr	r3, [r3, #0]

	memcpy(&writeaddress,&rxData[0],4);
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
	// Addr       IV      [ Magic     Data ]
	//  4         16      [  4        1024 ]
	//				      [ Encrypted      ]
	// 0..3      4..19	  [ 20..23	..    1060 ]

	iv = &rxData[4];
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3304      	adds	r3, #4
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
	data = &rxData[20];
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3314      	adds	r3, #20
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30

	//AES_CBC_decrypt_buffer(decBuffer,data,16,AES_KEY,iv);
	if (memcmp("ROTA",&decBuffer[0],4) != 0){
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2204      	movs	r2, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4821      	ldr	r0, [pc, #132]	; (8000944 <rt_bus_cmd_bl_write_handler+0xc0>)
 80008be:	f003 f8d9 	bl	8003a74 <memcmp>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <rt_bus_cmd_bl_write_handler+0x48>
		return RT_PROTO_DataError;
 80008c8:	2302      	movs	r3, #2
 80008ca:	e037      	b.n	800093c <rt_bus_cmd_bl_write_handler+0xb8>
	}
	if (memcmp("ROTA",&decBuffer[12],4) != 0){
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	330c      	adds	r3, #12
 80008d2:	2204      	movs	r2, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	481b      	ldr	r0, [pc, #108]	; (8000944 <rt_bus_cmd_bl_write_handler+0xc0>)
 80008d8:	f003 f8cc 	bl	8003a74 <memcmp>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <rt_bus_cmd_bl_write_handler+0x62>
		return RT_PROTO_DataError;
 80008e2:	2302      	movs	r3, #2
 80008e4:	e02a      	b.n	800093c <rt_bus_cmd_bl_write_handler+0xb8>
	}

	//AES_CBC_decrypt_buffer(flashBuffer,data,1040,AES_KEY,iv);
	mtype = get_mem_type(writeaddress);
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ffad 	bl	8000848 <get_mem_type>
 80008ee:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (mtype == MEM_TYPE_FLASH)
 80008f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d10f      	bne.n	8000916 <rt_bus_cmd_bl_write_handler+0x92>
	{
		//FLASH_If_Init();
		uint32_t ret = 0;/*FLASH_If_Write(writeaddress,(uint32_t *)&flashBuffer[16],1024/4);*/
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (ret == HAL_OK){
 80008fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d105      	bne.n	800090c <rt_bus_cmd_bl_write_handler+0x88>
			dbprintf("Writing firmware to 0x%08X...",writeaddress);
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <rt_bus_cmd_bl_write_handler+0xc4>)
 8000906:	f000 fcd5 	bl	80012b4 <dbprintf>
 800090a:	e016      	b.n	800093a <rt_bus_cmd_bl_write_handler+0xb6>
		}else{
			dbprintf("Write error!!!");
 800090c:	480f      	ldr	r0, [pc, #60]	; (800094c <rt_bus_cmd_bl_write_handler+0xc8>)
 800090e:	f000 fcd1 	bl	80012b4 <dbprintf>
			return RT_PROTO_ExcError;
 8000912:	2304      	movs	r3, #4
 8000914:	e012      	b.n	800093c <rt_bus_cmd_bl_write_handler+0xb8>
		}
	}
	else if (mtype == MEM_TYPE_RAM)
 8000916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000918:	2b01      	cmp	r3, #1
 800091a:	d109      	bne.n	8000930 <rt_bus_cmd_bl_write_handler+0xac>
	{
		memcpy((uint8_t *)writeaddress,&rxData[4],1024);
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	4618      	mov	r0, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	3304      	adds	r3, #4
 8000924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000928:	4619      	mov	r1, r3
 800092a:	f003 f8b1 	bl	8003a90 <memcpy>
 800092e:	e004      	b.n	800093a <rt_bus_cmd_bl_write_handler+0xb6>
	}
	else
	{
		dbprintf("RT_PROTO_DataError");
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <rt_bus_cmd_bl_write_handler+0xcc>)
 8000932:	f000 fcbf 	bl	80012b4 <dbprintf>
		return RT_PROTO_DataError;
 8000936:	2302      	movs	r3, #2
 8000938:	e000      	b.n	800093c <rt_bus_cmd_bl_write_handler+0xb8>
	}

	return RT_PROTO_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	3738      	adds	r7, #56	; 0x38
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	0800437c 	.word	0x0800437c
 8000948:	08004384 	.word	0x08004384
 800094c:	080043a4 	.word	0x080043a4
 8000950:	080043b4 	.word	0x080043b4

08000954 <rt_bus_cmd_bl_erase_handler>:

uint32_t rt_bus_cmd_bl_erase_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	460b      	mov	r3, r1
 8000962:	817b      	strh	r3, [r7, #10]
	uint32_t eraseaddress;
	uint32_t eraseLen;
	uint32_t mtype;

	if (rxLen != 0x08)
 8000964:	897b      	ldrh	r3, [r7, #10]
 8000966:	2b08      	cmp	r3, #8
 8000968:	d001      	beq.n	800096e <rt_bus_cmd_bl_erase_handler+0x1a>
		return RT_PROTO_DataError;
 800096a:	2302      	movs	r3, #2
 800096c:	e033      	b.n	80009d6 <rt_bus_cmd_bl_erase_handler+0x82>
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]

	memcpy(&eraseaddress,&rxData[0],4);
 8000972:	61bb      	str	r3, [r7, #24]
	memcpy(&eraseLen,&rxData[4],4);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	3304      	adds	r3, #4
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	617b      	str	r3, [r7, #20]

	dbprintf("Erasing flash... Start Address : %08X, Size: %d\n\r",eraseaddress,eraseLen);
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	4619      	mov	r1, r3
 8000982:	4817      	ldr	r0, [pc, #92]	; (80009e0 <rt_bus_cmd_bl_erase_handler+0x8c>)
 8000984:	f000 fc96 	bl	80012b4 <dbprintf>


	if (eraseaddress % FLASH_PAGE_SIZE)
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <rt_bus_cmd_bl_erase_handler+0x42>
		return RT_PROTO_DataError;
 8000992:	2302      	movs	r3, #2
 8000994:	e01f      	b.n	80009d6 <rt_bus_cmd_bl_erase_handler+0x82>
	if (eraseLen % FLASH_PAGE_SIZE)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <rt_bus_cmd_bl_erase_handler+0x50>
		return RT_PROTO_DataError;
 80009a0:	2302      	movs	r3, #2
 80009a2:	e018      	b.n	80009d6 <rt_bus_cmd_bl_erase_handler+0x82>



	mtype = get_mem_type(eraseaddress);
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff4e 	bl	8000848 <get_mem_type>
 80009ac:	61f8      	str	r0, [r7, #28]
	if (mtype == MEM_TYPE_FLASH)
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d00f      	beq.n	80009d4 <rt_bus_cmd_bl_erase_handler+0x80>
		if (FLASH_If_Erase(eraseaddress,eraseLen) != HAL_OK){
			dbprintf("RT_PROTO_ExcError\n\r");
			return RT_PROTO_ExcError;
		}*/
	}
	else if (mtype == MEM_TYPE_RAM)
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d10a      	bne.n	80009d0 <rt_bus_cmd_bl_erase_handler+0x7c>
	{
		dbprintf("MEM_TYPE_RAM\n\r");
 80009ba:	480a      	ldr	r0, [pc, #40]	; (80009e4 <rt_bus_cmd_bl_erase_handler+0x90>)
 80009bc:	f000 fc7a 	bl	80012b4 <dbprintf>
		memset((unsigned char *)eraseaddress,0,eraseLen);
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	4618      	mov	r0, r3
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	461a      	mov	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	f003 f86f 	bl	8003aac <memset>
 80009ce:	e001      	b.n	80009d4 <rt_bus_cmd_bl_erase_handler+0x80>
	}
	else
	{
		return RT_PROTO_DataError;
 80009d0:	2302      	movs	r3, #2
 80009d2:	e000      	b.n	80009d6 <rt_bus_cmd_bl_erase_handler+0x82>
	}

	return RT_PROTO_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3720      	adds	r7, #32
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	080043c8 	.word	0x080043c8
 80009e4:	080043fc 	.word	0x080043fc

080009e8 <SPI_DMA_Reset>:


void SPI_DMA_Reset(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	HAL_SPI_DMAStop(&hspi1);
 80009ec:	480b      	ldr	r0, [pc, #44]	; (8000a1c <SPI_DMA_Reset+0x34>)
 80009ee:	f002 fb33 	bl	8003058 <HAL_SPI_DMAStop>
	HAL_SPI_TransmitReceive_DMA(&hspi1,gSPI_Tx_Buf, gSPI_Rx_Buf, SPI_RX_BUF_SIZE);
 80009f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <SPI_DMA_Reset+0x38>)
 80009f8:	490a      	ldr	r1, [pc, #40]	; (8000a24 <SPI_DMA_Reset+0x3c>)
 80009fa:	4808      	ldr	r0, [pc, #32]	; (8000a1c <SPI_DMA_Reset+0x34>)
 80009fc:	f002 fa2a 	bl	8002e54 <HAL_SPI_TransmitReceive_DMA>
	prevDMACnt = SPI_RX_BUF_SIZE;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <SPI_DMA_Reset+0x40>)
 8000a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a06:	801a      	strh	r2, [r3, #0]
	rxFrameSize = 0;
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <SPI_DMA_Reset+0x44>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
	prevDMA = SPI_TX_BUF_SIZE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <SPI_DMA_Reset+0x48>)
 8000a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a14:	801a      	strh	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20002638 	.word	0x20002638
 8000a20:	20001d38 	.word	0x20001d38
 8000a24:	20000128 	.word	0x20000128
 8000a28:	20000002 	.word	0x20000002
 8000a2c:	20000094 	.word	0x20000094
 8000a30:	20000000 	.word	0x20000000

08000a34 <rt_bus_proto_bl_process>:

void rt_bus_proto_bl_process()
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
	uint16_t pSize = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	817b      	strh	r3, [r7, #10]
	uint16_t addr = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	813b      	strh	r3, [r7, #8]
	uint16_t cCRC = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	807b      	strh	r3, [r7, #2]
	uint16_t txSize = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	803b      	strh	r3, [r7, #0]
	uint32_t ret;
	if (isFrameReady)
 8000a4a:	4b51      	ldr	r3, [pc, #324]	; (8000b90 <rt_bus_proto_bl_process+0x15c>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 8084 	beq.w	8000b5c <rt_bus_proto_bl_process+0x128>
	{
		if ((rxBuffer[PRT_STX_IDX+PRT_FIX_BYTE_NUM] == PRT_STX) && (rxBuffer[rxFrameSize-PRT_ETX_LEFT_IDX-PRT_FIX_BYTE_END_NUM] == PRT_ETX)) // check stx and etx on received frame
 8000a54:	4b4f      	ldr	r3, [pc, #316]	; (8000b94 <rt_bus_proto_bl_process+0x160>)
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d17c      	bne.n	8000b56 <rt_bus_proto_bl_process+0x122>
 8000a5c:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <rt_bus_proto_bl_process+0x164>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3b02      	subs	r3, #2
 8000a62:	4a4c      	ldr	r2, [pc, #304]	; (8000b94 <rt_bus_proto_bl_process+0x160>)
 8000a64:	5cd3      	ldrb	r3, [r2, r3]
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d175      	bne.n	8000b56 <rt_bus_proto_bl_process+0x122>
		{
			//dbprintf("start - end ok\n\r");
			pSize = ((uint16_t)rxBuffer[PRT_LEN_MSB_IDX+PRT_FIX_BYTE_NUM] << 8) | (rxBuffer[PRT_LEN_LSB_IDX+PRT_FIX_BYTE_NUM]);
 8000a6a:	4b4a      	ldr	r3, [pc, #296]	; (8000b94 <rt_bus_proto_bl_process+0x160>)
 8000a6c:	791b      	ldrb	r3, [r3, #4]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <rt_bus_proto_bl_process+0x160>)
 8000a74:	795b      	ldrb	r3, [r3, #5]
 8000a76:	b21b      	sxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b21b      	sxth	r3, r3
 8000a7c:	817b      	strh	r3, [r7, #10]
			//dbprintf("pSize: %d  %02X %02X rxFrameSize: %d ok",pSize,rxBuffer[PRT_LEN_MSB_IDX],rxBuffer[PRT_LEN_LSB_IDX],rxFrameSize);
			//
			if (pSize <= rxFrameSize - (8 + PRT_FIX_BYTE_NUM + PRT_FIX_BYTE_END_NUM))
 8000a7e:	897a      	ldrh	r2, [r7, #10]
 8000a80:	4b45      	ldr	r3, [pc, #276]	; (8000b98 <rt_bus_proto_bl_process+0x164>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3b0a      	subs	r3, #10
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d865      	bhi.n	8000b56 <rt_bus_proto_bl_process+0x122>
			{
				//dbprintf("size ok");
				addr = ((uint16_t)rxBuffer[PRT_AD_MSB_IDX + PRT_FIX_BYTE_NUM] << 8) | (rxBuffer[PRT_AD_LSB_IDX + PRT_FIX_BYTE_NUM]);
 8000a8a:	4b42      	ldr	r3, [pc, #264]	; (8000b94 <rt_bus_proto_bl_process+0x160>)
 8000a8c:	789b      	ldrb	r3, [r3, #2]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <rt_bus_proto_bl_process+0x160>)
 8000a94:	78db      	ldrb	r3, [r3, #3]
 8000a96:	b21b      	sxth	r3, r3
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b21b      	sxth	r3, r3
 8000a9c:	813b      	strh	r3, [r7, #8]
				cCRC = crc16(&rxBuffer[PRT_AD_MSB_IDX+PRT_FIX_BYTE_NUM], rxFrameSize- (4 + PRT_FIX_BYTE_NUM+PRT_FIX_BYTE_END_NUM));
 8000a9e:	4b3e      	ldr	r3, [pc, #248]	; (8000b98 <rt_bus_proto_bl_process+0x164>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	b29b      	uxth	r3, r3
 8000aa4:	3b06      	subs	r3, #6
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	483c      	ldr	r0, [pc, #240]	; (8000b9c <rt_bus_proto_bl_process+0x168>)
 8000aac:	f7ff fbde 	bl	800026c <crc16>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	807b      	strh	r3, [r7, #2]
				if (memcmp(&rxBuffer[rxFrameSize-(3+PRT_FIX_BYTE_END_NUM)],&cCRC,2)==0)
 8000ab4:	4b38      	ldr	r3, [pc, #224]	; (8000b98 <rt_bus_proto_bl_process+0x164>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	3b04      	subs	r3, #4
 8000aba:	4a36      	ldr	r2, [pc, #216]	; (8000b94 <rt_bus_proto_bl_process+0x160>)
 8000abc:	4413      	add	r3, r2
 8000abe:	1cb9      	adds	r1, r7, #2
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f002 ffd6 	bl	8003a74 <memcmp>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d141      	bne.n	8000b52 <rt_bus_proto_bl_process+0x11e>
				{
					//dbprintf("crc ok");
					for (int i=0;i<gCommandCount ;i++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e03a      	b.n	8000b4a <rt_bus_proto_bl_process+0x116>
					{
						if (commands[i].cmd == rxBuffer[PRT_CMD_IDX+PRT_FIX_BYTE_NUM])
 8000ad4:	4a32      	ldr	r2, [pc, #200]	; (8000ba0 <rt_bus_proto_bl_process+0x16c>)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000adc:	4b2d      	ldr	r3, [pc, #180]	; (8000b94 <rt_bus_proto_bl_process+0x160>)
 8000ade:	799b      	ldrb	r3, [r3, #6]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d12f      	bne.n	8000b44 <rt_bus_proto_bl_process+0x110>
						{
							txSize = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	803b      	strh	r3, [r7, #0]
							gFrameCount++;
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <rt_bus_proto_bl_process+0x170>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a2d      	ldr	r2, [pc, #180]	; (8000ba4 <rt_bus_proto_bl_process+0x170>)
 8000af0:	6013      	str	r3, [r2, #0]
							ret = commands[i].handler(&rxBuffer[PRT_DATA_S_IDX+PRT_FIX_BYTE_NUM],pSize,&txBuffer[PRT_DATA_S_IDX+1],&txSize);
 8000af2:	4a2b      	ldr	r2, [pc, #172]	; (8000ba0 <rt_bus_proto_bl_process+0x16c>)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	4413      	add	r3, r2
 8000afa:	685c      	ldr	r4, [r3, #4]
 8000afc:	463b      	mov	r3, r7
 8000afe:	8979      	ldrh	r1, [r7, #10]
 8000b00:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <rt_bus_proto_bl_process+0x174>)
 8000b02:	482a      	ldr	r0, [pc, #168]	; (8000bac <rt_bus_proto_bl_process+0x178>)
 8000b04:	47a0      	blx	r4
 8000b06:	6078      	str	r0, [r7, #4]
							if (ret == RT_PROTO_OK)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d107      	bne.n	8000b1e <rt_bus_proto_bl_process+0xea>
							{
								txBuffer[PRT_DATA_S_IDX] = PRT_ACK;
 8000b0e:	4b28      	ldr	r3, [pc, #160]	; (8000bb0 <rt_bus_proto_bl_process+0x17c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	719a      	strb	r2, [r3, #6]
								txSize ++;
 8000b14:	883b      	ldrh	r3, [r7, #0]
 8000b16:	3301      	adds	r3, #1
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	803b      	strh	r3, [r7, #0]
 8000b1c:	e008      	b.n	8000b30 <rt_bus_proto_bl_process+0xfc>
							}
							else
							{
								txBuffer[PRT_DATA_S_IDX] = PRT_NCK;
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <rt_bus_proto_bl_process+0x17c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	719a      	strb	r2, [r3, #6]
								txBuffer[PRT_DATA_S_IDX+1] = ret;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <rt_bus_proto_bl_process+0x17c>)
 8000b2a:	71da      	strb	r2, [r3, #7]
								txSize = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	803b      	strh	r3, [r7, #0]
							}
							rt_bus_proto_frame_pack(commands[i].cmd,&txSize);
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <rt_bus_proto_bl_process+0x16c>)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000b38:	463a      	mov	r2, r7
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fdc1 	bl	80006c4 <rt_bus_proto_frame_pack>

							break;
 8000b42:	e006      	b.n	8000b52 <rt_bus_proto_bl_process+0x11e>
					for (int i=0;i<gCommandCount ;i++)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	2207      	movs	r2, #7
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	dbc0      	blt.n	8000ad4 <rt_bus_proto_bl_process+0xa0>
						}
					}
				}
				//dbprintf("rxFrameSize: %d startTick:%d , now: %d",rxFrameSize,lastRxTime,HAL_GetTick());
				SPI_DMA_Reset();
 8000b52:	f7ff ff49 	bl	80009e8 <SPI_DMA_Reset>
			}
		}
		isFrameReady = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <rt_bus_proto_bl_process+0x15c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]
	}

	if (rxFrameSize)
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <rt_bus_proto_bl_process+0x164>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d011      	beq.n	8000b88 <rt_bus_proto_bl_process+0x154>
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
	{
		__disable_irq();
		//dbprintf("lastRxTime: %d now: %d",lastRxTime,HAL_GetTick());
		if (HAL_GetTick() > (lastRxTime + 2000))
 8000b68:	f000 fc34 	bl	80013d4 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <rt_bus_proto_bl_process+0x180>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d904      	bls.n	8000b84 <rt_bus_proto_bl_process+0x150>
		{
			dbprintf("Timeout resetting...");
 8000b7a:	480f      	ldr	r0, [pc, #60]	; (8000bb8 <rt_bus_proto_bl_process+0x184>)
 8000b7c:	f000 fb9a 	bl	80012b4 <dbprintf>
			SPI_DMA_Reset();
 8000b80:	f7ff ff32 	bl	80009e8 <SPI_DMA_Reset>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b84:	b662      	cpsie	i
}
 8000b86:	bf00      	nop
		}
		__enable_irq();
	}
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd90      	pop	{r4, r7, pc}
 8000b90:	20000093 	.word	0x20000093
 8000b94:	20000d38 	.word	0x20000d38
 8000b98:	20000094 	.word	0x20000094
 8000b9c:	20000d3a 	.word	0x20000d3a
 8000ba0:	08004658 	.word	0x08004658
 8000ba4:	2000009c 	.word	0x2000009c
 8000ba8:	2000153f 	.word	0x2000153f
 8000bac:	20000d3f 	.word	0x20000d3f
 8000bb0:	20001538 	.word	0x20001538
 8000bb4:	20000098 	.word	0x20000098
 8000bb8:	0800440c 	.word	0x0800440c

08000bbc <rt_bus_proto_bl_dt>:

void rt_bus_proto_bl_dt(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	uint16_t currentDMACnt = hspi1.hdmarx->Instance->CNDTR;
 8000bc2:	4b57      	ldr	r3, [pc, #348]	; (8000d20 <rt_bus_proto_bl_dt+0x164>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	80fb      	strh	r3, [r7, #6]
	uint16_t size=0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	80bb      	strh	r3, [r7, #4]
	uint16_t start = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	807b      	strh	r3, [r7, #2]
	dbprintf("%s",__func__);
 8000bd4:	4953      	ldr	r1, [pc, #332]	; (8000d24 <rt_bus_proto_bl_dt+0x168>)
 8000bd6:	4854      	ldr	r0, [pc, #336]	; (8000d28 <rt_bus_proto_bl_dt+0x16c>)
 8000bd8:	f000 fb6c 	bl	80012b4 <dbprintf>
	//dbprintf("currentDMACnt: %d",currentDMACnt);
	//if (hspi1.hdmarx->State == HAL_DMA_STATE_BUSY)
	{
		if (prevDMACnt > currentDMACnt)
 8000bdc:	4b53      	ldr	r3, [pc, #332]	; (8000d2c <rt_bus_proto_bl_dt+0x170>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	88fa      	ldrh	r2, [r7, #6]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d239      	bcs.n	8000c5a <rt_bus_proto_bl_dt+0x9e>
		{
			lastRxTime = HAL_GetTick();
 8000be6:	f000 fbf5 	bl	80013d4 <HAL_GetTick>
 8000bea:	4603      	mov	r3, r0
 8000bec:	4a50      	ldr	r2, [pc, #320]	; (8000d30 <rt_bus_proto_bl_dt+0x174>)
 8000bee:	6013      	str	r3, [r2, #0]
			//dbprintf("Received Data Count: %d\n\r",(prevDMACnt-currentDMACnt));
			size = prevDMACnt - currentDMACnt;
 8000bf0:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <rt_bus_proto_bl_dt+0x170>)
 8000bf2:	881a      	ldrh	r2, [r3, #0]
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	80bb      	strh	r3, [r7, #4]
			if (size > SPI_RX_BUF_SIZE)
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c00:	f200 8087 	bhi.w	8000d12 <rt_bus_proto_bl_dt+0x156>
				return;

			start = (SPI_RX_BUF_SIZE - prevDMACnt);
 8000c04:	4b49      	ldr	r3, [pc, #292]	; (8000d2c <rt_bus_proto_bl_dt+0x170>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000c0c:	807b      	strh	r3, [r7, #2]

			if (rxFrameSize + size < SPI_RX_BUF_SIZE)
 8000c0e:	88ba      	ldrh	r2, [r7, #4]
 8000c10:	4b48      	ldr	r3, [pc, #288]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4413      	add	r3, r2
 8000c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c1a:	d21a      	bcs.n	8000c52 <rt_bus_proto_bl_dt+0x96>
			{
				memcpy(&rxBuffer[rxFrameSize],&gSPI_Rx_Buf[start],size);
 8000c1c:	4b45      	ldr	r3, [pc, #276]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a45      	ldr	r2, [pc, #276]	; (8000d38 <rt_bus_proto_bl_dt+0x17c>)
 8000c22:	1898      	adds	r0, r3, r2
 8000c24:	887b      	ldrh	r3, [r7, #2]
 8000c26:	4a45      	ldr	r2, [pc, #276]	; (8000d3c <rt_bus_proto_bl_dt+0x180>)
 8000c28:	4413      	add	r3, r2
 8000c2a:	88ba      	ldrh	r2, [r7, #4]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f002 ff2f 	bl	8003a90 <memcpy>
				rxFrameSize += size;
 8000c32:	88ba      	ldrh	r2, [r7, #4]
 8000c34:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a3e      	ldr	r2, [pc, #248]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000c3c:	6013      	str	r3, [r2, #0]
				if (rxBuffer[rxFrameSize-1-PRT_FIX_BYTE_END_NUM] == 0x03){
 8000c3e:	4b3d      	ldr	r3, [pc, #244]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3b02      	subs	r3, #2
 8000c44:	4a3c      	ldr	r2, [pc, #240]	; (8000d38 <rt_bus_proto_bl_dt+0x17c>)
 8000c46:	5cd3      	ldrb	r3, [r2, r3]
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d102      	bne.n	8000c52 <rt_bus_proto_bl_dt+0x96>
					isFrameReady = 0x01;
 8000c4c:	4b3c      	ldr	r3, [pc, #240]	; (8000d40 <rt_bus_proto_bl_dt+0x184>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
				}
			}

			prevDMACnt = currentDMACnt;
 8000c52:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <rt_bus_proto_bl_dt+0x170>)
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	8013      	strh	r3, [r2, #0]
 8000c58:	e058      	b.n	8000d0c <rt_bus_proto_bl_dt+0x150>
		}
		else if (prevDMACnt < currentDMACnt)
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <rt_bus_proto_bl_dt+0x170>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	88fa      	ldrh	r2, [r7, #6]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d953      	bls.n	8000d0c <rt_bus_proto_bl_dt+0x150>
		{
			lastRxTime = HAL_GetTick();
 8000c64:	f000 fbb6 	bl	80013d4 <HAL_GetTick>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a31      	ldr	r2, [pc, #196]	; (8000d30 <rt_bus_proto_bl_dt+0x174>)
 8000c6c:	6013      	str	r3, [r2, #0]
			//dbprintf("Received Data Count: %d\n\r",(prevDMACnt-currentDMACnt));
			size = prevDMACnt;
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <rt_bus_proto_bl_dt+0x170>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	80bb      	strh	r3, [r7, #4]
			if (size > SPI_RX_BUF_SIZE)
 8000c74:	88bb      	ldrh	r3, [r7, #4]
 8000c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c7a:	d84c      	bhi.n	8000d16 <rt_bus_proto_bl_dt+0x15a>
				return;
			start = (SPI_RX_BUF_SIZE - prevDMACnt);
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <rt_bus_proto_bl_dt+0x170>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000c84:	807b      	strh	r3, [r7, #2]

			if (rxFrameSize + size < SPI_RX_BUF_SIZE)
 8000c86:	88ba      	ldrh	r2, [r7, #4]
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c92:	d210      	bcs.n	8000cb6 <rt_bus_proto_bl_dt+0xfa>
			{
				memcpy(&rxBuffer[rxFrameSize],&gSPI_Rx_Buf[start],size);
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a27      	ldr	r2, [pc, #156]	; (8000d38 <rt_bus_proto_bl_dt+0x17c>)
 8000c9a:	1898      	adds	r0, r3, r2
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	4a27      	ldr	r2, [pc, #156]	; (8000d3c <rt_bus_proto_bl_dt+0x180>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	88ba      	ldrh	r2, [r7, #4]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f002 fef3 	bl	8003a90 <memcpy>
				rxFrameSize +=size;
 8000caa:	88ba      	ldrh	r2, [r7, #4]
 8000cac:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000cb4:	6013      	str	r3, [r2, #0]
			}

			size = SPI_RX_BUF_SIZE - currentDMACnt;
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000cbc:	80bb      	strh	r3, [r7, #4]
			start = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	807b      	strh	r3, [r7, #2]
			if (rxFrameSize + size < SPI_RX_BUF_SIZE)
 8000cc2:	88ba      	ldrh	r2, [r7, #4]
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cce:	d21a      	bcs.n	8000d06 <rt_bus_proto_bl_dt+0x14a>
			{
				memcpy(&rxBuffer[rxFrameSize],&gSPI_Rx_Buf[start],size);
 8000cd0:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <rt_bus_proto_bl_dt+0x17c>)
 8000cd6:	1898      	adds	r0, r3, r2
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	4a18      	ldr	r2, [pc, #96]	; (8000d3c <rt_bus_proto_bl_dt+0x180>)
 8000cdc:	4413      	add	r3, r2
 8000cde:	88ba      	ldrh	r2, [r7, #4]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f002 fed5 	bl	8003a90 <memcpy>
				rxFrameSize += size;
 8000ce6:	88ba      	ldrh	r2, [r7, #4]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000cf0:	6013      	str	r3, [r2, #0]

				if (rxBuffer[rxFrameSize-1-PRT_FIX_BYTE_END_NUM] == 0x03){
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <rt_bus_proto_bl_dt+0x178>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3b02      	subs	r3, #2
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <rt_bus_proto_bl_dt+0x17c>)
 8000cfa:	5cd3      	ldrb	r3, [r2, r3]
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d102      	bne.n	8000d06 <rt_bus_proto_bl_dt+0x14a>
					isFrameReady = 0x01;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <rt_bus_proto_bl_dt+0x184>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
				}
			}
			prevDMACnt = currentDMACnt;
 8000d06:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <rt_bus_proto_bl_dt+0x170>)
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	8013      	strh	r3, [r2, #0]
		}
		rt_bus_proto_bl_process();
 8000d0c:	f7ff fe92 	bl	8000a34 <rt_bus_proto_bl_process>
 8000d10:	e002      	b.n	8000d18 <rt_bus_proto_bl_dt+0x15c>
				return;
 8000d12:	bf00      	nop
 8000d14:	e000      	b.n	8000d18 <rt_bus_proto_bl_dt+0x15c>
				return;
 8000d16:	bf00      	nop
	}
}
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20002638 	.word	0x20002638
 8000d24:	08004690 	.word	0x08004690
 8000d28:	08004424 	.word	0x08004424
 8000d2c:	20000002 	.word	0x20000002
 8000d30:	20000098 	.word	0x20000098
 8000d34:	20000094 	.word	0x20000094
 8000d38:	20000d38 	.word	0x20000d38
 8000d3c:	20001d38 	.word	0x20001d38
 8000d40:	20000093 	.word	0x20000093

08000d44 <rt_get_io_values>:



void rt_get_io_values(void){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	dbprintf("%s",__func__);
 8000d4a:	4919      	ldr	r1, [pc, #100]	; (8000db0 <rt_get_io_values+0x6c>)
 8000d4c:	4819      	ldr	r0, [pc, #100]	; (8000db4 <rt_get_io_values+0x70>)
 8000d4e:	f000 fab1 	bl	80012b4 <dbprintf>
	//dbprintf("gSPI_Tx_Buf: %02X%02X%02X%02X sizeof(tPDO): %d",gSPI_Tx_Buf[4],gSPI_Tx_Buf[5],gSPI_Tx_Buf[6],gSPI_Tx_Buf[7],sizeof(tPDO));
	uint16_t currentDMACnt = hspi1.hdmarx->Instance->CNDTR;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <rt_get_io_values+0x74>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	80fb      	strh	r3, [r7, #6]
	if((prevDMACnt-currentDMACnt) > 0 && (prevDMACnt-currentDMACnt) != 13){
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <rt_get_io_values+0x78>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b00      	cmp	r3, #0
		//dbprintf("diff : %d",(prevDMACnt-currentDMACnt));
	}
	if((prevDMACnt-currentDMACnt) >= (sizeof(tPDI)+1)){
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <rt_get_io_values+0x78>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d918      	bls.n	8000da8 <rt_get_io_values+0x64>
		//lastRxTime = HAL_GetTick();
		HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin,0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2104      	movs	r1, #4
 8000d7a:	4811      	ldr	r0, [pc, #68]	; (8000dc0 <rt_get_io_values+0x7c>)
 8000d7c:	f001 fa58 	bl	8002230 <HAL_GPIO_WritePin>
		memcpy(&g_PDI,&gSPI_Rx_Buf[1],sizeof(tPDI));
 8000d80:	2208      	movs	r2, #8
 8000d82:	4910      	ldr	r1, [pc, #64]	; (8000dc4 <rt_get_io_values+0x80>)
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <rt_get_io_values+0x84>)
 8000d86:	f002 fe83 	bl	8003a90 <memcpy>
		//io_update();
		/*g_PDO.ssi = ssi_read();
		memcpy(&gSPI_Tx_Buf[4],&g_PDO.ssi,4);*/
		memcpy(&gSPI_Tx_Buf[0],&g_PDO,8);
 8000d8a:	2208      	movs	r2, #8
 8000d8c:	490f      	ldr	r1, [pc, #60]	; (8000dcc <rt_get_io_values+0x88>)
 8000d8e:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <rt_get_io_values+0x8c>)
 8000d90:	f002 fe7e 	bl	8003a90 <memcpy>
		//dbprintf("SSI RAW: %08X  Din: %08X",g_PDO.ssi,g_PDO.din);

		prevDMACnt = currentDMACnt;
 8000d94:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <rt_get_io_values+0x78>)
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	8013      	strh	r3, [r2, #0]
		SPI_DMA_Reset();
 8000d9a:	f7ff fe25 	bl	80009e8 <SPI_DMA_Reset>
		HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin,1);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2104      	movs	r1, #4
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <rt_get_io_values+0x7c>)
 8000da4:	f001 fa44 	bl	8002230 <HAL_GPIO_WritePin>
		{
			dbprintf("Timeout resetting  size: %d...",(prevDMACnt-currentDMACnt));
			SPI_DMA_Reset();
		}
	}*/
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	080046a4 	.word	0x080046a4
 8000db4:	08004424 	.word	0x08004424
 8000db8:	20002638 	.word	0x20002638
 8000dbc:	20000002 	.word	0x20000002
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	20001d39 	.word	0x20001d39
 8000dc8:	20000118 	.word	0x20000118
 8000dcc:	20000108 	.word	0x20000108
 8000dd0:	20000128 	.word	0x20000128

08000dd4 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000dda:	4a17      	ldr	r2, [pc, #92]	; (8000e38 <MX_SPI1_Init+0x64>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000e04:	2208      	movs	r2, #8
 8000e06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000e1c:	220a      	movs	r2, #10
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_SPI1_Init+0x60>)
 8000e22:	f001 ff93 	bl	8002d4c <HAL_SPI_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8000e2c:	f7ff fc2e 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20002638 	.word	0x20002638
 8000e38:	40013000 	.word	0x40013000

08000e3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a47      	ldr	r2, [pc, #284]	; (8000f74 <HAL_SPI_MspInit+0x138>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	f040 8086 	bne.w	8000f6a <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5e:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <HAL_SPI_MspInit+0x13c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a45      	ldr	r2, [pc, #276]	; (8000f78 <HAL_SPI_MspInit+0x13c>)
 8000e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <HAL_SPI_MspInit+0x13c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b40      	ldr	r3, [pc, #256]	; (8000f78 <HAL_SPI_MspInit+0x13c>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	4a3f      	ldr	r2, [pc, #252]	; (8000f78 <HAL_SPI_MspInit+0x13c>)
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	6193      	str	r3, [r2, #24]
 8000e82:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <HAL_SPI_MspInit+0x13c>)
 8000e84:	699b      	ldr	r3, [r3, #24]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000e8e:	23b0      	movs	r3, #176	; 0xb0
 8000e90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4836      	ldr	r0, [pc, #216]	; (8000f7c <HAL_SPI_MspInit+0x140>)
 8000ea2:	f001 f831 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ea6:	2340      	movs	r3, #64	; 0x40
 8000ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0310 	add.w	r3, r7, #16
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4830      	ldr	r0, [pc, #192]	; (8000f7c <HAL_SPI_MspInit+0x140>)
 8000eba:	f001 f825 	bl	8001f08 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000ebe:	4b30      	ldr	r3, [pc, #192]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000ec0:	4a30      	ldr	r2, [pc, #192]	; (8000f84 <HAL_SPI_MspInit+0x148>)
 8000ec2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec4:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eca:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000eea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000ef0:	4823      	ldr	r0, [pc, #140]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000ef2:	f000 fb87 	bl	8001604 <HAL_DMA_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8000efc:	f7ff fbc6 	bl	800068c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000f04:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f06:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <HAL_SPI_MspInit+0x144>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <HAL_SPI_MspInit+0x150>)
 8000f10:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f14:	2210      	movs	r2, #16
 8000f16:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000f36:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f38:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000f3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f3e:	4812      	ldr	r0, [pc, #72]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f40:	f000 fb60 	bl	8001604 <HAL_DMA_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8000f4a:	f7ff fb9f 	bl	800068c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f52:	649a      	str	r2, [r3, #72]	; 0x48
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_SPI_MspInit+0x14c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2023      	movs	r0, #35	; 0x23
 8000f60:	f000 fb19 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f64:	2023      	movs	r0, #35	; 0x23
 8000f66:	f000 fb32 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800
 8000f80:	20002690 	.word	0x20002690
 8000f84:	4002001c 	.word	0x4002001c
 8000f88:	200026d4 	.word	0x200026d4
 8000f8c:	40020030 	.word	0x40020030

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_MspInit+0x5c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_MspInit+0x5c>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_MspInit+0x5c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_MspInit+0x5c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_MspInit+0x60>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103a:	f000 f9b9 	bl	80013b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <DMA1_Channel2_IRQHandler+0x10>)
 800104a:	f000 fcf3 	bl	8001a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20002690 	.word	0x20002690

08001058 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <DMA1_Channel3_IRQHandler+0x10>)
 800105e:	f000 fce9 	bl	8001a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200026d4 	.word	0x200026d4

0800106c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <DMA1_Channel4_IRQHandler+0x10>)
 8001072:	f000 fcdf 	bl	8001a34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20002718 	.word	0x20002718

08001080 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001084:	2020      	movs	r0, #32
 8001086:	f001 f8eb 	bl	8002260 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <SPI1_IRQHandler+0x10>)
 8001096:	f002 f81f 	bl	80030d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20002638 	.word	0x20002638

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	; (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	; (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f002 fca4 	bl	8003a20 <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000c000 	.word	0x2000c000
 8001104:	00000400 	.word	0x00000400
 8001108:	200000a8 	.word	0x200000a8
 800110c:	200027b8 	.word	0x200027b8

08001110 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <MX_USART1_UART_Init+0x50>)
 8001124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001128:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800112c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_USART1_UART_Init+0x4c>)
 8001154:	f002 faac 	bl	80036b0 <HAL_UART_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800115e:	f7ff fa95 	bl	800068c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000275c 	.word	0x2000275c
 800116c:	40013800 	.word	0x40013800

08001170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_UART_MspInit+0xd8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d157      	bne.n	8001240 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001190:	4b2e      	ldr	r3, [pc, #184]	; (800124c <HAL_UART_MspInit+0xdc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a2d      	ldr	r2, [pc, #180]	; (800124c <HAL_UART_MspInit+0xdc>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_UART_MspInit+0xdc>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a8:	4b28      	ldr	r3, [pc, #160]	; (800124c <HAL_UART_MspInit+0xdc>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a27      	ldr	r2, [pc, #156]	; (800124c <HAL_UART_MspInit+0xdc>)
 80011ae:	f043 0304 	orr.w	r3, r3, #4
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b25      	ldr	r3, [pc, #148]	; (800124c <HAL_UART_MspInit+0xdc>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 80011c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	481e      	ldr	r0, [pc, #120]	; (8001250 <HAL_UART_MspInit+0xe0>)
 80011d6:	f000 fe97 	bl	8001f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DBG_RX_Pin;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4818      	ldr	r0, [pc, #96]	; (8001250 <HAL_UART_MspInit+0xe0>)
 80011f0:	f000 fe8a 	bl	8001f08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80011f4:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_UART_MspInit+0xe4>)
 80011f6:	4a18      	ldr	r2, [pc, #96]	; (8001258 <HAL_UART_MspInit+0xe8>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_UART_MspInit+0xe4>)
 80011fc:	2210      	movs	r2, #16
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_UART_MspInit+0xe4>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_UART_MspInit+0xe4>)
 8001208:	2280      	movs	r2, #128	; 0x80
 800120a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_UART_MspInit+0xe4>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001212:	4b10      	ldr	r3, [pc, #64]	; (8001254 <HAL_UART_MspInit+0xe4>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_UART_MspInit+0xe4>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <HAL_UART_MspInit+0xe4>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <HAL_UART_MspInit+0xe4>)
 8001226:	f000 f9ed 	bl	8001604 <HAL_DMA_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001230:	f7ff fa2c 	bl	800068c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_UART_MspInit+0xe4>)
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
 800123a:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_UART_MspInit+0xe4>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013800 	.word	0x40013800
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800
 8001254:	20002718 	.word	0x20002718
 8001258:	40020044 	.word	0x40020044

0800125c <vprintln>:
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    }
}

void vprintln(const char *fmt, va_list argp)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0b4      	sub	sp, #208	; 0xd0
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fc3a 	bl	8003ae8 <vsiprintf>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	dd14      	ble.n	80012a4 <vprintln+0x48>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 800127a:	f107 0308 	add.w	r3, r7, #8
 800127e:	4618      	mov	r0, r3
 8001280:	f7fe ffd0 	bl	8000224 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	f107 0108 	add.w	r1, r7, #8
 800128c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001290:	4806      	ldr	r0, [pc, #24]	; (80012ac <vprintln+0x50>)
 8001292:	f002 fa5a 	bl	800374a <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r",2, 0xffffff);
 8001296:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800129a:	2202      	movs	r2, #2
 800129c:	4904      	ldr	r1, [pc, #16]	; (80012b0 <vprintln+0x54>)
 800129e:	4803      	ldr	r0, [pc, #12]	; (80012ac <vprintln+0x50>)
 80012a0:	f002 fa53 	bl	800374a <HAL_UART_Transmit>
    }
}
 80012a4:	bf00      	nop
 80012a6:	37d0      	adds	r7, #208	; 0xd0
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000275c 	.word	0x2000275c
 80012b0:	08004428 	.word	0x08004428

080012b4 <dbprintf>:

void dbprintf(const char *fmt, ...)
{
 80012b4:	b40f      	push	{r0, r1, r2, r3}
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	607b      	str	r3, [r7, #4]
    vprintln((const char *)fmt, argp);
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	6938      	ldr	r0, [r7, #16]
 80012c6:	f7ff ffc9 	bl	800125c <vprintln>
    va_end(argp);
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012d4:	b004      	add	sp, #16
 80012d6:	4770      	bx	lr

080012d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012da:	490d      	ldr	r1, [pc, #52]	; (8001310 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012f0:	4c0a      	ldr	r4, [pc, #40]	; (800131c <LoopFillZerobss+0x22>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012fe:	f7ff ff07 	bl	8001110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001302:	f002 fb93 	bl	8003a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001306:	f7ff f90d 	bl	8000524 <main>
  bx lr
 800130a:	4770      	bx	lr
  ldr r0, =_sdata
 800130c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001310:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001314:	0800470c 	.word	0x0800470c
  ldr r2, =_sbss
 8001318:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800131c:	200027b4 	.word	0x200027b4

08001320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <ADC1_2_IRQHandler>
	...

08001324 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_Init+0x28>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_Init+0x28>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001334:	2003      	movs	r0, #3
 8001336:	f000 f923 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133a:	200f      	movs	r0, #15
 800133c:	f000 f808 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001340:	f7ff fe26 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40022000 	.word	0x40022000

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f93b 	bl	80015ea <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 f903 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000004 	.word	0x20000004
 80013a8:	2000000c 	.word	0x2000000c
 80013ac:	20000008 	.word	0x20000008

080013b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_IncTick+0x1c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <HAL_IncTick+0x20>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a03      	ldr	r2, [pc, #12]	; (80013d0 <HAL_IncTick+0x20>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	200027a0 	.word	0x200027a0

080013d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b02      	ldr	r3, [pc, #8]	; (80013e4 <HAL_GetTick+0x10>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	200027a0 	.word	0x200027a0

080013e8 <__NVIC_SetPriorityGrouping>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_EnableIRQ>:
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db0b      	blt.n	8001476 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	4906      	ldr	r1, [pc, #24]	; (8001480 <__NVIC_EnableIRQ+0x34>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff90 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff2d 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff42 	bl	8001430 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff90 	bl	80014d8 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5f 	bl	8001484 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff35 	bl	800144c <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e059      	b.n	80016ce <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_DMA_Init+0xd4>)
 8001622:	429a      	cmp	r2, r3
 8001624:	d80f      	bhi.n	8001646 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <HAL_DMA_Init+0xd8>)
 800162e:	4413      	add	r3, r2
 8001630:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <HAL_DMA_Init+0xdc>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	009a      	lsls	r2, r3, #2
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <HAL_DMA_Init+0xe0>)
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
 8001644:	e00e      	b.n	8001664 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_DMA_Init+0xe4>)
 800164e:	4413      	add	r3, r2
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <HAL_DMA_Init+0xdc>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	091b      	lsrs	r3, r3, #4
 8001658:	009a      	lsls	r2, r3, #2
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a22      	ldr	r2, [pc, #136]	; (80016ec <HAL_DMA_Init+0xe8>)
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2202      	movs	r2, #2
 8001668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800167a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800167e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40020407 	.word	0x40020407
 80016dc:	bffdfff8 	.word	0xbffdfff8
 80016e0:	cccccccd 	.word	0xcccccccd
 80016e4:	40020000 	.word	0x40020000
 80016e8:	bffdfbf8 	.word	0xbffdfbf8
 80016ec:	40020400 	.word	0x40020400

080016f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016fe:	2300      	movs	r3, #0
 8001700:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_DMA_Start_IT+0x20>
 800170c:	2302      	movs	r3, #2
 800170e:	e04a      	b.n	80017a6 <HAL_DMA_Start_IT+0xb6>
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800171e:	2b01      	cmp	r3, #1
 8001720:	d13a      	bne.n	8001798 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2202      	movs	r2, #2
 8001726:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 0201 	bic.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 fbb0 	bl	8001eac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 020e 	orr.w	r2, r2, #14
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	e00f      	b.n	8001786 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0204 	bic.w	r2, r2, #4
 8001774:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 020a 	orr.w	r2, r2, #10
 8001784:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f042 0201 	orr.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e005      	b.n	80017a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017a0:	2302      	movs	r3, #2
 80017a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b085      	sub	sp, #20
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d008      	beq.n	80017d6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2204      	movs	r2, #4
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e020      	b.n	8001818 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 020e 	bic.w	r2, r2, #14
 80017e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0201 	bic.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001816:	7bfb      	ldrb	r3, [r7, #15]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
	...

08001824 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001836:	2b02      	cmp	r3, #2
 8001838:	d005      	beq.n	8001846 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2204      	movs	r2, #4
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
 8001844:	e0d6      	b.n	80019f4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 020e 	bic.w	r2, r2, #14
 8001854:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0201 	bic.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_DMA_Abort_IT+0x1dc>)
 800186e:	429a      	cmp	r2, r3
 8001870:	d958      	bls.n	8001924 <HAL_DMA_Abort_IT+0x100>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a63      	ldr	r2, [pc, #396]	; (8001a04 <HAL_DMA_Abort_IT+0x1e0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d04f      	beq.n	800191c <HAL_DMA_Abort_IT+0xf8>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a61      	ldr	r2, [pc, #388]	; (8001a08 <HAL_DMA_Abort_IT+0x1e4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d048      	beq.n	8001918 <HAL_DMA_Abort_IT+0xf4>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a60      	ldr	r2, [pc, #384]	; (8001a0c <HAL_DMA_Abort_IT+0x1e8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d040      	beq.n	8001912 <HAL_DMA_Abort_IT+0xee>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a5e      	ldr	r2, [pc, #376]	; (8001a10 <HAL_DMA_Abort_IT+0x1ec>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d038      	beq.n	800190c <HAL_DMA_Abort_IT+0xe8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a5d      	ldr	r2, [pc, #372]	; (8001a14 <HAL_DMA_Abort_IT+0x1f0>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d030      	beq.n	8001906 <HAL_DMA_Abort_IT+0xe2>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a5b      	ldr	r2, [pc, #364]	; (8001a18 <HAL_DMA_Abort_IT+0x1f4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d028      	beq.n	8001900 <HAL_DMA_Abort_IT+0xdc>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a53      	ldr	r2, [pc, #332]	; (8001a00 <HAL_DMA_Abort_IT+0x1dc>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d020      	beq.n	80018fa <HAL_DMA_Abort_IT+0xd6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a57      	ldr	r2, [pc, #348]	; (8001a1c <HAL_DMA_Abort_IT+0x1f8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_DMA_Abort_IT+0xd2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a56      	ldr	r2, [pc, #344]	; (8001a20 <HAL_DMA_Abort_IT+0x1fc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d012      	beq.n	80018f2 <HAL_DMA_Abort_IT+0xce>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a54      	ldr	r2, [pc, #336]	; (8001a24 <HAL_DMA_Abort_IT+0x200>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d00a      	beq.n	80018ec <HAL_DMA_Abort_IT+0xc8>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a53      	ldr	r2, [pc, #332]	; (8001a28 <HAL_DMA_Abort_IT+0x204>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d102      	bne.n	80018e6 <HAL_DMA_Abort_IT+0xc2>
 80018e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e4:	e01b      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 80018e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ea:	e018      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 80018ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f0:	e015      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 80018f2:	2310      	movs	r3, #16
 80018f4:	e013      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e011      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 80018fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018fe:	e00e      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 8001900:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001904:	e00b      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 8001906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190a:	e008      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 800190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001910:	e005      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 8001912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001916:	e002      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 8001918:	2310      	movs	r3, #16
 800191a:	e000      	b.n	800191e <HAL_DMA_Abort_IT+0xfa>
 800191c:	2301      	movs	r3, #1
 800191e:	4a43      	ldr	r2, [pc, #268]	; (8001a2c <HAL_DMA_Abort_IT+0x208>)
 8001920:	6053      	str	r3, [r2, #4]
 8001922:	e057      	b.n	80019d4 <HAL_DMA_Abort_IT+0x1b0>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a36      	ldr	r2, [pc, #216]	; (8001a04 <HAL_DMA_Abort_IT+0x1e0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d04f      	beq.n	80019ce <HAL_DMA_Abort_IT+0x1aa>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a35      	ldr	r2, [pc, #212]	; (8001a08 <HAL_DMA_Abort_IT+0x1e4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d048      	beq.n	80019ca <HAL_DMA_Abort_IT+0x1a6>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a33      	ldr	r2, [pc, #204]	; (8001a0c <HAL_DMA_Abort_IT+0x1e8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d040      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x1a0>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a32      	ldr	r2, [pc, #200]	; (8001a10 <HAL_DMA_Abort_IT+0x1ec>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d038      	beq.n	80019be <HAL_DMA_Abort_IT+0x19a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a30      	ldr	r2, [pc, #192]	; (8001a14 <HAL_DMA_Abort_IT+0x1f0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d030      	beq.n	80019b8 <HAL_DMA_Abort_IT+0x194>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <HAL_DMA_Abort_IT+0x1f4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d028      	beq.n	80019b2 <HAL_DMA_Abort_IT+0x18e>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a26      	ldr	r2, [pc, #152]	; (8001a00 <HAL_DMA_Abort_IT+0x1dc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d020      	beq.n	80019ac <HAL_DMA_Abort_IT+0x188>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <HAL_DMA_Abort_IT+0x1f8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d019      	beq.n	80019a8 <HAL_DMA_Abort_IT+0x184>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <HAL_DMA_Abort_IT+0x1fc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d012      	beq.n	80019a4 <HAL_DMA_Abort_IT+0x180>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <HAL_DMA_Abort_IT+0x200>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00a      	beq.n	800199e <HAL_DMA_Abort_IT+0x17a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <HAL_DMA_Abort_IT+0x204>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d102      	bne.n	8001998 <HAL_DMA_Abort_IT+0x174>
 8001992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001996:	e01b      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 8001998:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199c:	e018      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 800199e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a2:	e015      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 80019a4:	2310      	movs	r3, #16
 80019a6:	e013      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 80019a8:	2301      	movs	r3, #1
 80019aa:	e011      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 80019ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019b0:	e00e      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 80019b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019b6:	e00b      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 80019b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019bc:	e008      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 80019be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c2:	e005      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 80019c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019c8:	e002      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 80019ca:	2310      	movs	r3, #16
 80019cc:	e000      	b.n	80019d0 <HAL_DMA_Abort_IT+0x1ac>
 80019ce:	2301      	movs	r3, #1
 80019d0:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <HAL_DMA_Abort_IT+0x20c>)
 80019d2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4798      	blx	r3
    } 
  }
  return status;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40020080 	.word	0x40020080
 8001a04:	40020008 	.word	0x40020008
 8001a08:	4002001c 	.word	0x4002001c
 8001a0c:	40020030 	.word	0x40020030
 8001a10:	40020044 	.word	0x40020044
 8001a14:	40020058 	.word	0x40020058
 8001a18:	4002006c 	.word	0x4002006c
 8001a1c:	40020408 	.word	0x40020408
 8001a20:	4002041c 	.word	0x4002041c
 8001a24:	40020430 	.word	0x40020430
 8001a28:	40020444 	.word	0x40020444
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020000 	.word	0x40020000

08001a34 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	2204      	movs	r2, #4
 8001a52:	409a      	lsls	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80d6 	beq.w	8001c0a <HAL_DMA_IRQHandler+0x1d6>
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80d0 	beq.w	8001c0a <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0320 	and.w	r3, r3, #32
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d107      	bne.n	8001a88 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0204 	bic.w	r2, r2, #4
 8001a86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b9b      	ldr	r3, [pc, #620]	; (8001cfc <HAL_DMA_IRQHandler+0x2c8>)
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d958      	bls.n	8001b46 <HAL_DMA_IRQHandler+0x112>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a99      	ldr	r2, [pc, #612]	; (8001d00 <HAL_DMA_IRQHandler+0x2cc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d04f      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x10a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a98      	ldr	r2, [pc, #608]	; (8001d04 <HAL_DMA_IRQHandler+0x2d0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d048      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x106>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a96      	ldr	r2, [pc, #600]	; (8001d08 <HAL_DMA_IRQHandler+0x2d4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d040      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x100>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a95      	ldr	r2, [pc, #596]	; (8001d0c <HAL_DMA_IRQHandler+0x2d8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d038      	beq.n	8001b2e <HAL_DMA_IRQHandler+0xfa>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a93      	ldr	r2, [pc, #588]	; (8001d10 <HAL_DMA_IRQHandler+0x2dc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d030      	beq.n	8001b28 <HAL_DMA_IRQHandler+0xf4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_DMA_IRQHandler+0x2e0>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d028      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xee>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a89      	ldr	r2, [pc, #548]	; (8001cfc <HAL_DMA_IRQHandler+0x2c8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d020      	beq.n	8001b1c <HAL_DMA_IRQHandler+0xe8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a8e      	ldr	r2, [pc, #568]	; (8001d18 <HAL_DMA_IRQHandler+0x2e4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d019      	beq.n	8001b18 <HAL_DMA_IRQHandler+0xe4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a8c      	ldr	r2, [pc, #560]	; (8001d1c <HAL_DMA_IRQHandler+0x2e8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d012      	beq.n	8001b14 <HAL_DMA_IRQHandler+0xe0>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a8b      	ldr	r2, [pc, #556]	; (8001d20 <HAL_DMA_IRQHandler+0x2ec>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00a      	beq.n	8001b0e <HAL_DMA_IRQHandler+0xda>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a89      	ldr	r2, [pc, #548]	; (8001d24 <HAL_DMA_IRQHandler+0x2f0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d102      	bne.n	8001b08 <HAL_DMA_IRQHandler+0xd4>
 8001b02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b06:	e01b      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b0c:	e018      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b12:	e015      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	e013      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b18:	2304      	movs	r3, #4
 8001b1a:	e011      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b20:	e00e      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b26:	e00b      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b2c:	e008      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b32:	e005      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b38:	e002      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b3a:	2340      	movs	r3, #64	; 0x40
 8001b3c:	e000      	b.n	8001b40 <HAL_DMA_IRQHandler+0x10c>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	4a79      	ldr	r2, [pc, #484]	; (8001d28 <HAL_DMA_IRQHandler+0x2f4>)
 8001b42:	6053      	str	r3, [r2, #4]
 8001b44:	e057      	b.n	8001bf6 <HAL_DMA_IRQHandler+0x1c2>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6d      	ldr	r2, [pc, #436]	; (8001d00 <HAL_DMA_IRQHandler+0x2cc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d04f      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x1bc>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6b      	ldr	r2, [pc, #428]	; (8001d04 <HAL_DMA_IRQHandler+0x2d0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d048      	beq.n	8001bec <HAL_DMA_IRQHandler+0x1b8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a6a      	ldr	r2, [pc, #424]	; (8001d08 <HAL_DMA_IRQHandler+0x2d4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d040      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x1b2>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a68      	ldr	r2, [pc, #416]	; (8001d0c <HAL_DMA_IRQHandler+0x2d8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d038      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x1ac>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a67      	ldr	r2, [pc, #412]	; (8001d10 <HAL_DMA_IRQHandler+0x2dc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d030      	beq.n	8001bda <HAL_DMA_IRQHandler+0x1a6>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a65      	ldr	r2, [pc, #404]	; (8001d14 <HAL_DMA_IRQHandler+0x2e0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d028      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x1a0>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a5d      	ldr	r2, [pc, #372]	; (8001cfc <HAL_DMA_IRQHandler+0x2c8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d020      	beq.n	8001bce <HAL_DMA_IRQHandler+0x19a>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a61      	ldr	r2, [pc, #388]	; (8001d18 <HAL_DMA_IRQHandler+0x2e4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_DMA_IRQHandler+0x196>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a60      	ldr	r2, [pc, #384]	; (8001d1c <HAL_DMA_IRQHandler+0x2e8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d012      	beq.n	8001bc6 <HAL_DMA_IRQHandler+0x192>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a5e      	ldr	r2, [pc, #376]	; (8001d20 <HAL_DMA_IRQHandler+0x2ec>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x18c>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a5d      	ldr	r2, [pc, #372]	; (8001d24 <HAL_DMA_IRQHandler+0x2f0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d102      	bne.n	8001bba <HAL_DMA_IRQHandler+0x186>
 8001bb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bb8:	e01b      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001bba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bbe:	e018      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc4:	e015      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001bc6:	2340      	movs	r3, #64	; 0x40
 8001bc8:	e013      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e011      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001bce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bd2:	e00e      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001bd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bd8:	e00b      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001bda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bde:	e008      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001be0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001be4:	e005      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bea:	e002      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001bec:	2340      	movs	r3, #64	; 0x40
 8001bee:	e000      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x1be>
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	4a4e      	ldr	r2, [pc, #312]	; (8001d2c <HAL_DMA_IRQHandler+0x2f8>)
 8001bf4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f000 8136 	beq.w	8001e6c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c08:	e130      	b.n	8001e6c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	2202      	movs	r2, #2
 8001c10:	409a      	lsls	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 80f8 	beq.w	8001e0c <HAL_DMA_IRQHandler+0x3d8>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80f2 	beq.w	8001e0c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10b      	bne.n	8001c4e <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 020a 	bic.w	r2, r2, #10
 8001c44:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <HAL_DMA_IRQHandler+0x2c8>)
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d973      	bls.n	8001d42 <HAL_DMA_IRQHandler+0x30e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <HAL_DMA_IRQHandler+0x2cc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d06a      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x306>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_DMA_IRQHandler+0x2d0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d063      	beq.n	8001d36 <HAL_DMA_IRQHandler+0x302>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_DMA_IRQHandler+0x2d4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d05b      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x2fc>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_DMA_IRQHandler+0x2d8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d038      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x2c0>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a22      	ldr	r2, [pc, #136]	; (8001d10 <HAL_DMA_IRQHandler+0x2dc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d030      	beq.n	8001cee <HAL_DMA_IRQHandler+0x2ba>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a20      	ldr	r2, [pc, #128]	; (8001d14 <HAL_DMA_IRQHandler+0x2e0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d028      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x2b4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <HAL_DMA_IRQHandler+0x2c8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d020      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x2ae>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a1c      	ldr	r2, [pc, #112]	; (8001d18 <HAL_DMA_IRQHandler+0x2e4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_DMA_IRQHandler+0x2aa>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_DMA_IRQHandler+0x2e8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d012      	beq.n	8001cda <HAL_DMA_IRQHandler+0x2a6>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_DMA_IRQHandler+0x2ec>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x2a0>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_DMA_IRQHandler+0x2f0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d102      	bne.n	8001cce <HAL_DMA_IRQHandler+0x29a>
 8001cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ccc:	e036      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001cce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd2:	e033      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cd8:	e030      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e02e      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e02c      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	e029      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001ce8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cec:	e026      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf2:	e023      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf8:	e020      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001cfa:	bf00      	nop
 8001cfc:	40020080 	.word	0x40020080
 8001d00:	40020008 	.word	0x40020008
 8001d04:	4002001c 	.word	0x4002001c
 8001d08:	40020030 	.word	0x40020030
 8001d0c:	40020044 	.word	0x40020044
 8001d10:	40020058 	.word	0x40020058
 8001d14:	4002006c 	.word	0x4002006c
 8001d18:	40020408 	.word	0x40020408
 8001d1c:	4002041c 	.word	0x4002041c
 8001d20:	40020430 	.word	0x40020430
 8001d24:	40020444 	.word	0x40020444
 8001d28:	40020400 	.word	0x40020400
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d34:	e002      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001d36:	2320      	movs	r3, #32
 8001d38:	e000      	b.n	8001d3c <HAL_DMA_IRQHandler+0x308>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	4a4e      	ldr	r2, [pc, #312]	; (8001e78 <HAL_DMA_IRQHandler+0x444>)
 8001d3e:	6053      	str	r3, [r2, #4]
 8001d40:	e057      	b.n	8001df2 <HAL_DMA_IRQHandler+0x3be>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a4d      	ldr	r2, [pc, #308]	; (8001e7c <HAL_DMA_IRQHandler+0x448>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d04f      	beq.n	8001dec <HAL_DMA_IRQHandler+0x3b8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a4b      	ldr	r2, [pc, #300]	; (8001e80 <HAL_DMA_IRQHandler+0x44c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d048      	beq.n	8001de8 <HAL_DMA_IRQHandler+0x3b4>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a4a      	ldr	r2, [pc, #296]	; (8001e84 <HAL_DMA_IRQHandler+0x450>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d040      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x3ae>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a48      	ldr	r2, [pc, #288]	; (8001e88 <HAL_DMA_IRQHandler+0x454>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d038      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x3a8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <HAL_DMA_IRQHandler+0x458>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d030      	beq.n	8001dd6 <HAL_DMA_IRQHandler+0x3a2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a45      	ldr	r2, [pc, #276]	; (8001e90 <HAL_DMA_IRQHandler+0x45c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d028      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x39c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a44      	ldr	r2, [pc, #272]	; (8001e94 <HAL_DMA_IRQHandler+0x460>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d020      	beq.n	8001dca <HAL_DMA_IRQHandler+0x396>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a42      	ldr	r2, [pc, #264]	; (8001e98 <HAL_DMA_IRQHandler+0x464>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d019      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x392>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <HAL_DMA_IRQHandler+0x468>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d012      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x38e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a3f      	ldr	r2, [pc, #252]	; (8001ea0 <HAL_DMA_IRQHandler+0x46c>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00a      	beq.n	8001dbc <HAL_DMA_IRQHandler+0x388>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a3e      	ldr	r2, [pc, #248]	; (8001ea4 <HAL_DMA_IRQHandler+0x470>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d102      	bne.n	8001db6 <HAL_DMA_IRQHandler+0x382>
 8001db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db4:	e01b      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dba:	e018      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	e015      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e013      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e011      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001dca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dce:	e00e      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001dd0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dd4:	e00b      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001dd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dda:	e008      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001de0:	e005      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001de2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de6:	e002      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001de8:	2320      	movs	r3, #32
 8001dea:	e000      	b.n	8001dee <HAL_DMA_IRQHandler+0x3ba>
 8001dec:	2302      	movs	r3, #2
 8001dee:	4a2e      	ldr	r2, [pc, #184]	; (8001ea8 <HAL_DMA_IRQHandler+0x474>)
 8001df0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d034      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e0a:	e02f      	b.n	8001e6c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	2208      	movs	r2, #8
 8001e12:	409a      	lsls	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d028      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x43a>
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d023      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 020e 	bic.w	r2, r2, #14
 8001e34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f202 	lsl.w	r2, r1, r2
 8001e44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d004      	beq.n	8001e6e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
    }
  }
  return;
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
}
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020008 	.word	0x40020008
 8001e80:	4002001c 	.word	0x4002001c
 8001e84:	40020030 	.word	0x40020030
 8001e88:	40020044 	.word	0x40020044
 8001e8c:	40020058 	.word	0x40020058
 8001e90:	4002006c 	.word	0x4002006c
 8001e94:	40020080 	.word	0x40020080
 8001e98:	40020408 	.word	0x40020408
 8001e9c:	4002041c 	.word	0x4002041c
 8001ea0:	40020430 	.word	0x40020430
 8001ea4:	40020444 	.word	0x40020444
 8001ea8:	40020000 	.word	0x40020000

08001eac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b10      	cmp	r3, #16
 8001ed8:	d108      	bne.n	8001eec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001eea:	e007      	b.n	8001efc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	60da      	str	r2, [r3, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b08b      	sub	sp, #44	; 0x2c
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f16:	2300      	movs	r3, #0
 8001f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	e179      	b.n	8002210 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	f040 8168 	bne.w	800220a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4aa0      	ldr	r2, [pc, #640]	; (80021c0 <HAL_GPIO_Init+0x2b8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d05e      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f44:	4a9e      	ldr	r2, [pc, #632]	; (80021c0 <HAL_GPIO_Init+0x2b8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d875      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f4a:	4a9e      	ldr	r2, [pc, #632]	; (80021c4 <HAL_GPIO_Init+0x2bc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d058      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f50:	4a9c      	ldr	r2, [pc, #624]	; (80021c4 <HAL_GPIO_Init+0x2bc>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d86f      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f56:	4a9c      	ldr	r2, [pc, #624]	; (80021c8 <HAL_GPIO_Init+0x2c0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d052      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f5c:	4a9a      	ldr	r2, [pc, #616]	; (80021c8 <HAL_GPIO_Init+0x2c0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d869      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f62:	4a9a      	ldr	r2, [pc, #616]	; (80021cc <HAL_GPIO_Init+0x2c4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d04c      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f68:	4a98      	ldr	r2, [pc, #608]	; (80021cc <HAL_GPIO_Init+0x2c4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d863      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f6e:	4a98      	ldr	r2, [pc, #608]	; (80021d0 <HAL_GPIO_Init+0x2c8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d046      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
 8001f74:	4a96      	ldr	r2, [pc, #600]	; (80021d0 <HAL_GPIO_Init+0x2c8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d85d      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d82a      	bhi.n	8001fd4 <HAL_GPIO_Init+0xcc>
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d859      	bhi.n	8002036 <HAL_GPIO_Init+0x12e>
 8001f82:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <HAL_GPIO_Init+0x80>)
 8001f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f88:	08002003 	.word	0x08002003
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	08001fef 	.word	0x08001fef
 8001f94:	08002031 	.word	0x08002031
 8001f98:	08002037 	.word	0x08002037
 8001f9c:	08002037 	.word	0x08002037
 8001fa0:	08002037 	.word	0x08002037
 8001fa4:	08002037 	.word	0x08002037
 8001fa8:	08002037 	.word	0x08002037
 8001fac:	08002037 	.word	0x08002037
 8001fb0:	08002037 	.word	0x08002037
 8001fb4:	08002037 	.word	0x08002037
 8001fb8:	08002037 	.word	0x08002037
 8001fbc:	08002037 	.word	0x08002037
 8001fc0:	08002037 	.word	0x08002037
 8001fc4:	08002037 	.word	0x08002037
 8001fc8:	08002037 	.word	0x08002037
 8001fcc:	08001fe5 	.word	0x08001fe5
 8001fd0:	08001ff9 	.word	0x08001ff9
 8001fd4:	4a7f      	ldr	r2, [pc, #508]	; (80021d4 <HAL_GPIO_Init+0x2cc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fda:	e02c      	b.n	8002036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	623b      	str	r3, [r7, #32]
          break;
 8001fe2:	e029      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	623b      	str	r3, [r7, #32]
          break;
 8001fec:	e024      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	623b      	str	r3, [r7, #32]
          break;
 8001ff6:	e01f      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	623b      	str	r3, [r7, #32]
          break;
 8002000:	e01a      	b.n	8002038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800200a:	2304      	movs	r3, #4
 800200c:	623b      	str	r3, [r7, #32]
          break;
 800200e:	e013      	b.n	8002038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002018:	2308      	movs	r3, #8
 800201a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	611a      	str	r2, [r3, #16]
          break;
 8002022:	e009      	b.n	8002038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002024:	2308      	movs	r3, #8
 8002026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	615a      	str	r2, [r3, #20]
          break;
 800202e:	e003      	b.n	8002038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
          break;
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x130>
          break;
 8002036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	2bff      	cmp	r3, #255	; 0xff
 800203c:	d801      	bhi.n	8002042 <HAL_GPIO_Init+0x13a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	e001      	b.n	8002046 <HAL_GPIO_Init+0x13e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2bff      	cmp	r3, #255	; 0xff
 800204c:	d802      	bhi.n	8002054 <HAL_GPIO_Init+0x14c>
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	e002      	b.n	800205a <HAL_GPIO_Init+0x152>
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	3b08      	subs	r3, #8
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	210f      	movs	r1, #15
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	fa01 f303 	lsl.w	r3, r1, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	401a      	ands	r2, r3
 800206c:	6a39      	ldr	r1, [r7, #32]
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	431a      	orrs	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80c1 	beq.w	800220a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	4a52      	ldr	r2, [pc, #328]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6193      	str	r3, [r2, #24]
 8002094:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <HAL_GPIO_Init+0x2d0>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_GPIO_Init+0x2d4>)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a46      	ldr	r2, [pc, #280]	; (80021e0 <HAL_GPIO_Init+0x2d8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d01f      	beq.n	800210c <HAL_GPIO_Init+0x204>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a45      	ldr	r2, [pc, #276]	; (80021e4 <HAL_GPIO_Init+0x2dc>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d019      	beq.n	8002108 <HAL_GPIO_Init+0x200>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a44      	ldr	r2, [pc, #272]	; (80021e8 <HAL_GPIO_Init+0x2e0>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d013      	beq.n	8002104 <HAL_GPIO_Init+0x1fc>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a43      	ldr	r2, [pc, #268]	; (80021ec <HAL_GPIO_Init+0x2e4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00d      	beq.n	8002100 <HAL_GPIO_Init+0x1f8>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a42      	ldr	r2, [pc, #264]	; (80021f0 <HAL_GPIO_Init+0x2e8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d007      	beq.n	80020fc <HAL_GPIO_Init+0x1f4>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a41      	ldr	r2, [pc, #260]	; (80021f4 <HAL_GPIO_Init+0x2ec>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d101      	bne.n	80020f8 <HAL_GPIO_Init+0x1f0>
 80020f4:	2305      	movs	r3, #5
 80020f6:	e00a      	b.n	800210e <HAL_GPIO_Init+0x206>
 80020f8:	2306      	movs	r3, #6
 80020fa:	e008      	b.n	800210e <HAL_GPIO_Init+0x206>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e006      	b.n	800210e <HAL_GPIO_Init+0x206>
 8002100:	2303      	movs	r3, #3
 8002102:	e004      	b.n	800210e <HAL_GPIO_Init+0x206>
 8002104:	2302      	movs	r3, #2
 8002106:	e002      	b.n	800210e <HAL_GPIO_Init+0x206>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_GPIO_Init+0x206>
 800210c:	2300      	movs	r3, #0
 800210e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002110:	f002 0203 	and.w	r2, r2, #3
 8002114:	0092      	lsls	r2, r2, #2
 8002116:	4093      	lsls	r3, r2
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800211e:	492f      	ldr	r1, [pc, #188]	; (80021dc <HAL_GPIO_Init+0x2d4>)
 8002120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d006      	beq.n	8002146 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002138:	4b2f      	ldr	r3, [pc, #188]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	492e      	ldr	r1, [pc, #184]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e006      	b.n	8002154 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002146:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	43db      	mvns	r3, r3
 800214e:	492a      	ldr	r1, [pc, #168]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002150:	4013      	ands	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002160:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4924      	ldr	r1, [pc, #144]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]
 800216c:	e006      	b.n	800217c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800216e:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	43db      	mvns	r3, r3
 8002176:	4920      	ldr	r1, [pc, #128]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002178:	4013      	ands	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	491a      	ldr	r1, [pc, #104]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	43db      	mvns	r3, r3
 800219e:	4916      	ldr	r1, [pc, #88]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d025      	beq.n	80021fc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	4910      	ldr	r1, [pc, #64]	; (80021f8 <HAL_GPIO_Init+0x2f0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
 80021bc:	e025      	b.n	800220a <HAL_GPIO_Init+0x302>
 80021be:	bf00      	nop
 80021c0:	10320000 	.word	0x10320000
 80021c4:	10310000 	.word	0x10310000
 80021c8:	10220000 	.word	0x10220000
 80021cc:	10210000 	.word	0x10210000
 80021d0:	10120000 	.word	0x10120000
 80021d4:	10110000 	.word	0x10110000
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40010800 	.word	0x40010800
 80021e4:	40010c00 	.word	0x40010c00
 80021e8:	40011000 	.word	0x40011000
 80021ec:	40011400 	.word	0x40011400
 80021f0:	40011800 	.word	0x40011800
 80021f4:	40011c00 	.word	0x40011c00
 80021f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_GPIO_Init+0x324>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	43db      	mvns	r3, r3
 8002204:	4909      	ldr	r1, [pc, #36]	; (800222c <HAL_GPIO_Init+0x324>)
 8002206:	4013      	ands	r3, r2
 8002208:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	3301      	adds	r3, #1
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	fa22 f303 	lsr.w	r3, r2, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	f47f ae7e 	bne.w	8001f1c <HAL_GPIO_Init+0x14>
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	372c      	adds	r7, #44	; 0x2c
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40010400 	.word	0x40010400

08002230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002240:	787b      	ldrb	r3, [r7, #1]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002246:	887a      	ldrh	r2, [r7, #2]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800224c:	e003      	b.n	8002256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	041a      	lsls	r2, r3, #16
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe f9e6 	bl	8000650 <HAL_GPIO_EXTI_Callback>
  }
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40010400 	.word	0x40010400

08002290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e12b      	b.n	80024fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe f8f6 	bl	80004a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2224      	movs	r2, #36	; 0x24
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022f4:	f000 fce4 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 80022f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	4a81      	ldr	r2, [pc, #516]	; (8002504 <HAL_I2C_Init+0x274>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d807      	bhi.n	8002314 <HAL_I2C_Init+0x84>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a80      	ldr	r2, [pc, #512]	; (8002508 <HAL_I2C_Init+0x278>)
 8002308:	4293      	cmp	r3, r2
 800230a:	bf94      	ite	ls
 800230c:	2301      	movls	r3, #1
 800230e:	2300      	movhi	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	e006      	b.n	8002322 <HAL_I2C_Init+0x92>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4a7d      	ldr	r2, [pc, #500]	; (800250c <HAL_I2C_Init+0x27c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	bf94      	ite	ls
 800231c:	2301      	movls	r3, #1
 800231e:	2300      	movhi	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0e7      	b.n	80024fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a78      	ldr	r2, [pc, #480]	; (8002510 <HAL_I2C_Init+0x280>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0c9b      	lsrs	r3, r3, #18
 8002334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a6a      	ldr	r2, [pc, #424]	; (8002504 <HAL_I2C_Init+0x274>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d802      	bhi.n	8002364 <HAL_I2C_Init+0xd4>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	3301      	adds	r3, #1
 8002362:	e009      	b.n	8002378 <HAL_I2C_Init+0xe8>
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	4a69      	ldr	r2, [pc, #420]	; (8002514 <HAL_I2C_Init+0x284>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	3301      	adds	r3, #1
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	430b      	orrs	r3, r1
 800237e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800238a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	495c      	ldr	r1, [pc, #368]	; (8002504 <HAL_I2C_Init+0x274>)
 8002394:	428b      	cmp	r3, r1
 8002396:	d819      	bhi.n	80023cc <HAL_I2C_Init+0x13c>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e59      	subs	r1, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023a6:	1c59      	adds	r1, r3, #1
 80023a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80023ac:	400b      	ands	r3, r1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00a      	beq.n	80023c8 <HAL_I2C_Init+0x138>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e59      	subs	r1, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c0:	3301      	adds	r3, #1
 80023c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c6:	e051      	b.n	800246c <HAL_I2C_Init+0x1dc>
 80023c8:	2304      	movs	r3, #4
 80023ca:	e04f      	b.n	800246c <HAL_I2C_Init+0x1dc>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d111      	bne.n	80023f8 <HAL_I2C_Init+0x168>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e58      	subs	r0, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	440b      	add	r3, r1
 80023e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e6:	3301      	adds	r3, #1
 80023e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf0c      	ite	eq
 80023f0:	2301      	moveq	r3, #1
 80023f2:	2300      	movne	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e012      	b.n	800241e <HAL_I2C_Init+0x18e>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	1e58      	subs	r0, r3, #1
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	0099      	lsls	r1, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	fbb0 f3f3 	udiv	r3, r0, r3
 800240e:	3301      	adds	r3, #1
 8002410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Init+0x196>
 8002422:	2301      	movs	r3, #1
 8002424:	e022      	b.n	800246c <HAL_I2C_Init+0x1dc>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10e      	bne.n	800244c <HAL_I2C_Init+0x1bc>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1e58      	subs	r0, r3, #1
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	460b      	mov	r3, r1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	440b      	add	r3, r1
 800243c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002440:	3301      	adds	r3, #1
 8002442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800244a:	e00f      	b.n	800246c <HAL_I2C_Init+0x1dc>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1e58      	subs	r0, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	0099      	lsls	r1, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002462:	3301      	adds	r3, #1
 8002464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	6809      	ldr	r1, [r1, #0]
 8002470:	4313      	orrs	r3, r2
 8002472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69da      	ldr	r2, [r3, #28]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800249a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6911      	ldr	r1, [r2, #16]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68d2      	ldr	r2, [r2, #12]
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	430b      	orrs	r3, r1
 80024ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	000186a0 	.word	0x000186a0
 8002508:	001e847f 	.word	0x001e847f
 800250c:	003d08ff 	.word	0x003d08ff
 8002510:	431bde83 	.word	0x431bde83
 8002514:	10624dd3 	.word	0x10624dd3

08002518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e26c      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8087 	beq.w	8002646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002538:	4b92      	ldr	r3, [pc, #584]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b04      	cmp	r3, #4
 8002542:	d00c      	beq.n	800255e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002544:	4b8f      	ldr	r3, [pc, #572]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b08      	cmp	r3, #8
 800254e:	d112      	bne.n	8002576 <HAL_RCC_OscConfig+0x5e>
 8002550:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d10b      	bne.n	8002576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255e:	4b89      	ldr	r3, [pc, #548]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d06c      	beq.n	8002644 <HAL_RCC_OscConfig+0x12c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d168      	bne.n	8002644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e246      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x76>
 8002580:	4b80      	ldr	r3, [pc, #512]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a7f      	ldr	r2, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e02e      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x98>
 8002596:	4b7b      	ldr	r3, [pc, #492]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7a      	ldr	r2, [pc, #488]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b78      	ldr	r3, [pc, #480]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a77      	ldr	r2, [pc, #476]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0xbc>
 80025ba:	4b72      	ldr	r3, [pc, #456]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a71      	ldr	r2, [pc, #452]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b6f      	ldr	r3, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6e      	ldr	r2, [pc, #440]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xd4>
 80025d4:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7fe feee 	bl	80013d4 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe feea 	bl	80013d4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e1fa      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b5d      	ldr	r3, [pc, #372]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xe4>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7fe feda 	bl	80013d4 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe fed6 	bl	80013d4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1e6      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x10c>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d063      	beq.n	800271a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002652:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800265e:	4b49      	ldr	r3, [pc, #292]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x18c>
 800266a:	4b46      	ldr	r3, [pc, #280]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d116      	bne.n	80026a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d005      	beq.n	800268e <HAL_RCC_OscConfig+0x176>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1ba      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	4939      	ldr	r1, [pc, #228]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	e03a      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d020      	beq.n	80026ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ac:	4b36      	ldr	r3, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe fe8f 	bl	80013d4 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ba:	f7fe fe8b 	bl	80013d4 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e19b      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026cc:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d8:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4927      	ldr	r1, [pc, #156]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
 80026ec:	e015      	b.n	800271a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_OscConfig+0x270>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fe6e 	bl	80013d4 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe fe6a 	bl	80013d4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e17a      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03a      	beq.n	800279c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d019      	beq.n	8002762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800272e:	4b17      	ldr	r3, [pc, #92]	; (800278c <HAL_RCC_OscConfig+0x274>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002734:	f7fe fe4e 	bl	80013d4 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe fe4a 	bl	80013d4 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e15a      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCC_OscConfig+0x26c>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800275a:	2001      	movs	r0, #1
 800275c:	f000 fad8 	bl	8002d10 <RCC_Delay>
 8002760:	e01c      	b.n	800279c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_RCC_OscConfig+0x274>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002768:	f7fe fe34 	bl	80013d4 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276e:	e00f      	b.n	8002790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe fe30 	bl	80013d4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d908      	bls.n	8002790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e140      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	42420000 	.word	0x42420000
 800278c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	4b9e      	ldr	r3, [pc, #632]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1e9      	bne.n	8002770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80a6 	beq.w	80028f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b97      	ldr	r3, [pc, #604]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10d      	bne.n	80027d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	4b94      	ldr	r3, [pc, #592]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a93      	ldr	r2, [pc, #588]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c4:	61d3      	str	r3, [r2, #28]
 80027c6:	4b91      	ldr	r3, [pc, #580]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d2:	2301      	movs	r3, #1
 80027d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d6:	4b8e      	ldr	r3, [pc, #568]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d118      	bne.n	8002814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e2:	4b8b      	ldr	r3, [pc, #556]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a8a      	ldr	r2, [pc, #552]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ee:	f7fe fdf1 	bl	80013d4 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f6:	f7fe fded 	bl	80013d4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b64      	cmp	r3, #100	; 0x64
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e0fd      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <HAL_RCC_OscConfig+0x4f8>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d106      	bne.n	800282a <HAL_RCC_OscConfig+0x312>
 800281c:	4b7b      	ldr	r3, [pc, #492]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4a7a      	ldr	r2, [pc, #488]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6213      	str	r3, [r2, #32]
 8002828:	e02d      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10c      	bne.n	800284c <HAL_RCC_OscConfig+0x334>
 8002832:	4b76      	ldr	r3, [pc, #472]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a75      	ldr	r2, [pc, #468]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	4b73      	ldr	r3, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a72      	ldr	r2, [pc, #456]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6213      	str	r3, [r2, #32]
 800284a:	e01c      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b05      	cmp	r3, #5
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0x356>
 8002854:	4b6d      	ldr	r3, [pc, #436]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4a6c      	ldr	r2, [pc, #432]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6213      	str	r3, [r2, #32]
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002866:	f043 0301 	orr.w	r3, r3, #1
 800286a:	6213      	str	r3, [r2, #32]
 800286c:	e00b      	b.n	8002886 <HAL_RCC_OscConfig+0x36e>
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	4b64      	ldr	r3, [pc, #400]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002880:	f023 0304 	bic.w	r3, r3, #4
 8002884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d015      	beq.n	80028ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288e:	f7fe fda1 	bl	80013d4 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe fd9d 	bl	80013d4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e0ab      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ac:	4b57      	ldr	r3, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0ee      	beq.n	8002896 <HAL_RCC_OscConfig+0x37e>
 80028b8:	e014      	b.n	80028e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fd8b 	bl	80013d4 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe fd87 	bl	80013d4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e095      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028d8:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ee      	bne.n	80028c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d105      	bne.n	80028f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ea:	4b48      	ldr	r3, [pc, #288]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a47      	ldr	r2, [pc, #284]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8081 	beq.w	8002a02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002900:	4b42      	ldr	r3, [pc, #264]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b08      	cmp	r3, #8
 800290a:	d061      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d146      	bne.n	80029a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <HAL_RCC_OscConfig+0x4fc>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7fe fd5b 	bl	80013d4 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7fe fd57 	bl	80013d4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e067      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002948:	d108      	bne.n	800295c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800294a:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	492d      	ldr	r1, [pc, #180]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a19      	ldr	r1, [r3, #32]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	430b      	orrs	r3, r1
 800296e:	4927      	ldr	r1, [pc, #156]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_RCC_OscConfig+0x4fc>)
 8002976:	2201      	movs	r2, #1
 8002978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe fd2b 	bl	80013d4 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7fe fd27 	bl	80013d4 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e037      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x46a>
 80029a0:	e02f      	b.n	8002a02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b1c      	ldr	r3, [pc, #112]	; (8002a14 <HAL_RCC_OscConfig+0x4fc>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe fd14 	bl	80013d4 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe fd10 	bl	80013d4 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e020      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x498>
 80029ce:	e018      	b.n	8002a02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e013      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x4f4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42420060 	.word	0x42420060

08002a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d0      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 0207 	bic.w	r2, r3, #7
 8002a42:	4965      	ldr	r1, [pc, #404]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b8      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a74:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	494d      	ldr	r1, [pc, #308]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d040      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e073      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4936      	ldr	r1, [pc, #216]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b08:	f7fe fc64 	bl	80013d4 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe fc60 	bl	80013d4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e053      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d210      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0207 	bic.w	r2, r3, #7
 8002b4e:	4922      	ldr	r1, [pc, #136]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e032      	b.n	8002bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4916      	ldr	r1, [pc, #88]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	490e      	ldr	r1, [pc, #56]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba6:	f000 f821 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	490a      	ldr	r1, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1cc>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1d0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe fbc2 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40022000 	.word	0x40022000
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	080046b8 	.word	0x080046b8
 8002be4:	20000004 	.word	0x20000004
 8002be8:	20000008 	.word	0x20000008

08002bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	b490      	push	{r4, r7}
 8002bee:	b08a      	sub	sp, #40	; 0x28
 8002bf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bf4:	1d3c      	adds	r4, r7, #4
 8002bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bfc:	f240 2301 	movw	r3, #513	; 0x201
 8002c00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0e:	2300      	movs	r3, #0
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d002      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x40>
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x46>
 8002c2a:	e02d      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c2e:	623b      	str	r3, [r7, #32]
      break;
 8002c30:	e02d      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c3e:	4413      	add	r3, r2
 8002c40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0c5b      	lsrs	r3, r3, #17
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c5e:	4413      	add	r3, r2
 8002c60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a0e      	ldr	r2, [pc, #56]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c6a:	fb02 f203 	mul.w	r2, r2, r3
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	e004      	b.n	8002c82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	623b      	str	r3, [r7, #32]
      break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c8a:	623b      	str	r3, [r7, #32]
      break;
 8002c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc90      	pop	{r4, r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	0800442c 	.word	0x0800442c
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	007a1200 	.word	0x007a1200
 8002ca8:	003d0900 	.word	0x003d0900

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000004 	.word	0x20000004

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cc4:	f7ff fff2 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	080046c8 	.word	0x080046c8

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cec:	f7ff ffde 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0adb      	lsrs	r3, r3, #11
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	4903      	ldr	r1, [pc, #12]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	080046c8 	.word	0x080046c8

08002d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d18:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <RCC_Delay+0x34>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <RCC_Delay+0x38>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0a5b      	lsrs	r3, r3, #9
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d2c:	bf00      	nop
  }
  while (Delay --);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	1e5a      	subs	r2, r3, #1
 8002d32:	60fa      	str	r2, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f9      	bne.n	8002d2c <RCC_Delay+0x1c>
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	20000004 	.word	0x20000004
 8002d48:	10624dd3 	.word	0x10624dd3

08002d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e076      	b.n	8002e4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d108      	bne.n	8002d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6e:	d009      	beq.n	8002d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	61da      	str	r2, [r3, #28]
 8002d76:	e005      	b.n	8002d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fe f84c 	bl	8000e3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	ea42 0103 	orr.w	r1, r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	0c1a      	lsrs	r2, r3, #16
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f002 0204 	and.w	r2, r2, #4
 8002e2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_SPI_TransmitReceive_DMA+0x20>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e0e3      	b.n	800303c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e82:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002e8a:	7dbb      	ldrb	r3, [r7, #22]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d00d      	beq.n	8002eac <HAL_SPI_TransmitReceive_DMA+0x58>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e96:	d106      	bne.n	8002ea6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8002ea0:	7dbb      	ldrb	r3, [r7, #22]
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d002      	beq.n	8002eac <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eaa:	e0c2      	b.n	8003032 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_TransmitReceive_DMA+0x6a>
 8002eb8:	887b      	ldrh	r3, [r7, #2]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d102      	bne.n	8002ec4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ec2:	e0b6      	b.n	8003032 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d003      	beq.n	8002ed8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2205      	movs	r2, #5
 8002ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	887a      	ldrh	r2, [r7, #2]
 8002ee8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	887a      	ldrh	r2, [r7, #2]
 8002eee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	887a      	ldrh	r2, [r7, #2]
 8002efa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d108      	bne.n	8002f2c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	4a49      	ldr	r2, [pc, #292]	; (8003044 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	4a48      	ldr	r2, [pc, #288]	; (8003048 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8002f28:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2a:	e007      	b.n	8002f3c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f30:	4a46      	ldr	r2, [pc, #280]	; (800304c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f38:	4a45      	ldr	r2, [pc, #276]	; (8003050 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	4a44      	ldr	r2, [pc, #272]	; (8003054 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f48:	2200      	movs	r2, #0
 8002f4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	330c      	adds	r3, #12
 8002f56:	4619      	mov	r1, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002f64:	f7fe fbc4 	bl	80016f0 <HAL_DMA_Start_IT>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00c      	beq.n	8002f88 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f72:	f043 0210 	orr.w	r2, r3, #16
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002f86:	e054      	b.n	8003032 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	330c      	adds	r3, #12
 8002fc8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002fd0:	f7fe fb8e 	bl	80016f0 <HAL_DMA_Start_IT>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fde:	f043 0210 	orr.w	r2, r3, #16
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8002ff2:	e01e      	b.n	8003032 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffe:	2b40      	cmp	r3, #64	; 0x40
 8003000:	d007      	beq.n	8003012 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003010:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0220 	orr.w	r2, r2, #32
 8003020:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 0202 	orr.w	r2, r2, #2
 8003030:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	08003421 	.word	0x08003421
 8003048:	080032ed 	.word	0x080032ed
 800304c:	0800343d 	.word	0x0800343d
 8003050:	08003393 	.word	0x08003393
 8003054:	08003459 	.word	0x08003459

08003058 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00f      	beq.n	800308c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fb9c 	bl	80017ae <HAL_DMA_Abort>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00f      	beq.n	80030b4 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	4618      	mov	r0, r3
 800309a:	f7fe fb88 	bl	80017ae <HAL_DMA_Abort>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	f043 0210 	orr.w	r2, r3, #16
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0203 	bic.w	r2, r2, #3
 80030c2:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10f      	bne.n	800311c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4798      	blx	r3
    return;
 800311a:	e0be      	b.n	800329a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_SPI_IRQHandler+0x66>
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	09db      	lsrs	r3, r3, #7
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d004      	beq.n	800313e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
    return;
 800313c:	e0ad      	b.n	800329a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_SPI_IRQHandler+0x80>
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80a1 	beq.w	800329a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 809a 	beq.w	800329a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d023      	beq.n	80031ba <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b03      	cmp	r3, #3
 800317c:	d011      	beq.n	80031a2 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	f043 0204 	orr.w	r2, r3, #4
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	e00b      	b.n	80031ba <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	693b      	ldr	r3, [r7, #16]
        return;
 80031b8:	e06f      	b.n	800329a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	095b      	lsrs	r3, r3, #5
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d014      	beq.n	80031f0 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ca:	f043 0201 	orr.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d04f      	beq.n	8003298 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003206:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <HAL_SPI_IRQHandler+0x14c>
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d034      	beq.n	800328e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0203 	bic.w	r2, r2, #3
 8003232:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d011      	beq.n	8003260 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003240:	4a17      	ldr	r2, [pc, #92]	; (80032a0 <HAL_SPI_IRQHandler+0x1c8>)
 8003242:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe faeb 	bl	8001824 <HAL_DMA_Abort_IT>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	2b00      	cmp	r3, #0
 8003266:	d016      	beq.n	8003296 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800326c:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <HAL_SPI_IRQHandler+0x1c8>)
 800326e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe fad5 	bl	8001824 <HAL_DMA_Abort_IT>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003284:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800328c:	e003      	b.n	8003296 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f823 	bl	80032da <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003294:	e000      	b.n	8003298 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003296:	bf00      	nop
    return;
 8003298:	bf00      	nop
  }
}
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	08003499 	.word	0x08003499

080032a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bc80      	pop	{r7}
 80032b4:	4770      	bx	lr

080032b6 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr

080032c8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fa:	f7fe f86b 	bl	80013d4 <HAL_GetTick>
 80032fe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d03b      	beq.n	8003386 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0220 	bic.w	r2, r2, #32
 800331c:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10d      	bne.n	8003342 <SPI_DMAReceiveCplt+0x56>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800332e:	d108      	bne.n	8003342 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0203 	bic.w	r2, r2, #3
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	e007      	b.n	8003352 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	2164      	movs	r1, #100	; 0x64
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f93a 	bl	80035d0 <SPI_EndRxTransaction>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff ffab 	bl	80032da <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003384:	e002      	b.n	800338c <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f7ff ff8c 	bl	80032a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033a0:	f7fe f818 	bl	80013d4 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d02f      	beq.n	8003414 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0220 	bic.w	r2, r2, #32
 80033c2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	2164      	movs	r1, #100	; 0x64
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f953 	bl	8003674 <SPI_EndRxTxTransaction>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f043 0220 	orr.w	r2, r3, #32
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0203 	bic.w	r2, r2, #3
 80033ee:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff ff64 	bl	80032da <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003412:	e002      	b.n	800341a <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7fd f927 	bl	8000668 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff ff41 	bl	80032b6 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7ff ff3c 	bl	80032c8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003450:	bf00      	nop
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0203 	bic.w	r2, r2, #3
 8003474:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff ff25 	bl	80032da <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff ff11 	bl	80032da <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034b8:	bf00      	nop
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034d0:	f7fd ff80 	bl	80013d4 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	4413      	add	r3, r2
 80034de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034e0:	f7fd ff78 	bl	80013d4 <HAL_GetTick>
 80034e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034e6:	4b39      	ldr	r3, [pc, #228]	; (80035cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	015b      	lsls	r3, r3, #5
 80034ec:	0d1b      	lsrs	r3, r3, #20
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034f6:	e054      	b.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d050      	beq.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003500:	f7fd ff68 	bl	80013d4 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	429a      	cmp	r2, r3
 800350e:	d902      	bls.n	8003516 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d13d      	bne.n	8003592 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003524:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d111      	bne.n	8003554 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003538:	d004      	beq.n	8003544 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003542:	d107      	bne.n	8003554 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003552:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355c:	d10f      	bne.n	800357e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800357c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e017      	b.n	80035c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3b01      	subs	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d19b      	bne.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000004 	.word	0x20000004

080035d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e4:	d111      	bne.n	800360a <SPI_EndRxTransaction+0x3a>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ee:	d004      	beq.n	80035fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f8:	d107      	bne.n	800360a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003608:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003612:	d117      	bne.n	8003644 <SPI_EndRxTransaction+0x74>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361c:	d112      	bne.n	8003644 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2200      	movs	r2, #0
 8003626:	2101      	movs	r1, #1
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ff49 	bl	80034c0 <SPI_WaitFlagStateUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d01a      	beq.n	800366a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e013      	b.n	800366c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2200      	movs	r2, #0
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff ff36 	bl	80034c0 <SPI_WaitFlagStateUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e000      	b.n	800366c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	2200      	movs	r2, #0
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff ff18 	bl	80034c0 <SPI_WaitFlagStateUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369a:	f043 0220 	orr.w	r2, r3, #32
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e000      	b.n	80036a8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e03f      	b.n	8003742 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fd fd4a 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	; 0x24
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f905 	bl	8003904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08a      	sub	sp, #40	; 0x28
 800374e:	af02      	add	r7, sp, #8
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	d17c      	bne.n	8003864 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_UART_Transmit+0x2c>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e075      	b.n	8003866 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UART_Transmit+0x3e>
 8003784:	2302      	movs	r3, #2
 8003786:	e06e      	b.n	8003866 <HAL_UART_Transmit+0x11c>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2221      	movs	r2, #33	; 0x21
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800379e:	f7fd fe19 	bl	80013d4 <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d108      	bne.n	80037cc <HAL_UART_Transmit+0x82>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e003      	b.n	80037d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037dc:	e02a      	b.n	8003834 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f840 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e036      	b.n	8003866 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800380c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	3302      	adds	r3, #2
 8003812:	61bb      	str	r3, [r7, #24]
 8003814:	e007      	b.n	8003826 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	3301      	adds	r3, #1
 8003824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1cf      	bne.n	80037de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	2140      	movs	r1, #64	; 0x40
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f810 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e006      	b.n	8003866 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e000      	b.n	8003866 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387e:	e02c      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003886:	d028      	beq.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <UART_WaitOnFlagUntilTimeout+0x30>
 800388e:	f7fd fda1 	bl	80013d4 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	429a      	cmp	r2, r3
 800389c:	d21d      	bcs.n	80038da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e00f      	b.n	80038fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4013      	ands	r3, r2
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	bf0c      	ite	eq
 80038ea:	2301      	moveq	r3, #1
 80038ec:	2300      	movne	r3, #0
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d0c3      	beq.n	8003880 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800393e:	f023 030c 	bic.w	r3, r3, #12
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	430b      	orrs	r3, r1
 800394a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2c      	ldr	r2, [pc, #176]	; (8003a18 <UART_SetConfig+0x114>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800396c:	f7ff f9bc 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	e002      	b.n	800397a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003974:	f7ff f9a4 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8003978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009a      	lsls	r2, r3, #2
 8003984:	441a      	add	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003990:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <UART_SetConfig+0x118>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	095b      	lsrs	r3, r3, #5
 8003998:	0119      	lsls	r1, r3, #4
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009a      	lsls	r2, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <UART_SetConfig+0x118>)
 80039b2:	fba3 0302 	umull	r0, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	2064      	movs	r0, #100	; 0x64
 80039ba:	fb00 f303 	mul.w	r3, r0, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	3332      	adds	r3, #50	; 0x32
 80039c4:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <UART_SetConfig+0x118>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d0:	4419      	add	r1, r3
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009a      	lsls	r2, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <UART_SetConfig+0x118>)
 80039ea:	fba3 0302 	umull	r0, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2064      	movs	r0, #100	; 0x64
 80039f2:	fb00 f303 	mul.w	r3, r0, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	3332      	adds	r3, #50	; 0x32
 80039fc:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <UART_SetConfig+0x118>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40013800 	.word	0x40013800
 8003a1c:	51eb851f 	.word	0x51eb851f

08003a20 <__errno>:
 8003a20:	4b01      	ldr	r3, [pc, #4]	; (8003a28 <__errno+0x8>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000010 	.word	0x20000010

08003a2c <__libc_init_array>:
 8003a2c:	b570      	push	{r4, r5, r6, lr}
 8003a2e:	2600      	movs	r6, #0
 8003a30:	4d0c      	ldr	r5, [pc, #48]	; (8003a64 <__libc_init_array+0x38>)
 8003a32:	4c0d      	ldr	r4, [pc, #52]	; (8003a68 <__libc_init_array+0x3c>)
 8003a34:	1b64      	subs	r4, r4, r5
 8003a36:	10a4      	asrs	r4, r4, #2
 8003a38:	42a6      	cmp	r6, r4
 8003a3a:	d109      	bne.n	8003a50 <__libc_init_array+0x24>
 8003a3c:	f000 fc6a 	bl	8004314 <_init>
 8003a40:	2600      	movs	r6, #0
 8003a42:	4d0a      	ldr	r5, [pc, #40]	; (8003a6c <__libc_init_array+0x40>)
 8003a44:	4c0a      	ldr	r4, [pc, #40]	; (8003a70 <__libc_init_array+0x44>)
 8003a46:	1b64      	subs	r4, r4, r5
 8003a48:	10a4      	asrs	r4, r4, #2
 8003a4a:	42a6      	cmp	r6, r4
 8003a4c:	d105      	bne.n	8003a5a <__libc_init_array+0x2e>
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
 8003a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a54:	4798      	blx	r3
 8003a56:	3601      	adds	r6, #1
 8003a58:	e7ee      	b.n	8003a38 <__libc_init_array+0xc>
 8003a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5e:	4798      	blx	r3
 8003a60:	3601      	adds	r6, #1
 8003a62:	e7f2      	b.n	8003a4a <__libc_init_array+0x1e>
 8003a64:	08004704 	.word	0x08004704
 8003a68:	08004704 	.word	0x08004704
 8003a6c:	08004704 	.word	0x08004704
 8003a70:	08004708 	.word	0x08004708

08003a74 <memcmp>:
 8003a74:	b530      	push	{r4, r5, lr}
 8003a76:	2400      	movs	r4, #0
 8003a78:	3901      	subs	r1, #1
 8003a7a:	42a2      	cmp	r2, r4
 8003a7c:	d101      	bne.n	8003a82 <memcmp+0xe>
 8003a7e:	2000      	movs	r0, #0
 8003a80:	e005      	b.n	8003a8e <memcmp+0x1a>
 8003a82:	5d03      	ldrb	r3, [r0, r4]
 8003a84:	3401      	adds	r4, #1
 8003a86:	5d0d      	ldrb	r5, [r1, r4]
 8003a88:	42ab      	cmp	r3, r5
 8003a8a:	d0f6      	beq.n	8003a7a <memcmp+0x6>
 8003a8c:	1b58      	subs	r0, r3, r5
 8003a8e:	bd30      	pop	{r4, r5, pc}

08003a90 <memcpy>:
 8003a90:	440a      	add	r2, r1
 8003a92:	4291      	cmp	r1, r2
 8003a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a98:	d100      	bne.n	8003a9c <memcpy+0xc>
 8003a9a:	4770      	bx	lr
 8003a9c:	b510      	push	{r4, lr}
 8003a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003aa2:	4291      	cmp	r1, r2
 8003aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aa8:	d1f9      	bne.n	8003a9e <memcpy+0xe>
 8003aaa:	bd10      	pop	{r4, pc}

08003aac <memset>:
 8003aac:	4603      	mov	r3, r0
 8003aae:	4402      	add	r2, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <_vsiprintf_r>:
 8003abc:	b500      	push	{lr}
 8003abe:	b09b      	sub	sp, #108	; 0x6c
 8003ac0:	9100      	str	r1, [sp, #0]
 8003ac2:	9104      	str	r1, [sp, #16]
 8003ac4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ac8:	9105      	str	r1, [sp, #20]
 8003aca:	9102      	str	r1, [sp, #8]
 8003acc:	4905      	ldr	r1, [pc, #20]	; (8003ae4 <_vsiprintf_r+0x28>)
 8003ace:	9103      	str	r1, [sp, #12]
 8003ad0:	4669      	mov	r1, sp
 8003ad2:	f000 f86f 	bl	8003bb4 <_svfiprintf_r>
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	9b00      	ldr	r3, [sp, #0]
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	b01b      	add	sp, #108	; 0x6c
 8003ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ae2:	bf00      	nop
 8003ae4:	ffff0208 	.word	0xffff0208

08003ae8 <vsiprintf>:
 8003ae8:	4613      	mov	r3, r2
 8003aea:	460a      	mov	r2, r1
 8003aec:	4601      	mov	r1, r0
 8003aee:	4802      	ldr	r0, [pc, #8]	; (8003af8 <vsiprintf+0x10>)
 8003af0:	6800      	ldr	r0, [r0, #0]
 8003af2:	f7ff bfe3 	b.w	8003abc <_vsiprintf_r>
 8003af6:	bf00      	nop
 8003af8:	20000010 	.word	0x20000010

08003afc <__ssputs_r>:
 8003afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b00:	688e      	ldr	r6, [r1, #8]
 8003b02:	4682      	mov	sl, r0
 8003b04:	429e      	cmp	r6, r3
 8003b06:	460c      	mov	r4, r1
 8003b08:	4690      	mov	r8, r2
 8003b0a:	461f      	mov	r7, r3
 8003b0c:	d838      	bhi.n	8003b80 <__ssputs_r+0x84>
 8003b0e:	898a      	ldrh	r2, [r1, #12]
 8003b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b14:	d032      	beq.n	8003b7c <__ssputs_r+0x80>
 8003b16:	6825      	ldr	r5, [r4, #0]
 8003b18:	6909      	ldr	r1, [r1, #16]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	eba5 0901 	sub.w	r9, r5, r1
 8003b20:	6965      	ldr	r5, [r4, #20]
 8003b22:	444b      	add	r3, r9
 8003b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b2c:	106d      	asrs	r5, r5, #1
 8003b2e:	429d      	cmp	r5, r3
 8003b30:	bf38      	it	cc
 8003b32:	461d      	movcc	r5, r3
 8003b34:	0553      	lsls	r3, r2, #21
 8003b36:	d531      	bpl.n	8003b9c <__ssputs_r+0xa0>
 8003b38:	4629      	mov	r1, r5
 8003b3a:	f000 fb45 	bl	80041c8 <_malloc_r>
 8003b3e:	4606      	mov	r6, r0
 8003b40:	b950      	cbnz	r0, 8003b58 <__ssputs_r+0x5c>
 8003b42:	230c      	movs	r3, #12
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295
 8003b48:	f8ca 3000 	str.w	r3, [sl]
 8003b4c:	89a3      	ldrh	r3, [r4, #12]
 8003b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b52:	81a3      	strh	r3, [r4, #12]
 8003b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b58:	464a      	mov	r2, r9
 8003b5a:	6921      	ldr	r1, [r4, #16]
 8003b5c:	f7ff ff98 	bl	8003a90 <memcpy>
 8003b60:	89a3      	ldrh	r3, [r4, #12]
 8003b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6a:	81a3      	strh	r3, [r4, #12]
 8003b6c:	6126      	str	r6, [r4, #16]
 8003b6e:	444e      	add	r6, r9
 8003b70:	6026      	str	r6, [r4, #0]
 8003b72:	463e      	mov	r6, r7
 8003b74:	6165      	str	r5, [r4, #20]
 8003b76:	eba5 0509 	sub.w	r5, r5, r9
 8003b7a:	60a5      	str	r5, [r4, #8]
 8003b7c:	42be      	cmp	r6, r7
 8003b7e:	d900      	bls.n	8003b82 <__ssputs_r+0x86>
 8003b80:	463e      	mov	r6, r7
 8003b82:	4632      	mov	r2, r6
 8003b84:	4641      	mov	r1, r8
 8003b86:	6820      	ldr	r0, [r4, #0]
 8003b88:	f000 fab8 	bl	80040fc <memmove>
 8003b8c:	68a3      	ldr	r3, [r4, #8]
 8003b8e:	6822      	ldr	r2, [r4, #0]
 8003b90:	1b9b      	subs	r3, r3, r6
 8003b92:	4432      	add	r2, r6
 8003b94:	2000      	movs	r0, #0
 8003b96:	60a3      	str	r3, [r4, #8]
 8003b98:	6022      	str	r2, [r4, #0]
 8003b9a:	e7db      	b.n	8003b54 <__ssputs_r+0x58>
 8003b9c:	462a      	mov	r2, r5
 8003b9e:	f000 fb6d 	bl	800427c <_realloc_r>
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d1e1      	bne.n	8003b6c <__ssputs_r+0x70>
 8003ba8:	4650      	mov	r0, sl
 8003baa:	6921      	ldr	r1, [r4, #16]
 8003bac:	f000 fac0 	bl	8004130 <_free_r>
 8003bb0:	e7c7      	b.n	8003b42 <__ssputs_r+0x46>
	...

08003bb4 <_svfiprintf_r>:
 8003bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb8:	4698      	mov	r8, r3
 8003bba:	898b      	ldrh	r3, [r1, #12]
 8003bbc:	4607      	mov	r7, r0
 8003bbe:	061b      	lsls	r3, r3, #24
 8003bc0:	460d      	mov	r5, r1
 8003bc2:	4614      	mov	r4, r2
 8003bc4:	b09d      	sub	sp, #116	; 0x74
 8003bc6:	d50e      	bpl.n	8003be6 <_svfiprintf_r+0x32>
 8003bc8:	690b      	ldr	r3, [r1, #16]
 8003bca:	b963      	cbnz	r3, 8003be6 <_svfiprintf_r+0x32>
 8003bcc:	2140      	movs	r1, #64	; 0x40
 8003bce:	f000 fafb 	bl	80041c8 <_malloc_r>
 8003bd2:	6028      	str	r0, [r5, #0]
 8003bd4:	6128      	str	r0, [r5, #16]
 8003bd6:	b920      	cbnz	r0, 8003be2 <_svfiprintf_r+0x2e>
 8003bd8:	230c      	movs	r3, #12
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003be0:	e0d1      	b.n	8003d86 <_svfiprintf_r+0x1d2>
 8003be2:	2340      	movs	r3, #64	; 0x40
 8003be4:	616b      	str	r3, [r5, #20]
 8003be6:	2300      	movs	r3, #0
 8003be8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bea:	2320      	movs	r3, #32
 8003bec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bf0:	2330      	movs	r3, #48	; 0x30
 8003bf2:	f04f 0901 	mov.w	r9, #1
 8003bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003bfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003da0 <_svfiprintf_r+0x1ec>
 8003bfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c02:	4623      	mov	r3, r4
 8003c04:	469a      	mov	sl, r3
 8003c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c0a:	b10a      	cbz	r2, 8003c10 <_svfiprintf_r+0x5c>
 8003c0c:	2a25      	cmp	r2, #37	; 0x25
 8003c0e:	d1f9      	bne.n	8003c04 <_svfiprintf_r+0x50>
 8003c10:	ebba 0b04 	subs.w	fp, sl, r4
 8003c14:	d00b      	beq.n	8003c2e <_svfiprintf_r+0x7a>
 8003c16:	465b      	mov	r3, fp
 8003c18:	4622      	mov	r2, r4
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	4638      	mov	r0, r7
 8003c1e:	f7ff ff6d 	bl	8003afc <__ssputs_r>
 8003c22:	3001      	adds	r0, #1
 8003c24:	f000 80aa 	beq.w	8003d7c <_svfiprintf_r+0x1c8>
 8003c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c2a:	445a      	add	r2, fp
 8003c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8003c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80a2 	beq.w	8003d7c <_svfiprintf_r+0x1c8>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c42:	f10a 0a01 	add.w	sl, sl, #1
 8003c46:	9304      	str	r3, [sp, #16]
 8003c48:	9307      	str	r3, [sp, #28]
 8003c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8003c50:	4654      	mov	r4, sl
 8003c52:	2205      	movs	r2, #5
 8003c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c58:	4851      	ldr	r0, [pc, #324]	; (8003da0 <_svfiprintf_r+0x1ec>)
 8003c5a:	f000 fa41 	bl	80040e0 <memchr>
 8003c5e:	9a04      	ldr	r2, [sp, #16]
 8003c60:	b9d8      	cbnz	r0, 8003c9a <_svfiprintf_r+0xe6>
 8003c62:	06d0      	lsls	r0, r2, #27
 8003c64:	bf44      	itt	mi
 8003c66:	2320      	movmi	r3, #32
 8003c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c6c:	0711      	lsls	r1, r2, #28
 8003c6e:	bf44      	itt	mi
 8003c70:	232b      	movmi	r3, #43	; 0x2b
 8003c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c76:	f89a 3000 	ldrb.w	r3, [sl]
 8003c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c7c:	d015      	beq.n	8003caa <_svfiprintf_r+0xf6>
 8003c7e:	4654      	mov	r4, sl
 8003c80:	2000      	movs	r0, #0
 8003c82:	f04f 0c0a 	mov.w	ip, #10
 8003c86:	9a07      	ldr	r2, [sp, #28]
 8003c88:	4621      	mov	r1, r4
 8003c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c8e:	3b30      	subs	r3, #48	; 0x30
 8003c90:	2b09      	cmp	r3, #9
 8003c92:	d94e      	bls.n	8003d32 <_svfiprintf_r+0x17e>
 8003c94:	b1b0      	cbz	r0, 8003cc4 <_svfiprintf_r+0x110>
 8003c96:	9207      	str	r2, [sp, #28]
 8003c98:	e014      	b.n	8003cc4 <_svfiprintf_r+0x110>
 8003c9a:	eba0 0308 	sub.w	r3, r0, r8
 8003c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	46a2      	mov	sl, r4
 8003ca6:	9304      	str	r3, [sp, #16]
 8003ca8:	e7d2      	b.n	8003c50 <_svfiprintf_r+0x9c>
 8003caa:	9b03      	ldr	r3, [sp, #12]
 8003cac:	1d19      	adds	r1, r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	9103      	str	r1, [sp, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bfbb      	ittet	lt
 8003cb6:	425b      	neglt	r3, r3
 8003cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8003cbc:	9307      	strge	r3, [sp, #28]
 8003cbe:	9307      	strlt	r3, [sp, #28]
 8003cc0:	bfb8      	it	lt
 8003cc2:	9204      	strlt	r2, [sp, #16]
 8003cc4:	7823      	ldrb	r3, [r4, #0]
 8003cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8003cc8:	d10c      	bne.n	8003ce4 <_svfiprintf_r+0x130>
 8003cca:	7863      	ldrb	r3, [r4, #1]
 8003ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8003cce:	d135      	bne.n	8003d3c <_svfiprintf_r+0x188>
 8003cd0:	9b03      	ldr	r3, [sp, #12]
 8003cd2:	3402      	adds	r4, #2
 8003cd4:	1d1a      	adds	r2, r3, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	9203      	str	r2, [sp, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bfb8      	it	lt
 8003cde:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ce2:	9305      	str	r3, [sp, #20]
 8003ce4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003db0 <_svfiprintf_r+0x1fc>
 8003ce8:	2203      	movs	r2, #3
 8003cea:	4650      	mov	r0, sl
 8003cec:	7821      	ldrb	r1, [r4, #0]
 8003cee:	f000 f9f7 	bl	80040e0 <memchr>
 8003cf2:	b140      	cbz	r0, 8003d06 <_svfiprintf_r+0x152>
 8003cf4:	2340      	movs	r3, #64	; 0x40
 8003cf6:	eba0 000a 	sub.w	r0, r0, sl
 8003cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8003cfe:	9b04      	ldr	r3, [sp, #16]
 8003d00:	3401      	adds	r4, #1
 8003d02:	4303      	orrs	r3, r0
 8003d04:	9304      	str	r3, [sp, #16]
 8003d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d0a:	2206      	movs	r2, #6
 8003d0c:	4825      	ldr	r0, [pc, #148]	; (8003da4 <_svfiprintf_r+0x1f0>)
 8003d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d12:	f000 f9e5 	bl	80040e0 <memchr>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d038      	beq.n	8003d8c <_svfiprintf_r+0x1d8>
 8003d1a:	4b23      	ldr	r3, [pc, #140]	; (8003da8 <_svfiprintf_r+0x1f4>)
 8003d1c:	bb1b      	cbnz	r3, 8003d66 <_svfiprintf_r+0x1b2>
 8003d1e:	9b03      	ldr	r3, [sp, #12]
 8003d20:	3307      	adds	r3, #7
 8003d22:	f023 0307 	bic.w	r3, r3, #7
 8003d26:	3308      	adds	r3, #8
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d2c:	4433      	add	r3, r6
 8003d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d30:	e767      	b.n	8003c02 <_svfiprintf_r+0x4e>
 8003d32:	460c      	mov	r4, r1
 8003d34:	2001      	movs	r0, #1
 8003d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d3a:	e7a5      	b.n	8003c88 <_svfiprintf_r+0xd4>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	f04f 0c0a 	mov.w	ip, #10
 8003d42:	4619      	mov	r1, r3
 8003d44:	3401      	adds	r4, #1
 8003d46:	9305      	str	r3, [sp, #20]
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d4e:	3a30      	subs	r2, #48	; 0x30
 8003d50:	2a09      	cmp	r2, #9
 8003d52:	d903      	bls.n	8003d5c <_svfiprintf_r+0x1a8>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0c5      	beq.n	8003ce4 <_svfiprintf_r+0x130>
 8003d58:	9105      	str	r1, [sp, #20]
 8003d5a:	e7c3      	b.n	8003ce4 <_svfiprintf_r+0x130>
 8003d5c:	4604      	mov	r4, r0
 8003d5e:	2301      	movs	r3, #1
 8003d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d64:	e7f0      	b.n	8003d48 <_svfiprintf_r+0x194>
 8003d66:	ab03      	add	r3, sp, #12
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	462a      	mov	r2, r5
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <_svfiprintf_r+0x1f8>)
 8003d70:	a904      	add	r1, sp, #16
 8003d72:	f3af 8000 	nop.w
 8003d76:	1c42      	adds	r2, r0, #1
 8003d78:	4606      	mov	r6, r0
 8003d7a:	d1d6      	bne.n	8003d2a <_svfiprintf_r+0x176>
 8003d7c:	89ab      	ldrh	r3, [r5, #12]
 8003d7e:	065b      	lsls	r3, r3, #25
 8003d80:	f53f af2c 	bmi.w	8003bdc <_svfiprintf_r+0x28>
 8003d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d86:	b01d      	add	sp, #116	; 0x74
 8003d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d8c:	ab03      	add	r3, sp, #12
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	462a      	mov	r2, r5
 8003d92:	4638      	mov	r0, r7
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <_svfiprintf_r+0x1f8>)
 8003d96:	a904      	add	r1, sp, #16
 8003d98:	f000 f87c 	bl	8003e94 <_printf_i>
 8003d9c:	e7eb      	b.n	8003d76 <_svfiprintf_r+0x1c2>
 8003d9e:	bf00      	nop
 8003da0:	080046d0 	.word	0x080046d0
 8003da4:	080046da 	.word	0x080046da
 8003da8:	00000000 	.word	0x00000000
 8003dac:	08003afd 	.word	0x08003afd
 8003db0:	080046d6 	.word	0x080046d6

08003db4 <_printf_common>:
 8003db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db8:	4616      	mov	r6, r2
 8003dba:	4699      	mov	r9, r3
 8003dbc:	688a      	ldr	r2, [r1, #8]
 8003dbe:	690b      	ldr	r3, [r1, #16]
 8003dc0:	4607      	mov	r7, r0
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	bfb8      	it	lt
 8003dc6:	4613      	movlt	r3, r2
 8003dc8:	6033      	str	r3, [r6, #0]
 8003dca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dce:	460c      	mov	r4, r1
 8003dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dd4:	b10a      	cbz	r2, 8003dda <_printf_common+0x26>
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	6033      	str	r3, [r6, #0]
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	0699      	lsls	r1, r3, #26
 8003dde:	bf42      	ittt	mi
 8003de0:	6833      	ldrmi	r3, [r6, #0]
 8003de2:	3302      	addmi	r3, #2
 8003de4:	6033      	strmi	r3, [r6, #0]
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	f015 0506 	ands.w	r5, r5, #6
 8003dec:	d106      	bne.n	8003dfc <_printf_common+0x48>
 8003dee:	f104 0a19 	add.w	sl, r4, #25
 8003df2:	68e3      	ldr	r3, [r4, #12]
 8003df4:	6832      	ldr	r2, [r6, #0]
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	42ab      	cmp	r3, r5
 8003dfa:	dc28      	bgt.n	8003e4e <_printf_common+0x9a>
 8003dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e00:	1e13      	subs	r3, r2, #0
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	bf18      	it	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	0692      	lsls	r2, r2, #26
 8003e0a:	d42d      	bmi.n	8003e68 <_printf_common+0xb4>
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	4638      	mov	r0, r7
 8003e10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e14:	47c0      	blx	r8
 8003e16:	3001      	adds	r0, #1
 8003e18:	d020      	beq.n	8003e5c <_printf_common+0xa8>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	68e5      	ldr	r5, [r4, #12]
 8003e1e:	f003 0306 	and.w	r3, r3, #6
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	bf18      	it	ne
 8003e26:	2500      	movne	r5, #0
 8003e28:	6832      	ldr	r2, [r6, #0]
 8003e2a:	f04f 0600 	mov.w	r6, #0
 8003e2e:	68a3      	ldr	r3, [r4, #8]
 8003e30:	bf08      	it	eq
 8003e32:	1aad      	subeq	r5, r5, r2
 8003e34:	6922      	ldr	r2, [r4, #16]
 8003e36:	bf08      	it	eq
 8003e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	bfc4      	itt	gt
 8003e40:	1a9b      	subgt	r3, r3, r2
 8003e42:	18ed      	addgt	r5, r5, r3
 8003e44:	341a      	adds	r4, #26
 8003e46:	42b5      	cmp	r5, r6
 8003e48:	d11a      	bne.n	8003e80 <_printf_common+0xcc>
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	e008      	b.n	8003e60 <_printf_common+0xac>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4652      	mov	r2, sl
 8003e52:	4649      	mov	r1, r9
 8003e54:	4638      	mov	r0, r7
 8003e56:	47c0      	blx	r8
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d103      	bne.n	8003e64 <_printf_common+0xb0>
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e64:	3501      	adds	r5, #1
 8003e66:	e7c4      	b.n	8003df2 <_printf_common+0x3e>
 8003e68:	2030      	movs	r0, #48	; 0x30
 8003e6a:	18e1      	adds	r1, r4, r3
 8003e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e76:	4422      	add	r2, r4
 8003e78:	3302      	adds	r3, #2
 8003e7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e7e:	e7c5      	b.n	8003e0c <_printf_common+0x58>
 8003e80:	2301      	movs	r3, #1
 8003e82:	4622      	mov	r2, r4
 8003e84:	4649      	mov	r1, r9
 8003e86:	4638      	mov	r0, r7
 8003e88:	47c0      	blx	r8
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d0e6      	beq.n	8003e5c <_printf_common+0xa8>
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7d9      	b.n	8003e46 <_printf_common+0x92>
	...

08003e94 <_printf_i>:
 8003e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	460c      	mov	r4, r1
 8003e9a:	7e27      	ldrb	r7, [r4, #24]
 8003e9c:	4691      	mov	r9, r2
 8003e9e:	2f78      	cmp	r7, #120	; 0x78
 8003ea0:	4680      	mov	r8, r0
 8003ea2:	469a      	mov	sl, r3
 8003ea4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003ea6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eaa:	d807      	bhi.n	8003ebc <_printf_i+0x28>
 8003eac:	2f62      	cmp	r7, #98	; 0x62
 8003eae:	d80a      	bhi.n	8003ec6 <_printf_i+0x32>
 8003eb0:	2f00      	cmp	r7, #0
 8003eb2:	f000 80d9 	beq.w	8004068 <_printf_i+0x1d4>
 8003eb6:	2f58      	cmp	r7, #88	; 0x58
 8003eb8:	f000 80a4 	beq.w	8004004 <_printf_i+0x170>
 8003ebc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ec0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ec4:	e03a      	b.n	8003f3c <_printf_i+0xa8>
 8003ec6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003eca:	2b15      	cmp	r3, #21
 8003ecc:	d8f6      	bhi.n	8003ebc <_printf_i+0x28>
 8003ece:	a001      	add	r0, pc, #4	; (adr r0, 8003ed4 <_printf_i+0x40>)
 8003ed0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ed4:	08003f2d 	.word	0x08003f2d
 8003ed8:	08003f41 	.word	0x08003f41
 8003edc:	08003ebd 	.word	0x08003ebd
 8003ee0:	08003ebd 	.word	0x08003ebd
 8003ee4:	08003ebd 	.word	0x08003ebd
 8003ee8:	08003ebd 	.word	0x08003ebd
 8003eec:	08003f41 	.word	0x08003f41
 8003ef0:	08003ebd 	.word	0x08003ebd
 8003ef4:	08003ebd 	.word	0x08003ebd
 8003ef8:	08003ebd 	.word	0x08003ebd
 8003efc:	08003ebd 	.word	0x08003ebd
 8003f00:	0800404f 	.word	0x0800404f
 8003f04:	08003f71 	.word	0x08003f71
 8003f08:	08004031 	.word	0x08004031
 8003f0c:	08003ebd 	.word	0x08003ebd
 8003f10:	08003ebd 	.word	0x08003ebd
 8003f14:	08004071 	.word	0x08004071
 8003f18:	08003ebd 	.word	0x08003ebd
 8003f1c:	08003f71 	.word	0x08003f71
 8003f20:	08003ebd 	.word	0x08003ebd
 8003f24:	08003ebd 	.word	0x08003ebd
 8003f28:	08004039 	.word	0x08004039
 8003f2c:	680b      	ldr	r3, [r1, #0]
 8003f2e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f32:	1d1a      	adds	r2, r3, #4
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	600a      	str	r2, [r1, #0]
 8003f38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0a4      	b.n	800408a <_printf_i+0x1f6>
 8003f40:	6825      	ldr	r5, [r4, #0]
 8003f42:	6808      	ldr	r0, [r1, #0]
 8003f44:	062e      	lsls	r6, r5, #24
 8003f46:	f100 0304 	add.w	r3, r0, #4
 8003f4a:	d50a      	bpl.n	8003f62 <_printf_i+0xce>
 8003f4c:	6805      	ldr	r5, [r0, #0]
 8003f4e:	600b      	str	r3, [r1, #0]
 8003f50:	2d00      	cmp	r5, #0
 8003f52:	da03      	bge.n	8003f5c <_printf_i+0xc8>
 8003f54:	232d      	movs	r3, #45	; 0x2d
 8003f56:	426d      	negs	r5, r5
 8003f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f5c:	230a      	movs	r3, #10
 8003f5e:	485e      	ldr	r0, [pc, #376]	; (80040d8 <_printf_i+0x244>)
 8003f60:	e019      	b.n	8003f96 <_printf_i+0x102>
 8003f62:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f66:	6805      	ldr	r5, [r0, #0]
 8003f68:	600b      	str	r3, [r1, #0]
 8003f6a:	bf18      	it	ne
 8003f6c:	b22d      	sxthne	r5, r5
 8003f6e:	e7ef      	b.n	8003f50 <_printf_i+0xbc>
 8003f70:	680b      	ldr	r3, [r1, #0]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	1d18      	adds	r0, r3, #4
 8003f76:	6008      	str	r0, [r1, #0]
 8003f78:	0628      	lsls	r0, r5, #24
 8003f7a:	d501      	bpl.n	8003f80 <_printf_i+0xec>
 8003f7c:	681d      	ldr	r5, [r3, #0]
 8003f7e:	e002      	b.n	8003f86 <_printf_i+0xf2>
 8003f80:	0669      	lsls	r1, r5, #25
 8003f82:	d5fb      	bpl.n	8003f7c <_printf_i+0xe8>
 8003f84:	881d      	ldrh	r5, [r3, #0]
 8003f86:	2f6f      	cmp	r7, #111	; 0x6f
 8003f88:	bf0c      	ite	eq
 8003f8a:	2308      	moveq	r3, #8
 8003f8c:	230a      	movne	r3, #10
 8003f8e:	4852      	ldr	r0, [pc, #328]	; (80040d8 <_printf_i+0x244>)
 8003f90:	2100      	movs	r1, #0
 8003f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f96:	6866      	ldr	r6, [r4, #4]
 8003f98:	2e00      	cmp	r6, #0
 8003f9a:	bfa8      	it	ge
 8003f9c:	6821      	ldrge	r1, [r4, #0]
 8003f9e:	60a6      	str	r6, [r4, #8]
 8003fa0:	bfa4      	itt	ge
 8003fa2:	f021 0104 	bicge.w	r1, r1, #4
 8003fa6:	6021      	strge	r1, [r4, #0]
 8003fa8:	b90d      	cbnz	r5, 8003fae <_printf_i+0x11a>
 8003faa:	2e00      	cmp	r6, #0
 8003fac:	d04d      	beq.n	800404a <_printf_i+0x1b6>
 8003fae:	4616      	mov	r6, r2
 8003fb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fb4:	fb03 5711 	mls	r7, r3, r1, r5
 8003fb8:	5dc7      	ldrb	r7, [r0, r7]
 8003fba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fbe:	462f      	mov	r7, r5
 8003fc0:	42bb      	cmp	r3, r7
 8003fc2:	460d      	mov	r5, r1
 8003fc4:	d9f4      	bls.n	8003fb0 <_printf_i+0x11c>
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d10b      	bne.n	8003fe2 <_printf_i+0x14e>
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	07df      	lsls	r7, r3, #31
 8003fce:	d508      	bpl.n	8003fe2 <_printf_i+0x14e>
 8003fd0:	6923      	ldr	r3, [r4, #16]
 8003fd2:	6861      	ldr	r1, [r4, #4]
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	bfde      	ittt	le
 8003fd8:	2330      	movle	r3, #48	; 0x30
 8003fda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fe2:	1b92      	subs	r2, r2, r6
 8003fe4:	6122      	str	r2, [r4, #16]
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4640      	mov	r0, r8
 8003fec:	f8cd a000 	str.w	sl, [sp]
 8003ff0:	aa03      	add	r2, sp, #12
 8003ff2:	f7ff fedf 	bl	8003db4 <_printf_common>
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d14c      	bne.n	8004094 <_printf_i+0x200>
 8003ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffe:	b004      	add	sp, #16
 8004000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004004:	4834      	ldr	r0, [pc, #208]	; (80040d8 <_printf_i+0x244>)
 8004006:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800400a:	680e      	ldr	r6, [r1, #0]
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004012:	061f      	lsls	r7, r3, #24
 8004014:	600e      	str	r6, [r1, #0]
 8004016:	d514      	bpl.n	8004042 <_printf_i+0x1ae>
 8004018:	07d9      	lsls	r1, r3, #31
 800401a:	bf44      	itt	mi
 800401c:	f043 0320 	orrmi.w	r3, r3, #32
 8004020:	6023      	strmi	r3, [r4, #0]
 8004022:	b91d      	cbnz	r5, 800402c <_printf_i+0x198>
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	f023 0320 	bic.w	r3, r3, #32
 800402a:	6023      	str	r3, [r4, #0]
 800402c:	2310      	movs	r3, #16
 800402e:	e7af      	b.n	8003f90 <_printf_i+0xfc>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f043 0320 	orr.w	r3, r3, #32
 8004036:	6023      	str	r3, [r4, #0]
 8004038:	2378      	movs	r3, #120	; 0x78
 800403a:	4828      	ldr	r0, [pc, #160]	; (80040dc <_printf_i+0x248>)
 800403c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004040:	e7e3      	b.n	800400a <_printf_i+0x176>
 8004042:	065e      	lsls	r6, r3, #25
 8004044:	bf48      	it	mi
 8004046:	b2ad      	uxthmi	r5, r5
 8004048:	e7e6      	b.n	8004018 <_printf_i+0x184>
 800404a:	4616      	mov	r6, r2
 800404c:	e7bb      	b.n	8003fc6 <_printf_i+0x132>
 800404e:	680b      	ldr	r3, [r1, #0]
 8004050:	6826      	ldr	r6, [r4, #0]
 8004052:	1d1d      	adds	r5, r3, #4
 8004054:	6960      	ldr	r0, [r4, #20]
 8004056:	600d      	str	r5, [r1, #0]
 8004058:	0635      	lsls	r5, r6, #24
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	d501      	bpl.n	8004062 <_printf_i+0x1ce>
 800405e:	6018      	str	r0, [r3, #0]
 8004060:	e002      	b.n	8004068 <_printf_i+0x1d4>
 8004062:	0671      	lsls	r1, r6, #25
 8004064:	d5fb      	bpl.n	800405e <_printf_i+0x1ca>
 8004066:	8018      	strh	r0, [r3, #0]
 8004068:	2300      	movs	r3, #0
 800406a:	4616      	mov	r6, r2
 800406c:	6123      	str	r3, [r4, #16]
 800406e:	e7ba      	b.n	8003fe6 <_printf_i+0x152>
 8004070:	680b      	ldr	r3, [r1, #0]
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	600a      	str	r2, [r1, #0]
 8004076:	681e      	ldr	r6, [r3, #0]
 8004078:	2100      	movs	r1, #0
 800407a:	4630      	mov	r0, r6
 800407c:	6862      	ldr	r2, [r4, #4]
 800407e:	f000 f82f 	bl	80040e0 <memchr>
 8004082:	b108      	cbz	r0, 8004088 <_printf_i+0x1f4>
 8004084:	1b80      	subs	r0, r0, r6
 8004086:	6060      	str	r0, [r4, #4]
 8004088:	6863      	ldr	r3, [r4, #4]
 800408a:	6123      	str	r3, [r4, #16]
 800408c:	2300      	movs	r3, #0
 800408e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004092:	e7a8      	b.n	8003fe6 <_printf_i+0x152>
 8004094:	4632      	mov	r2, r6
 8004096:	4649      	mov	r1, r9
 8004098:	4640      	mov	r0, r8
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	47d0      	blx	sl
 800409e:	3001      	adds	r0, #1
 80040a0:	d0ab      	beq.n	8003ffa <_printf_i+0x166>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	079b      	lsls	r3, r3, #30
 80040a6:	d413      	bmi.n	80040d0 <_printf_i+0x23c>
 80040a8:	68e0      	ldr	r0, [r4, #12]
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	4298      	cmp	r0, r3
 80040ae:	bfb8      	it	lt
 80040b0:	4618      	movlt	r0, r3
 80040b2:	e7a4      	b.n	8003ffe <_printf_i+0x16a>
 80040b4:	2301      	movs	r3, #1
 80040b6:	4632      	mov	r2, r6
 80040b8:	4649      	mov	r1, r9
 80040ba:	4640      	mov	r0, r8
 80040bc:	47d0      	blx	sl
 80040be:	3001      	adds	r0, #1
 80040c0:	d09b      	beq.n	8003ffa <_printf_i+0x166>
 80040c2:	3501      	adds	r5, #1
 80040c4:	68e3      	ldr	r3, [r4, #12]
 80040c6:	9903      	ldr	r1, [sp, #12]
 80040c8:	1a5b      	subs	r3, r3, r1
 80040ca:	42ab      	cmp	r3, r5
 80040cc:	dcf2      	bgt.n	80040b4 <_printf_i+0x220>
 80040ce:	e7eb      	b.n	80040a8 <_printf_i+0x214>
 80040d0:	2500      	movs	r5, #0
 80040d2:	f104 0619 	add.w	r6, r4, #25
 80040d6:	e7f5      	b.n	80040c4 <_printf_i+0x230>
 80040d8:	080046e1 	.word	0x080046e1
 80040dc:	080046f2 	.word	0x080046f2

080040e0 <memchr>:
 80040e0:	4603      	mov	r3, r0
 80040e2:	b510      	push	{r4, lr}
 80040e4:	b2c9      	uxtb	r1, r1
 80040e6:	4402      	add	r2, r0
 80040e8:	4293      	cmp	r3, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	d101      	bne.n	80040f2 <memchr+0x12>
 80040ee:	2000      	movs	r0, #0
 80040f0:	e003      	b.n	80040fa <memchr+0x1a>
 80040f2:	7804      	ldrb	r4, [r0, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	428c      	cmp	r4, r1
 80040f8:	d1f6      	bne.n	80040e8 <memchr+0x8>
 80040fa:	bd10      	pop	{r4, pc}

080040fc <memmove>:
 80040fc:	4288      	cmp	r0, r1
 80040fe:	b510      	push	{r4, lr}
 8004100:	eb01 0402 	add.w	r4, r1, r2
 8004104:	d902      	bls.n	800410c <memmove+0x10>
 8004106:	4284      	cmp	r4, r0
 8004108:	4623      	mov	r3, r4
 800410a:	d807      	bhi.n	800411c <memmove+0x20>
 800410c:	1e43      	subs	r3, r0, #1
 800410e:	42a1      	cmp	r1, r4
 8004110:	d008      	beq.n	8004124 <memmove+0x28>
 8004112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800411a:	e7f8      	b.n	800410e <memmove+0x12>
 800411c:	4601      	mov	r1, r0
 800411e:	4402      	add	r2, r0
 8004120:	428a      	cmp	r2, r1
 8004122:	d100      	bne.n	8004126 <memmove+0x2a>
 8004124:	bd10      	pop	{r4, pc}
 8004126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800412a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800412e:	e7f7      	b.n	8004120 <memmove+0x24>

08004130 <_free_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4605      	mov	r5, r0
 8004134:	2900      	cmp	r1, #0
 8004136:	d043      	beq.n	80041c0 <_free_r+0x90>
 8004138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800413c:	1f0c      	subs	r4, r1, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	bfb8      	it	lt
 8004142:	18e4      	addlt	r4, r4, r3
 8004144:	f000 f8d0 	bl	80042e8 <__malloc_lock>
 8004148:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <_free_r+0x94>)
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	4610      	mov	r0, r2
 800414e:	b933      	cbnz	r3, 800415e <_free_r+0x2e>
 8004150:	6063      	str	r3, [r4, #4]
 8004152:	6014      	str	r4, [r2, #0]
 8004154:	4628      	mov	r0, r5
 8004156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800415a:	f000 b8cb 	b.w	80042f4 <__malloc_unlock>
 800415e:	42a3      	cmp	r3, r4
 8004160:	d90a      	bls.n	8004178 <_free_r+0x48>
 8004162:	6821      	ldr	r1, [r4, #0]
 8004164:	1862      	adds	r2, r4, r1
 8004166:	4293      	cmp	r3, r2
 8004168:	bf01      	itttt	eq
 800416a:	681a      	ldreq	r2, [r3, #0]
 800416c:	685b      	ldreq	r3, [r3, #4]
 800416e:	1852      	addeq	r2, r2, r1
 8004170:	6022      	streq	r2, [r4, #0]
 8004172:	6063      	str	r3, [r4, #4]
 8004174:	6004      	str	r4, [r0, #0]
 8004176:	e7ed      	b.n	8004154 <_free_r+0x24>
 8004178:	461a      	mov	r2, r3
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	b10b      	cbz	r3, 8004182 <_free_r+0x52>
 800417e:	42a3      	cmp	r3, r4
 8004180:	d9fa      	bls.n	8004178 <_free_r+0x48>
 8004182:	6811      	ldr	r1, [r2, #0]
 8004184:	1850      	adds	r0, r2, r1
 8004186:	42a0      	cmp	r0, r4
 8004188:	d10b      	bne.n	80041a2 <_free_r+0x72>
 800418a:	6820      	ldr	r0, [r4, #0]
 800418c:	4401      	add	r1, r0
 800418e:	1850      	adds	r0, r2, r1
 8004190:	4283      	cmp	r3, r0
 8004192:	6011      	str	r1, [r2, #0]
 8004194:	d1de      	bne.n	8004154 <_free_r+0x24>
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	4401      	add	r1, r0
 800419c:	6011      	str	r1, [r2, #0]
 800419e:	6053      	str	r3, [r2, #4]
 80041a0:	e7d8      	b.n	8004154 <_free_r+0x24>
 80041a2:	d902      	bls.n	80041aa <_free_r+0x7a>
 80041a4:	230c      	movs	r3, #12
 80041a6:	602b      	str	r3, [r5, #0]
 80041a8:	e7d4      	b.n	8004154 <_free_r+0x24>
 80041aa:	6820      	ldr	r0, [r4, #0]
 80041ac:	1821      	adds	r1, r4, r0
 80041ae:	428b      	cmp	r3, r1
 80041b0:	bf01      	itttt	eq
 80041b2:	6819      	ldreq	r1, [r3, #0]
 80041b4:	685b      	ldreq	r3, [r3, #4]
 80041b6:	1809      	addeq	r1, r1, r0
 80041b8:	6021      	streq	r1, [r4, #0]
 80041ba:	6063      	str	r3, [r4, #4]
 80041bc:	6054      	str	r4, [r2, #4]
 80041be:	e7c9      	b.n	8004154 <_free_r+0x24>
 80041c0:	bd38      	pop	{r3, r4, r5, pc}
 80041c2:	bf00      	nop
 80041c4:	200000ac 	.word	0x200000ac

080041c8 <_malloc_r>:
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ca:	1ccd      	adds	r5, r1, #3
 80041cc:	f025 0503 	bic.w	r5, r5, #3
 80041d0:	3508      	adds	r5, #8
 80041d2:	2d0c      	cmp	r5, #12
 80041d4:	bf38      	it	cc
 80041d6:	250c      	movcc	r5, #12
 80041d8:	2d00      	cmp	r5, #0
 80041da:	4606      	mov	r6, r0
 80041dc:	db01      	blt.n	80041e2 <_malloc_r+0x1a>
 80041de:	42a9      	cmp	r1, r5
 80041e0:	d903      	bls.n	80041ea <_malloc_r+0x22>
 80041e2:	230c      	movs	r3, #12
 80041e4:	6033      	str	r3, [r6, #0]
 80041e6:	2000      	movs	r0, #0
 80041e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ea:	f000 f87d 	bl	80042e8 <__malloc_lock>
 80041ee:	4921      	ldr	r1, [pc, #132]	; (8004274 <_malloc_r+0xac>)
 80041f0:	680a      	ldr	r2, [r1, #0]
 80041f2:	4614      	mov	r4, r2
 80041f4:	b99c      	cbnz	r4, 800421e <_malloc_r+0x56>
 80041f6:	4f20      	ldr	r7, [pc, #128]	; (8004278 <_malloc_r+0xb0>)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b923      	cbnz	r3, 8004206 <_malloc_r+0x3e>
 80041fc:	4621      	mov	r1, r4
 80041fe:	4630      	mov	r0, r6
 8004200:	f000 f862 	bl	80042c8 <_sbrk_r>
 8004204:	6038      	str	r0, [r7, #0]
 8004206:	4629      	mov	r1, r5
 8004208:	4630      	mov	r0, r6
 800420a:	f000 f85d 	bl	80042c8 <_sbrk_r>
 800420e:	1c43      	adds	r3, r0, #1
 8004210:	d123      	bne.n	800425a <_malloc_r+0x92>
 8004212:	230c      	movs	r3, #12
 8004214:	4630      	mov	r0, r6
 8004216:	6033      	str	r3, [r6, #0]
 8004218:	f000 f86c 	bl	80042f4 <__malloc_unlock>
 800421c:	e7e3      	b.n	80041e6 <_malloc_r+0x1e>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	1b5b      	subs	r3, r3, r5
 8004222:	d417      	bmi.n	8004254 <_malloc_r+0x8c>
 8004224:	2b0b      	cmp	r3, #11
 8004226:	d903      	bls.n	8004230 <_malloc_r+0x68>
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	441c      	add	r4, r3
 800422c:	6025      	str	r5, [r4, #0]
 800422e:	e004      	b.n	800423a <_malloc_r+0x72>
 8004230:	6863      	ldr	r3, [r4, #4]
 8004232:	42a2      	cmp	r2, r4
 8004234:	bf0c      	ite	eq
 8004236:	600b      	streq	r3, [r1, #0]
 8004238:	6053      	strne	r3, [r2, #4]
 800423a:	4630      	mov	r0, r6
 800423c:	f000 f85a 	bl	80042f4 <__malloc_unlock>
 8004240:	f104 000b 	add.w	r0, r4, #11
 8004244:	1d23      	adds	r3, r4, #4
 8004246:	f020 0007 	bic.w	r0, r0, #7
 800424a:	1ac2      	subs	r2, r0, r3
 800424c:	d0cc      	beq.n	80041e8 <_malloc_r+0x20>
 800424e:	1a1b      	subs	r3, r3, r0
 8004250:	50a3      	str	r3, [r4, r2]
 8004252:	e7c9      	b.n	80041e8 <_malloc_r+0x20>
 8004254:	4622      	mov	r2, r4
 8004256:	6864      	ldr	r4, [r4, #4]
 8004258:	e7cc      	b.n	80041f4 <_malloc_r+0x2c>
 800425a:	1cc4      	adds	r4, r0, #3
 800425c:	f024 0403 	bic.w	r4, r4, #3
 8004260:	42a0      	cmp	r0, r4
 8004262:	d0e3      	beq.n	800422c <_malloc_r+0x64>
 8004264:	1a21      	subs	r1, r4, r0
 8004266:	4630      	mov	r0, r6
 8004268:	f000 f82e 	bl	80042c8 <_sbrk_r>
 800426c:	3001      	adds	r0, #1
 800426e:	d1dd      	bne.n	800422c <_malloc_r+0x64>
 8004270:	e7cf      	b.n	8004212 <_malloc_r+0x4a>
 8004272:	bf00      	nop
 8004274:	200000ac 	.word	0x200000ac
 8004278:	200000b0 	.word	0x200000b0

0800427c <_realloc_r>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	4607      	mov	r7, r0
 8004280:	4614      	mov	r4, r2
 8004282:	460e      	mov	r6, r1
 8004284:	b921      	cbnz	r1, 8004290 <_realloc_r+0x14>
 8004286:	4611      	mov	r1, r2
 8004288:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800428c:	f7ff bf9c 	b.w	80041c8 <_malloc_r>
 8004290:	b922      	cbnz	r2, 800429c <_realloc_r+0x20>
 8004292:	f7ff ff4d 	bl	8004130 <_free_r>
 8004296:	4625      	mov	r5, r4
 8004298:	4628      	mov	r0, r5
 800429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800429c:	f000 f830 	bl	8004300 <_malloc_usable_size_r>
 80042a0:	42a0      	cmp	r0, r4
 80042a2:	d20f      	bcs.n	80042c4 <_realloc_r+0x48>
 80042a4:	4621      	mov	r1, r4
 80042a6:	4638      	mov	r0, r7
 80042a8:	f7ff ff8e 	bl	80041c8 <_malloc_r>
 80042ac:	4605      	mov	r5, r0
 80042ae:	2800      	cmp	r0, #0
 80042b0:	d0f2      	beq.n	8004298 <_realloc_r+0x1c>
 80042b2:	4631      	mov	r1, r6
 80042b4:	4622      	mov	r2, r4
 80042b6:	f7ff fbeb 	bl	8003a90 <memcpy>
 80042ba:	4631      	mov	r1, r6
 80042bc:	4638      	mov	r0, r7
 80042be:	f7ff ff37 	bl	8004130 <_free_r>
 80042c2:	e7e9      	b.n	8004298 <_realloc_r+0x1c>
 80042c4:	4635      	mov	r5, r6
 80042c6:	e7e7      	b.n	8004298 <_realloc_r+0x1c>

080042c8 <_sbrk_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	2300      	movs	r3, #0
 80042cc:	4d05      	ldr	r5, [pc, #20]	; (80042e4 <_sbrk_r+0x1c>)
 80042ce:	4604      	mov	r4, r0
 80042d0:	4608      	mov	r0, r1
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	f7fc fee6 	bl	80010a4 <_sbrk>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_sbrk_r+0x1a>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_sbrk_r+0x1a>
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	200027a4 	.word	0x200027a4

080042e8 <__malloc_lock>:
 80042e8:	4801      	ldr	r0, [pc, #4]	; (80042f0 <__malloc_lock+0x8>)
 80042ea:	f000 b811 	b.w	8004310 <__retarget_lock_acquire_recursive>
 80042ee:	bf00      	nop
 80042f0:	200027ac 	.word	0x200027ac

080042f4 <__malloc_unlock>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__malloc_unlock+0x8>)
 80042f6:	f000 b80c 	b.w	8004312 <__retarget_lock_release_recursive>
 80042fa:	bf00      	nop
 80042fc:	200027ac 	.word	0x200027ac

08004300 <_malloc_usable_size_r>:
 8004300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004304:	1f18      	subs	r0, r3, #4
 8004306:	2b00      	cmp	r3, #0
 8004308:	bfbc      	itt	lt
 800430a:	580b      	ldrlt	r3, [r1, r0]
 800430c:	18c0      	addlt	r0, r0, r3
 800430e:	4770      	bx	lr

08004310 <__retarget_lock_acquire_recursive>:
 8004310:	4770      	bx	lr

08004312 <__retarget_lock_release_recursive>:
 8004312:	4770      	bx	lr

08004314 <_init>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	bf00      	nop
 8004318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800431a:	bc08      	pop	{r3}
 800431c:	469e      	mov	lr, r3
 800431e:	4770      	bx	lr

08004320 <_fini>:
 8004320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004322:	bf00      	nop
 8004324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004326:	bc08      	pop	{r3}
 8004328:	469e      	mov	lr, r3
 800432a:	4770      	bx	lr
