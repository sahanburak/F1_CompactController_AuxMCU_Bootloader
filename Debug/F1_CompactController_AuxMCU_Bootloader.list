
F1_CompactController_AuxMCU_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .app_info     00000008  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005e04  080001ec  080001ec  000101ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a50  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006a40  08006a40  00026ae4  2**0
                  CONTENTS
  5 .ARM          00000000  08006a40  08006a40  00026ae4  2**0
                  CONTENTS
  6 .preinit_array 00000000  08006a40  08006a40  00026ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08006a40  08006a40  00016a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08006a44  08006a44  00016a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAMVectorTable 00000200  20000000  20000000  00030000  2**2
                  ALLOC
 10 .IAPMailbox   00000008  20000200  20000200  00030000  2**2
                  ALLOC
 11 .data         00000088  20000208  08006a48  00020208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .app_sha      00000014  08006ad0  08006ad0  00026ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .bss          00000f50  20000290  20000290  00030000  2**3
                  ALLOC
 14 ._user_heap_stack 00000600  200011e0  200011e0  00030000  2**0
                  ALLOC
 15 .ARM.attributes 00000029  00000000  00000000  00026ae4  2**0
                  CONTENTS, READONLY
 16 .debug_info   00015fc2  00000000  00000000  00026b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00003799  00000000  00000000  0003cacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00000cc8  00000000  00000000  00040268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00000b50  00000000  00000000  00040f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001c42e  00000000  00000000  00041a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00011ce6  00000000  00000000  0005deae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0009614c  00000000  00000000  0006fb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  00105ce0  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00003428  00000000  00000000  00105d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ec <__do_global_dtors_aux>:
 80001ec:	b510      	push	{r4, lr}
 80001ee:	4c05      	ldr	r4, [pc, #20]	; (8000204 <__do_global_dtors_aux+0x18>)
 80001f0:	7823      	ldrb	r3, [r4, #0]
 80001f2:	b933      	cbnz	r3, 8000202 <__do_global_dtors_aux+0x16>
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x1c>)
 80001f6:	b113      	cbz	r3, 80001fe <__do_global_dtors_aux+0x12>
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <__do_global_dtors_aux+0x20>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	2301      	movs	r3, #1
 8000200:	7023      	strb	r3, [r4, #0]
 8000202:	bd10      	pop	{r4, pc}
 8000204:	20000290 	.word	0x20000290
 8000208:	00000000 	.word	0x00000000
 800020c:	08005fd8 	.word	0x08005fd8

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	4b03      	ldr	r3, [pc, #12]	; (8000220 <frame_dummy+0x10>)
 8000214:	b11b      	cbz	r3, 800021e <frame_dummy+0xe>
 8000216:	4903      	ldr	r1, [pc, #12]	; (8000224 <frame_dummy+0x14>)
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <frame_dummy+0x18>)
 800021a:	f3af 8000 	nop.w
 800021e:	bd08      	pop	{r3, pc}
 8000220:	00000000 	.word	0x00000000
 8000224:	20000294 	.word	0x20000294
 8000228:	08005fd8 	.word	0x08005fd8

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <getSBoxValue>:

/*****************************************************************************/
/* Private functions:                                                        */
/*****************************************************************************/
static uint8_t getSBoxValue(uint8_t num)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  return sbox[num];
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	4a03      	ldr	r2, [pc, #12]	; (8000258 <getSBoxValue+0x1c>)
 800024a:	5cd3      	ldrb	r3, [r2, r3]
}
 800024c:	4618      	mov	r0, r3
 800024e:	370c      	adds	r7, #12
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	08006564 	.word	0x08006564

0800025c <getSBoxInvert>:

static uint8_t getSBoxInvert(uint8_t num)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  return rsbox[num];
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <getSBoxInvert+0x1c>)
 800026a:	5cd3      	ldrb	r3, [r2, r3]
}
 800026c:	4618      	mov	r0, r3
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	08006664 	.word	0x08006664

0800027c <KeyExpansion>:

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
  uint32_t i, k;
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 8000282:	2300      	movs	r3, #0
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	e030      	b.n	80002ea <KeyExpansion+0x6e>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000288:	4b60      	ldr	r3, [pc, #384]	; (800040c <KeyExpansion+0x190>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	441a      	add	r2, r3
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	7811      	ldrb	r1, [r2, #0]
 8000298:	4a5d      	ldr	r2, [pc, #372]	; (8000410 <KeyExpansion+0x194>)
 800029a:	54d1      	strb	r1, [r2, r3]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800029c:	4b5b      	ldr	r3, [pc, #364]	; (800040c <KeyExpansion+0x190>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	3301      	adds	r3, #1
 80002a6:	441a      	add	r2, r3
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	3301      	adds	r3, #1
 80002ae:	7811      	ldrb	r1, [r2, #0]
 80002b0:	4a57      	ldr	r2, [pc, #348]	; (8000410 <KeyExpansion+0x194>)
 80002b2:	54d1      	strb	r1, [r2, r3]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80002b4:	4b55      	ldr	r3, [pc, #340]	; (800040c <KeyExpansion+0x190>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	3302      	adds	r3, #2
 80002be:	441a      	add	r2, r3
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	3302      	adds	r3, #2
 80002c6:	7811      	ldrb	r1, [r2, #0]
 80002c8:	4a51      	ldr	r2, [pc, #324]	; (8000410 <KeyExpansion+0x194>)
 80002ca:	54d1      	strb	r1, [r2, r3]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80002cc:	4b4f      	ldr	r3, [pc, #316]	; (800040c <KeyExpansion+0x190>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	3303      	adds	r3, #3
 80002d6:	441a      	add	r2, r3
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	3303      	adds	r3, #3
 80002de:	7811      	ldrb	r1, [r2, #0]
 80002e0:	4a4b      	ldr	r2, [pc, #300]	; (8000410 <KeyExpansion+0x194>)
 80002e2:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < Nk; ++i)
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	3301      	adds	r3, #1
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	d9cb      	bls.n	8000288 <KeyExpansion+0xc>
  }

  // All other round keys are found from the previous round keys.
  //i == Nk
  for (; i < Nb * (Nr + 1); ++i)
 80002f0:	e083      	b.n	80003fa <KeyExpansion+0x17e>
  {
    {
      tempa[0]=RoundKey[(i-1) * 4 + 0];
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	4a45      	ldr	r2, [pc, #276]	; (8000410 <KeyExpansion+0x194>)
 80002fa:	5cd3      	ldrb	r3, [r2, r3]
 80002fc:	713b      	strb	r3, [r7, #4]
      tempa[1]=RoundKey[(i-1) * 4 + 1];
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	3b01      	subs	r3, #1
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	3301      	adds	r3, #1
 8000306:	4a42      	ldr	r2, [pc, #264]	; (8000410 <KeyExpansion+0x194>)
 8000308:	5cd3      	ldrb	r3, [r2, r3]
 800030a:	717b      	strb	r3, [r7, #5]
      tempa[2]=RoundKey[(i-1) * 4 + 2];
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3b01      	subs	r3, #1
 8000310:	009b      	lsls	r3, r3, #2
 8000312:	3302      	adds	r3, #2
 8000314:	4a3e      	ldr	r2, [pc, #248]	; (8000410 <KeyExpansion+0x194>)
 8000316:	5cd3      	ldrb	r3, [r2, r3]
 8000318:	71bb      	strb	r3, [r7, #6]
      tempa[3]=RoundKey[(i-1) * 4 + 3];
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	3b01      	subs	r3, #1
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	3303      	adds	r3, #3
 8000322:	4a3b      	ldr	r2, [pc, #236]	; (8000410 <KeyExpansion+0x194>)
 8000324:	5cd3      	ldrb	r3, [r2, r3]
 8000326:	71fb      	strb	r3, [r7, #7]
    }

    if (i % Nk == 0)
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f003 0303 	and.w	r3, r3, #3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d12a      	bne.n	8000388 <KeyExpansion+0x10c>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        k = tempa[0];
 8000332:	793b      	ldrb	r3, [r7, #4]
 8000334:	60bb      	str	r3, [r7, #8]
        tempa[0] = tempa[1];
 8000336:	797b      	ldrb	r3, [r7, #5]
 8000338:	713b      	strb	r3, [r7, #4]
        tempa[1] = tempa[2];
 800033a:	79bb      	ldrb	r3, [r7, #6]
 800033c:	717b      	strb	r3, [r7, #5]
        tempa[2] = tempa[3];
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	71bb      	strb	r3, [r7, #6]
        tempa[3] = k;
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	71fb      	strb	r3, [r7, #7]
      // SubWord() is a function that takes a four-byte input word and
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8000348:	793b      	ldrb	r3, [r7, #4]
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff76 	bl	800023c <getSBoxValue>
 8000350:	4603      	mov	r3, r0
 8000352:	713b      	strb	r3, [r7, #4]
        tempa[1] = getSBoxValue(tempa[1]);
 8000354:	797b      	ldrb	r3, [r7, #5]
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff70 	bl	800023c <getSBoxValue>
 800035c:	4603      	mov	r3, r0
 800035e:	717b      	strb	r3, [r7, #5]
        tempa[2] = getSBoxValue(tempa[2]);
 8000360:	79bb      	ldrb	r3, [r7, #6]
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff6a 	bl	800023c <getSBoxValue>
 8000368:	4603      	mov	r3, r0
 800036a:	71bb      	strb	r3, [r7, #6]
        tempa[3] = getSBoxValue(tempa[3]);
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff64 	bl	800023c <getSBoxValue>
 8000374:	4603      	mov	r3, r0
 8000376:	71fb      	strb	r3, [r7, #7]
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8000378:	793a      	ldrb	r2, [r7, #4]
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	089b      	lsrs	r3, r3, #2
 800037e:	4925      	ldr	r1, [pc, #148]	; (8000414 <KeyExpansion+0x198>)
 8000380:	5ccb      	ldrb	r3, [r1, r3]
 8000382:	4053      	eors	r3, r2
 8000384:	b2db      	uxtb	r3, r3
 8000386:	713b      	strb	r3, [r7, #4]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b04      	subs	r3, #4
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4a20      	ldr	r2, [pc, #128]	; (8000410 <KeyExpansion+0x194>)
 8000390:	5cd1      	ldrb	r1, [r2, r3]
 8000392:	793a      	ldrb	r2, [r7, #4]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	404a      	eors	r2, r1
 800039a:	b2d1      	uxtb	r1, r2
 800039c:	4a1c      	ldr	r2, [pc, #112]	; (8000410 <KeyExpansion+0x194>)
 800039e:	54d1      	strb	r1, [r2, r3]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3b04      	subs	r3, #4
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	3301      	adds	r3, #1
 80003a8:	4a19      	ldr	r2, [pc, #100]	; (8000410 <KeyExpansion+0x194>)
 80003aa:	5cd1      	ldrb	r1, [r2, r3]
 80003ac:	797a      	ldrb	r2, [r7, #5]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	3301      	adds	r3, #1
 80003b4:	404a      	eors	r2, r1
 80003b6:	b2d1      	uxtb	r1, r2
 80003b8:	4a15      	ldr	r2, [pc, #84]	; (8000410 <KeyExpansion+0x194>)
 80003ba:	54d1      	strb	r1, [r2, r3]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	3b04      	subs	r3, #4
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	3302      	adds	r3, #2
 80003c4:	4a12      	ldr	r2, [pc, #72]	; (8000410 <KeyExpansion+0x194>)
 80003c6:	5cd1      	ldrb	r1, [r2, r3]
 80003c8:	79ba      	ldrb	r2, [r7, #6]
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	009b      	lsls	r3, r3, #2
 80003ce:	3302      	adds	r3, #2
 80003d0:	404a      	eors	r2, r1
 80003d2:	b2d1      	uxtb	r1, r2
 80003d4:	4a0e      	ldr	r2, [pc, #56]	; (8000410 <KeyExpansion+0x194>)
 80003d6:	54d1      	strb	r1, [r2, r3]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	3b04      	subs	r3, #4
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	3303      	adds	r3, #3
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <KeyExpansion+0x194>)
 80003e2:	5cd1      	ldrb	r1, [r2, r3]
 80003e4:	79fa      	ldrb	r2, [r7, #7]
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	3303      	adds	r3, #3
 80003ec:	404a      	eors	r2, r1
 80003ee:	b2d1      	uxtb	r1, r2
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <KeyExpansion+0x194>)
 80003f2:	54d1      	strb	r1, [r2, r3]
  for (; i < Nb * (Nr + 1); ++i)
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	3301      	adds	r3, #1
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	2b2b      	cmp	r3, #43	; 0x2b
 80003fe:	f67f af78 	bls.w	80002f2 <KeyExpansion+0x76>
  }
}
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	3710      	adds	r7, #16
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000360 	.word	0x20000360
 8000410:	200002b0 	.word	0x200002b0
 8000414:	08006764 	.word	0x08006764

08000418 <AddRoundKey>:

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round)
{
 8000418:	b490      	push	{r4, r7}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
  uint8_t i,j;
  for (i=0;i<4;++i)
 8000422:	2300      	movs	r3, #0
 8000424:	73fb      	strb	r3, [r7, #15]
 8000426:	e027      	b.n	8000478 <AddRoundKey+0x60>
  {
    for (j = 0; j < 4; ++j)
 8000428:	2300      	movs	r3, #0
 800042a:	73bb      	strb	r3, [r7, #14]
 800042c:	e01e      	b.n	800046c <AddRoundKey+0x54>
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <AddRoundKey+0x74>)
 8000430:	6819      	ldr	r1, [r3, #0]
 8000432:	7bfa      	ldrb	r2, [r7, #15]
 8000434:	7bbb      	ldrb	r3, [r7, #14]
 8000436:	0092      	lsls	r2, r2, #2
 8000438:	440a      	add	r2, r1
 800043a:	4413      	add	r3, r2
 800043c:	781c      	ldrb	r4, [r3, #0]
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	009a      	lsls	r2, r3, #2
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	4413      	add	r3, r2
 8000446:	009a      	lsls	r2, r3, #2
 8000448:	7bbb      	ldrb	r3, [r7, #14]
 800044a:	4413      	add	r3, r2
 800044c:	4a10      	ldr	r2, [pc, #64]	; (8000490 <AddRoundKey+0x78>)
 800044e:	5cd0      	ldrb	r0, [r2, r3]
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <AddRoundKey+0x74>)
 8000452:	6819      	ldr	r1, [r3, #0]
 8000454:	7bfa      	ldrb	r2, [r7, #15]
 8000456:	7bbb      	ldrb	r3, [r7, #14]
 8000458:	4060      	eors	r0, r4
 800045a:	b2c0      	uxtb	r0, r0
 800045c:	0092      	lsls	r2, r2, #2
 800045e:	440a      	add	r2, r1
 8000460:	4413      	add	r3, r2
 8000462:	4602      	mov	r2, r0
 8000464:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000466:	7bbb      	ldrb	r3, [r7, #14]
 8000468:	3301      	adds	r3, #1
 800046a:	73bb      	strb	r3, [r7, #14]
 800046c:	7bbb      	ldrb	r3, [r7, #14]
 800046e:	2b03      	cmp	r3, #3
 8000470:	d9dd      	bls.n	800042e <AddRoundKey+0x16>
  for (i=0;i<4;++i)
 8000472:	7bfb      	ldrb	r3, [r7, #15]
 8000474:	3301      	adds	r3, #1
 8000476:	73fb      	strb	r3, [r7, #15]
 8000478:	7bfb      	ldrb	r3, [r7, #15]
 800047a:	2b03      	cmp	r3, #3
 800047c:	d9d4      	bls.n	8000428 <AddRoundKey+0x10>
    }
  }
}
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	3710      	adds	r7, #16
 8000484:	46bd      	mov	sp, r7
 8000486:	bc90      	pop	{r4, r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	200002ac 	.word	0x200002ac
 8000490:	200002b0 	.word	0x200002b0

08000494 <xtime>:
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	b25a      	sxtb	r2, r3
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	09db      	lsrs	r3, r3, #7
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	4619      	mov	r1, r3
 80004ac:	0049      	lsls	r1, r1, #1
 80004ae:	440b      	add	r3, r1
 80004b0:	4619      	mov	r1, r3
 80004b2:	00c8      	lsls	r0, r1, #3
 80004b4:	4619      	mov	r1, r3
 80004b6:	4603      	mov	r3, r0
 80004b8:	440b      	add	r3, r1
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	b25b      	sxtb	r3, r3
 80004be:	4053      	eors	r3, r2
 80004c0:	b25b      	sxtb	r3, r3
 80004c2:	b2db      	uxtb	r3, r3
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bc80      	pop	{r7}
 80004cc:	4770      	bx	lr
	...

080004d0 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	e346      	b.n	8000b6a <InvMixColumns+0x69a>
  {
    a = (*state)[i][0];
 80004dc:	4bd9      	ldr	r3, [pc, #868]	; (8000844 <InvMixColumns+0x374>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80004e6:	70fb      	strb	r3, [r7, #3]
    b = (*state)[i][1];
 80004e8:	4bd6      	ldr	r3, [pc, #856]	; (8000844 <InvMixColumns+0x374>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4413      	add	r3, r2
 80004f2:	785b      	ldrb	r3, [r3, #1]
 80004f4:	70bb      	strb	r3, [r7, #2]
    c = (*state)[i][2];
 80004f6:	4bd3      	ldr	r3, [pc, #844]	; (8000844 <InvMixColumns+0x374>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	707b      	strb	r3, [r7, #1]
    d = (*state)[i][3];
 8000504:	4bcf      	ldr	r3, [pc, #828]	; (8000844 <InvMixColumns+0x374>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4413      	add	r3, r2
 800050e:	78db      	ldrb	r3, [r3, #3]
 8000510:	703b      	strb	r3, [r7, #0]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8000512:	78fb      	ldrb	r3, [r7, #3]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ffbd 	bl	8000494 <xtime>
 800051a:	4603      	mov	r3, r0
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ffb9 	bl	8000494 <xtime>
 8000522:	4603      	mov	r3, r0
 8000524:	4618      	mov	r0, r3
 8000526:	f7ff ffb5 	bl	8000494 <xtime>
 800052a:	4603      	mov	r3, r0
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ffb1 	bl	8000494 <xtime>
 8000532:	78bb      	ldrb	r3, [r7, #2]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ffad 	bl	8000494 <xtime>
 800053a:	4603      	mov	r3, r0
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff ffa9 	bl	8000494 <xtime>
 8000542:	78bb      	ldrb	r3, [r7, #2]
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ffa5 	bl	8000494 <xtime>
 800054a:	4603      	mov	r3, r0
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffa1 	bl	8000494 <xtime>
 8000552:	4603      	mov	r3, r0
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff9d 	bl	8000494 <xtime>
 800055a:	4603      	mov	r3, r0
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ff99 	bl	8000494 <xtime>
 8000562:	787b      	ldrb	r3, [r7, #1]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ff95 	bl	8000494 <xtime>
 800056a:	787b      	ldrb	r3, [r7, #1]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff91 	bl	8000494 <xtime>
 8000572:	4603      	mov	r3, r0
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff8d 	bl	8000494 <xtime>
 800057a:	4603      	mov	r3, r0
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff ff89 	bl	8000494 <xtime>
 8000582:	4603      	mov	r3, r0
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff85 	bl	8000494 <xtime>
 800058a:	783b      	ldrb	r3, [r7, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff81 	bl	8000494 <xtime>
 8000592:	783b      	ldrb	r3, [r7, #0]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff ff7d 	bl	8000494 <xtime>
 800059a:	4603      	mov	r3, r0
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff79 	bl	8000494 <xtime>
 80005a2:	783b      	ldrb	r3, [r7, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ff75 	bl	8000494 <xtime>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ff71 	bl	8000494 <xtime>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff ff6d 	bl	8000494 <xtime>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ff69 	bl	8000494 <xtime>
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff65 	bl	8000494 <xtime>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461c      	mov	r4, r3
 80005ce:	78fb      	ldrb	r3, [r7, #3]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff ff5f 	bl	8000494 <xtime>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff5b 	bl	8000494 <xtime>
 80005de:	4603      	mov	r3, r0
 80005e0:	4063      	eors	r3, r4
 80005e2:	b2dc      	uxtb	r4, r3
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff54 	bl	8000494 <xtime>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff50 	bl	8000494 <xtime>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ff4c 	bl	8000494 <xtime>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4063      	eors	r3, r4
 8000600:	b2dc      	uxtb	r4, r3
 8000602:	78bb      	ldrb	r3, [r7, #2]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff45 	bl	8000494 <xtime>
 800060a:	4603      	mov	r3, r0
 800060c:	461a      	mov	r2, r3
 800060e:	78bb      	ldrb	r3, [r7, #2]
 8000610:	4053      	eors	r3, r2
 8000612:	b2dd      	uxtb	r5, r3
 8000614:	78bb      	ldrb	r3, [r7, #2]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff3c 	bl	8000494 <xtime>
 800061c:	4603      	mov	r3, r0
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ff38 	bl	8000494 <xtime>
 8000624:	4603      	mov	r3, r0
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ff34 	bl	8000494 <xtime>
 800062c:	4603      	mov	r3, r0
 800062e:	406b      	eors	r3, r5
 8000630:	b2db      	uxtb	r3, r3
 8000632:	4063      	eors	r3, r4
 8000634:	b2dc      	uxtb	r4, r3
 8000636:	787b      	ldrb	r3, [r7, #1]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff2b 	bl	8000494 <xtime>
 800063e:	4603      	mov	r3, r0
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff27 	bl	8000494 <xtime>
 8000646:	4603      	mov	r3, r0
 8000648:	461a      	mov	r2, r3
 800064a:	787b      	ldrb	r3, [r7, #1]
 800064c:	4053      	eors	r3, r2
 800064e:	b2dd      	uxtb	r5, r3
 8000650:	787b      	ldrb	r3, [r7, #1]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ff1e 	bl	8000494 <xtime>
 8000658:	4603      	mov	r3, r0
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff1a 	bl	8000494 <xtime>
 8000660:	4603      	mov	r3, r0
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff16 	bl	8000494 <xtime>
 8000668:	4603      	mov	r3, r0
 800066a:	406b      	eors	r3, r5
 800066c:	b2db      	uxtb	r3, r3
 800066e:	4063      	eors	r3, r4
 8000670:	b2dc      	uxtb	r4, r3
 8000672:	783b      	ldrb	r3, [r7, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff0d 	bl	8000494 <xtime>
 800067a:	4603      	mov	r3, r0
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ff09 	bl	8000494 <xtime>
 8000682:	4603      	mov	r3, r0
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff05 	bl	8000494 <xtime>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	783b      	ldrb	r3, [r7, #0]
 8000690:	4053      	eors	r3, r2
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b6b      	ldr	r3, [pc, #428]	; (8000844 <InvMixColumns+0x374>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4062      	eors	r2, r4
 800069a:	b2d1      	uxtb	r1, r2
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80006a2:	78fb      	ldrb	r3, [r7, #3]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fef5 	bl	8000494 <xtime>
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fef1 	bl	8000494 <xtime>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff feed 	bl	8000494 <xtime>
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fee9 	bl	8000494 <xtime>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fee5 	bl	8000494 <xtime>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fee1 	bl	8000494 <xtime>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fedd 	bl	8000494 <xtime>
 80006da:	78bb      	ldrb	r3, [r7, #2]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff fed9 	bl	8000494 <xtime>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fed5 	bl	8000494 <xtime>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fed1 	bl	8000494 <xtime>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fecd 	bl	8000494 <xtime>
 80006fa:	787b      	ldrb	r3, [r7, #1]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff fec9 	bl	8000494 <xtime>
 8000702:	4603      	mov	r3, r0
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fec5 	bl	8000494 <xtime>
 800070a:	787b      	ldrb	r3, [r7, #1]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff fec1 	bl	8000494 <xtime>
 8000712:	4603      	mov	r3, r0
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff febd 	bl	8000494 <xtime>
 800071a:	4603      	mov	r3, r0
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff feb9 	bl	8000494 <xtime>
 8000722:	4603      	mov	r3, r0
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff feb5 	bl	8000494 <xtime>
 800072a:	783b      	ldrb	r3, [r7, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff feb1 	bl	8000494 <xtime>
 8000732:	783b      	ldrb	r3, [r7, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fead 	bl	8000494 <xtime>
 800073a:	4603      	mov	r3, r0
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fea9 	bl	8000494 <xtime>
 8000742:	4603      	mov	r3, r0
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fea5 	bl	8000494 <xtime>
 800074a:	4603      	mov	r3, r0
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fea1 	bl	8000494 <xtime>
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe9d 	bl	8000494 <xtime>
 800075a:	4603      	mov	r3, r0
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fe99 	bl	8000494 <xtime>
 8000762:	4603      	mov	r3, r0
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fe95 	bl	8000494 <xtime>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	4053      	eors	r3, r2
 8000772:	b2dc      	uxtb	r4, r3
 8000774:	78bb      	ldrb	r3, [r7, #2]
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fe8c 	bl	8000494 <xtime>
 800077c:	4603      	mov	r3, r0
 800077e:	461d      	mov	r5, r3
 8000780:	78bb      	ldrb	r3, [r7, #2]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fe86 	bl	8000494 <xtime>
 8000788:	4603      	mov	r3, r0
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fe82 	bl	8000494 <xtime>
 8000790:	4603      	mov	r3, r0
 8000792:	406b      	eors	r3, r5
 8000794:	b2dd      	uxtb	r5, r3
 8000796:	78bb      	ldrb	r3, [r7, #2]
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff fe7b 	bl	8000494 <xtime>
 800079e:	4603      	mov	r3, r0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fe77 	bl	8000494 <xtime>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fe73 	bl	8000494 <xtime>
 80007ae:	4603      	mov	r3, r0
 80007b0:	406b      	eors	r3, r5
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4063      	eors	r3, r4
 80007b6:	b2dc      	uxtb	r4, r3
 80007b8:	787b      	ldrb	r3, [r7, #1]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fe6a 	bl	8000494 <xtime>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	787b      	ldrb	r3, [r7, #1]
 80007c6:	4053      	eors	r3, r2
 80007c8:	b2dd      	uxtb	r5, r3
 80007ca:	787b      	ldrb	r3, [r7, #1]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fe61 	bl	8000494 <xtime>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fe5d 	bl	8000494 <xtime>
 80007da:	4603      	mov	r3, r0
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fe59 	bl	8000494 <xtime>
 80007e2:	4603      	mov	r3, r0
 80007e4:	406b      	eors	r3, r5
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	4063      	eors	r3, r4
 80007ea:	b2dc      	uxtb	r4, r3
 80007ec:	783b      	ldrb	r3, [r7, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fe50 	bl	8000494 <xtime>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fe4c 	bl	8000494 <xtime>
 80007fc:	4603      	mov	r3, r0
 80007fe:	461a      	mov	r2, r3
 8000800:	783b      	ldrb	r3, [r7, #0]
 8000802:	4053      	eors	r3, r2
 8000804:	b2dd      	uxtb	r5, r3
 8000806:	783b      	ldrb	r3, [r7, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fe43 	bl	8000494 <xtime>
 800080e:	4603      	mov	r3, r0
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fe3f 	bl	8000494 <xtime>
 8000816:	4603      	mov	r3, r0
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff fe3b 	bl	8000494 <xtime>
 800081e:	4603      	mov	r3, r0
 8000820:	406b      	eors	r3, r5
 8000822:	b2db      	uxtb	r3, r3
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <InvMixColumns+0x374>)
 8000826:	6812      	ldr	r2, [r2, #0]
 8000828:	4063      	eors	r3, r4
 800082a:	b2d9      	uxtb	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	460a      	mov	r2, r1
 8000834:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fe2b 	bl	8000494 <xtime>
 800083e:	78fb      	ldrb	r3, [r7, #3]
 8000840:	4618      	mov	r0, r3
 8000842:	e001      	b.n	8000848 <InvMixColumns+0x378>
 8000844:	200002ac 	.word	0x200002ac
 8000848:	f7ff fe24 	bl	8000494 <xtime>
 800084c:	4603      	mov	r3, r0
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fe20 	bl	8000494 <xtime>
 8000854:	4603      	mov	r3, r0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe1c 	bl	8000494 <xtime>
 800085c:	4603      	mov	r3, r0
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe18 	bl	8000494 <xtime>
 8000864:	78bb      	ldrb	r3, [r7, #2]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fe14 	bl	8000494 <xtime>
 800086c:	78bb      	ldrb	r3, [r7, #2]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fe10 	bl	8000494 <xtime>
 8000874:	4603      	mov	r3, r0
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe0c 	bl	8000494 <xtime>
 800087c:	78bb      	ldrb	r3, [r7, #2]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe08 	bl	8000494 <xtime>
 8000884:	4603      	mov	r3, r0
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe04 	bl	8000494 <xtime>
 800088c:	4603      	mov	r3, r0
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe00 	bl	8000494 <xtime>
 8000894:	4603      	mov	r3, r0
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fdfc 	bl	8000494 <xtime>
 800089c:	787b      	ldrb	r3, [r7, #1]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fdf8 	bl	8000494 <xtime>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fdf4 	bl	8000494 <xtime>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fdf0 	bl	8000494 <xtime>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fdec 	bl	8000494 <xtime>
 80008bc:	783b      	ldrb	r3, [r7, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fde8 	bl	8000494 <xtime>
 80008c4:	4603      	mov	r3, r0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fde4 	bl	8000494 <xtime>
 80008cc:	783b      	ldrb	r3, [r7, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fde0 	bl	8000494 <xtime>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fddc 	bl	8000494 <xtime>
 80008dc:	4603      	mov	r3, r0
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fdd8 	bl	8000494 <xtime>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fdd4 	bl	8000494 <xtime>
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff fdd0 	bl	8000494 <xtime>
 80008f4:	4603      	mov	r3, r0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fdcc 	bl	8000494 <xtime>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	4053      	eors	r3, r2
 8000904:	b2dc      	uxtb	r4, r3
 8000906:	78fb      	ldrb	r3, [r7, #3]
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fdc3 	bl	8000494 <xtime>
 800090e:	4603      	mov	r3, r0
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fdbf 	bl	8000494 <xtime>
 8000916:	4603      	mov	r3, r0
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fdbb 	bl	8000494 <xtime>
 800091e:	4603      	mov	r3, r0
 8000920:	4063      	eors	r3, r4
 8000922:	b2dc      	uxtb	r4, r3
 8000924:	78bb      	ldrb	r3, [r7, #2]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fdb4 	bl	8000494 <xtime>
 800092c:	4603      	mov	r3, r0
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fdb0 	bl	8000494 <xtime>
 8000934:	4603      	mov	r3, r0
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fdac 	bl	8000494 <xtime>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	78bb      	ldrb	r3, [r7, #2]
 8000942:	4053      	eors	r3, r2
 8000944:	b2db      	uxtb	r3, r3
 8000946:	4063      	eors	r3, r4
 8000948:	b2dc      	uxtb	r4, r3
 800094a:	787b      	ldrb	r3, [r7, #1]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fda1 	bl	8000494 <xtime>
 8000952:	4603      	mov	r3, r0
 8000954:	461d      	mov	r5, r3
 8000956:	787b      	ldrb	r3, [r7, #1]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fd9b 	bl	8000494 <xtime>
 800095e:	4603      	mov	r3, r0
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fd97 	bl	8000494 <xtime>
 8000966:	4603      	mov	r3, r0
 8000968:	406b      	eors	r3, r5
 800096a:	b2dd      	uxtb	r5, r3
 800096c:	787b      	ldrb	r3, [r7, #1]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fd90 	bl	8000494 <xtime>
 8000974:	4603      	mov	r3, r0
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fd8c 	bl	8000494 <xtime>
 800097c:	4603      	mov	r3, r0
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fd88 	bl	8000494 <xtime>
 8000984:	4603      	mov	r3, r0
 8000986:	406b      	eors	r3, r5
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4063      	eors	r3, r4
 800098c:	b2dc      	uxtb	r4, r3
 800098e:	783b      	ldrb	r3, [r7, #0]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fd7f 	bl	8000494 <xtime>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	783b      	ldrb	r3, [r7, #0]
 800099c:	4053      	eors	r3, r2
 800099e:	b2dd      	uxtb	r5, r3
 80009a0:	783b      	ldrb	r3, [r7, #0]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fd76 	bl	8000494 <xtime>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fd72 	bl	8000494 <xtime>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fd6e 	bl	8000494 <xtime>
 80009b8:	4603      	mov	r3, r0
 80009ba:	406b      	eors	r3, r5
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4a6f      	ldr	r2, [pc, #444]	; (8000b7c <InvMixColumns+0x6ac>)
 80009c0:	6812      	ldr	r2, [r2, #0]
 80009c2:	4063      	eors	r3, r4
 80009c4:	b2d9      	uxtb	r1, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	460a      	mov	r2, r1
 80009ce:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fd5e 	bl	8000494 <xtime>
 80009d8:	4603      	mov	r3, r0
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff fd5a 	bl	8000494 <xtime>
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff fd56 	bl	8000494 <xtime>
 80009e8:	4603      	mov	r3, r0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fd52 	bl	8000494 <xtime>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fd4e 	bl	8000494 <xtime>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fd4a 	bl	8000494 <xtime>
 8000a00:	78bb      	ldrb	r3, [r7, #2]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fd46 	bl	8000494 <xtime>
 8000a08:	78bb      	ldrb	r3, [r7, #2]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fd42 	bl	8000494 <xtime>
 8000a10:	4603      	mov	r3, r0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fd3e 	bl	8000494 <xtime>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fd3a 	bl	8000494 <xtime>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fd36 	bl	8000494 <xtime>
 8000a28:	787b      	ldrb	r3, [r7, #1]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fd32 	bl	8000494 <xtime>
 8000a30:	787b      	ldrb	r3, [r7, #1]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fd2e 	bl	8000494 <xtime>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fd2a 	bl	8000494 <xtime>
 8000a40:	787b      	ldrb	r3, [r7, #1]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fd26 	bl	8000494 <xtime>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fd22 	bl	8000494 <xtime>
 8000a50:	4603      	mov	r3, r0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff fd1e 	bl	8000494 <xtime>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fd1a 	bl	8000494 <xtime>
 8000a60:	783b      	ldrb	r3, [r7, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fd16 	bl	8000494 <xtime>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fd12 	bl	8000494 <xtime>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fd0e 	bl	8000494 <xtime>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fd0a 	bl	8000494 <xtime>
 8000a80:	78fb      	ldrb	r3, [r7, #3]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fd06 	bl	8000494 <xtime>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	4053      	eors	r3, r2
 8000a90:	b2dc      	uxtb	r4, r3
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fcfd 	bl	8000494 <xtime>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fcf9 	bl	8000494 <xtime>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fcf5 	bl	8000494 <xtime>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4063      	eors	r3, r4
 8000aae:	b2dc      	uxtb	r4, r3
 8000ab0:	78bb      	ldrb	r3, [r7, #2]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fcee 	bl	8000494 <xtime>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fcea 	bl	8000494 <xtime>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	78bb      	ldrb	r3, [r7, #2]
 8000ac6:	4053      	eors	r3, r2
 8000ac8:	b2dd      	uxtb	r5, r3
 8000aca:	78bb      	ldrb	r3, [r7, #2]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fce1 	bl	8000494 <xtime>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fcdd 	bl	8000494 <xtime>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fcd9 	bl	8000494 <xtime>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	406b      	eors	r3, r5
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4063      	eors	r3, r4
 8000aea:	b2dc      	uxtb	r4, r3
 8000aec:	787b      	ldrb	r3, [r7, #1]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fcd0 	bl	8000494 <xtime>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fccc 	bl	8000494 <xtime>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fcc8 	bl	8000494 <xtime>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	787b      	ldrb	r3, [r7, #1]
 8000b0a:	4053      	eors	r3, r2
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4063      	eors	r3, r4
 8000b10:	b2dc      	uxtb	r4, r3
 8000b12:	783b      	ldrb	r3, [r7, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fcbd 	bl	8000494 <xtime>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461d      	mov	r5, r3
 8000b1e:	783b      	ldrb	r3, [r7, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff fcb7 	bl	8000494 <xtime>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fcb3 	bl	8000494 <xtime>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	406b      	eors	r3, r5
 8000b32:	b2dd      	uxtb	r5, r3
 8000b34:	783b      	ldrb	r3, [r7, #0]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fcac 	bl	8000494 <xtime>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fca8 	bl	8000494 <xtime>
 8000b44:	4603      	mov	r3, r0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fca4 	bl	8000494 <xtime>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	406b      	eors	r3, r5
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <InvMixColumns+0x6ac>)
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	4063      	eors	r3, r4
 8000b58:	b2d9      	uxtb	r1, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	460a      	mov	r2, r1
 8000b62:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3301      	adds	r3, #1
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	f77f acb5 	ble.w	80004dc <InvMixColumns+0xc>
  }
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b7c:	200002ac 	.word	0x200002ac

08000b80 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(void)
{
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e020      	b.n	8000bce <InvSubBytes+0x4e>
  {
    for (j = 0; j < 4; ++j)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71bb      	strb	r3, [r7, #6]
 8000b90:	e017      	b.n	8000bc2 <InvSubBytes+0x42>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <InvSubBytes+0x60>)
 8000b94:	6819      	ldr	r1, [r3, #0]
 8000b96:	79ba      	ldrb	r2, [r7, #6]
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	0092      	lsls	r2, r2, #2
 8000b9c:	440a      	add	r2, r1
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4a0f      	ldr	r2, [pc, #60]	; (8000be0 <InvSubBytes+0x60>)
 8000ba4:	6815      	ldr	r5, [r2, #0]
 8000ba6:	79be      	ldrb	r6, [r7, #6]
 8000ba8:	79fc      	ldrb	r4, [r7, #7]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fb56 	bl	800025c <getSBoxInvert>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	00b3      	lsls	r3, r6, #2
 8000bb6:	442b      	add	r3, r5
 8000bb8:	4423      	add	r3, r4
 8000bba:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000bbc:	79bb      	ldrb	r3, [r7, #6]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	71bb      	strb	r3, [r7, #6]
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d9e4      	bls.n	8000b92 <InvSubBytes+0x12>
  for (i = 0; i < 4; ++i)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	71fb      	strb	r3, [r7, #7]
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d9db      	bls.n	8000b8c <InvSubBytes+0xc>
    }
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200002ac 	.word	0x200002ac

08000be4 <InvShiftRows>:

static void InvShiftRows(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  uint8_t temp;

  // Rotate first row 1 columns to right
  temp = (*state)[3][1];
 8000bea:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <InvShiftRows+0xb0>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	7b5b      	ldrb	r3, [r3, #13]
 8000bf0:	71fb      	strb	r3, [r7, #7]
  (*state)[3][1] = (*state)[2][1];
 8000bf2:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <InvShiftRows+0xb0>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <InvShiftRows+0xb0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	7a52      	ldrb	r2, [r2, #9]
 8000bfc:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8000bfe:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <InvShiftRows+0xb0>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <InvShiftRows+0xb0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	7952      	ldrb	r2, [r2, #5]
 8000c08:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8000c0a:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <InvShiftRows+0xb0>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <InvShiftRows+0xb0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	7852      	ldrb	r2, [r2, #1]
 8000c14:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <InvShiftRows+0xb0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right
  temp = (*state)[0][2];
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <InvShiftRows+0xb0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	789b      	ldrb	r3, [r3, #2]
 8000c24:	71fb      	strb	r3, [r7, #7]
  (*state)[0][2] = (*state)[2][2];
 8000c26:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <InvShiftRows+0xb0>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <InvShiftRows+0xb0>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	7a92      	ldrb	r2, [r2, #10]
 8000c30:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <InvShiftRows+0xb0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	79fa      	ldrb	r2, [r7, #7]
 8000c38:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <InvShiftRows+0xb0>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	799b      	ldrb	r3, [r3, #6]
 8000c40:	71fb      	strb	r3, [r7, #7]
  (*state)[1][2] = (*state)[3][2];
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <InvShiftRows+0xb0>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <InvShiftRows+0xb0>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	7b92      	ldrb	r2, [r2, #14]
 8000c4c:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <InvShiftRows+0xb0>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <InvShiftRows+0xb0>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	78db      	ldrb	r3, [r3, #3]
 8000c5c:	71fb      	strb	r3, [r7, #7]
  (*state)[0][3] = (*state)[1][3];
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <InvShiftRows+0xb0>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <InvShiftRows+0xb0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	79d2      	ldrb	r2, [r2, #7]
 8000c68:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <InvShiftRows+0xb0>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <InvShiftRows+0xb0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	7ad2      	ldrb	r2, [r2, #11]
 8000c74:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <InvShiftRows+0xb0>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <InvShiftRows+0xb0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	7bd2      	ldrb	r2, [r2, #15]
 8000c80:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <InvShiftRows+0xb0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	79fa      	ldrb	r2, [r7, #7]
 8000c88:	73da      	strb	r2, [r3, #15]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	200002ac 	.word	0x200002ac

08000c98 <InvCipher>:
  ShiftRows();
  AddRoundKey(Nr);
}

static void InvCipher(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
  uint8_t round=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	71fb      	strb	r3, [r7, #7]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr);
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f7ff fbb8 	bl	8000418 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 8000ca8:	2309      	movs	r3, #9
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	e00c      	b.n	8000cc8 <InvCipher+0x30>
  {
    InvShiftRows();
 8000cae:	f7ff ff99 	bl	8000be4 <InvShiftRows>
    InvSubBytes();
 8000cb2:	f7ff ff65 	bl	8000b80 <InvSubBytes>
    AddRoundKey(round);
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fbad 	bl	8000418 <AddRoundKey>
    InvMixColumns();
 8000cbe:	f7ff fc07 	bl	80004d0 <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1ef      	bne.n	8000cae <InvCipher+0x16>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows();
 8000cce:	f7ff ff89 	bl	8000be4 <InvShiftRows>
  InvSubBytes();
 8000cd2:	f7ff ff55 	bl	8000b80 <InvSubBytes>
  AddRoundKey(0);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fb9e 	bl	8000418 <AddRoundKey>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <XorWithIv>:

#if defined(CBC) && (CBC == 1)


static void XorWithIv(uint8_t* buf)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for (i = 0; i < BLOCKLEN; ++i) //WAS for(i = 0; i < KEYLEN; ++i) but the block in AES is always 128bit so 16 bytes!
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
 8000cf0:	e011      	b.n	8000d16 <XorWithIv+0x32>
  {
    buf[i] ^= Iv[i];
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	7819      	ldrb	r1, [r3, #0]
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <XorWithIv+0x44>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4413      	add	r3, r2
 8000d02:	781a      	ldrb	r2, [r3, #0]
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	4403      	add	r3, r0
 8000d0a:	404a      	eors	r2, r1
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < BLOCKLEN; ++i) //WAS for(i = 0; i < KEYLEN; ++i) but the block in AES is always 128bit so 16 bytes!
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3301      	adds	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d9ea      	bls.n	8000cf2 <XorWithIv+0xe>
  }
}
 8000d1c:	bf00      	nop
 8000d1e:	bf00      	nop
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	20000364 	.word	0x20000364

08000d2c <AES_CBC_decrypt_buffer>:
    Cipher();
  }
}

void AES_CBC_decrypt_buffer(uint8_t* output, uint8_t* input, uint32_t length, const uint8_t* key, const uint8_t* iv)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	603b      	str	r3, [r7, #0]
  uintptr_t i;
  uint8_t extra = length % BLOCKLEN; /* Remaining bytes in the last non-full block */
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	74fb      	strb	r3, [r7, #19]

  // Skip the key expansion if key is passed as 0
  if (0 != key)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d004      	beq.n	8000d54 <AES_CBC_decrypt_buffer+0x28>
  {
    Key = key;
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <AES_CBC_decrypt_buffer+0x98>)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	6013      	str	r3, [r2, #0]
    KeyExpansion();
 8000d50:	f7ff fa94 	bl	800027c <KeyExpansion>
  }

  // If iv is passed as 0, we continue to encrypt without re-setting the Iv
  if (iv != 0)
 8000d54:	6a3b      	ldr	r3, [r7, #32]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <AES_CBC_decrypt_buffer+0x34>
  {
    Iv = (uint8_t*)iv;
 8000d5a:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <AES_CBC_decrypt_buffer+0x9c>)
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	6013      	str	r3, [r2, #0]
  }

  for (i = 0; i < length; i += BLOCKLEN)
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
 8000d64:	e018      	b.n	8000d98 <AES_CBC_decrypt_buffer+0x6c>
  {
    memcpy(output, input, BLOCKLEN);
 8000d66:	2210      	movs	r2, #16
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	68f8      	ldr	r0, [r7, #12]
 8000d6c:	f004 fcde 	bl	800572c <memcpy>
    state = (state_t*)output;
 8000d70:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <AES_CBC_decrypt_buffer+0xa0>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6013      	str	r3, [r2, #0]
    InvCipher();
 8000d76:	f7ff ff8f 	bl	8000c98 <InvCipher>
    XorWithIv(output);
 8000d7a:	68f8      	ldr	r0, [r7, #12]
 8000d7c:	f7ff ffb2 	bl	8000ce4 <XorWithIv>
    Iv = input;
 8000d80:	4a11      	ldr	r2, [pc, #68]	; (8000dc8 <AES_CBC_decrypt_buffer+0x9c>)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	6013      	str	r3, [r2, #0]
    input += BLOCKLEN;
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	3310      	adds	r3, #16
 8000d8a:	60bb      	str	r3, [r7, #8]
    output += BLOCKLEN;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	3310      	adds	r3, #16
 8000d90:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < length; i += BLOCKLEN)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3310      	adds	r3, #16
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3e2      	bcc.n	8000d66 <AES_CBC_decrypt_buffer+0x3a>
  }

  if (extra)
 8000da0:	7cfb      	ldrb	r3, [r7, #19]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00a      	beq.n	8000dbc <AES_CBC_decrypt_buffer+0x90>
  {
    memcpy(output, input, extra);
 8000da6:	7cfb      	ldrb	r3, [r7, #19]
 8000da8:	461a      	mov	r2, r3
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f004 fcbd 	bl	800572c <memcpy>
    state = (state_t*)output;
 8000db2:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <AES_CBC_decrypt_buffer+0xa0>)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6013      	str	r3, [r2, #0]
    InvCipher();
 8000db8:	f7ff ff6e 	bl	8000c98 <InvCipher>
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000360 	.word	0x20000360
 8000dc8:	20000364 	.word	0x20000364
 8000dcc:	200002ac 	.word	0x200002ac

08000dd0 <crc_ccitt_byte>:
 * @param  crc	: last calculated crc value
 * @param  c	: new character to be included in new iterative crc calculation
 * @retval unsigned short : new iterative crc value
 */
static inline unsigned short crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	460a      	mov	r2, r1
 8000dda:	80fb      	strh	r3, [r7, #6]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	717b      	strb	r3, [r7, #5]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	0a1b      	lsrs	r3, r3, #8
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	88f9      	ldrh	r1, [r7, #6]
 8000de8:	797b      	ldrb	r3, [r7, #5]
 8000dea:	404b      	eors	r3, r1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4905      	ldr	r1, [pc, #20]	; (8000e04 <crc_ccitt_byte+0x34>)
 8000df0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000df4:	4053      	eors	r3, r2
 8000df6:	b29b      	uxth	r3, r3
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	08006770 	.word	0x08006770

08000e08 <crc16>:
 * @param  data_p	: raw data to be use in crc calculation
 * @param  length	: raw data length
 * @retval unsigned short : crc value
 */
unsigned short crc16(unsigned char *data_p, unsigned short length)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]
	unsigned int crc = 0x0000;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
	while (length--)
 8000e18:	e00a      	b.n	8000e30 <crc16+0x28>
		crc = crc_ccitt_byte(crc, *data_p++);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	b298      	uxth	r0, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	4619      	mov	r1, r3
 8000e28:	f7ff ffd2 	bl	8000dd0 <crc_ccitt_byte>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60fb      	str	r3, [r7, #12]
	while (length--)
 8000e30:	887b      	ldrh	r3, [r7, #2]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	807a      	strh	r2, [r7, #2]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1ef      	bne.n	8000e1a <crc16+0x12>
	return (crc>>8) | (crc<<8);;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_DMA_Init+0x58>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a13      	ldr	r2, [pc, #76]	; (8000eac <MX_DMA_Init+0x58>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6153      	str	r3, [r2, #20]
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_DMA_Init+0x58>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	200c      	movs	r0, #12
 8000e78:	f002 f875 	bl	8002f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e7c:	200c      	movs	r0, #12
 8000e7e:	f002 f88e 	bl	8002f9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	200d      	movs	r0, #13
 8000e88:	f002 f86d 	bl	8002f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000e8c:	200d      	movs	r0, #13
 8000e8e:	f002 f886 	bl	8002f9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	200e      	movs	r0, #14
 8000e98:	f002 f865 	bl	8002f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000e9c:	200e      	movs	r0, #14
 8000e9e:	f002 f87e 	bl	8002f9e <HAL_NVIC_EnableIRQ>

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <FLASH_If_Init>:
 * @brief  Unlocks Flash for write access
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef FLASH_If_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	 HAL_StatusTypeDef status = HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	/* Unlock the Program memory */
	status = HAL_FLASH_Unlock();
 8000eba:	f002 fd85 	bl	80039c8 <HAL_FLASH_Unlock>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	if(status != HAL_OK)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <FLASH_If_Init+0x1c>
		return status;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	e007      	b.n	8000edc <FLASH_If_Init+0x2c>
	/* Clear all FLASH flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <FLASH_If_Init+0x34>)
 8000ece:	2234      	movs	r2, #52	; 0x34
 8000ed0:	60da      	str	r2, [r3, #12]
	/* Unlock the Program memory */
	status = HAL_FLASH_Lock();
 8000ed2:	f002 fd9f 	bl	8003a14 <HAL_FLASH_Lock>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
	return status;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <FLASH_If_Erase>:
 * @param  start: start of user flash area
 * @retval FLASHIF_OK : user flash area successfully erased
 *         FLASHIF_ERASEKO : error occurred
 */
uint32_t FLASH_If_Erase(uint32_t start,uint32_t length)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	uint32_t NbrOfPages = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef status = HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000f00:	f002 fd62 	bl	80039c8 <HAL_FLASH_Unlock>

	/* Get the sector where start the user flash area */
	NbrOfPages = length/FLASH_PAGE_SIZE;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	0adb      	lsrs	r3, r3, #11
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
	pEraseInit.PageAddress = start;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	617b      	str	r3, [r7, #20]
	//pEraseInit.Banks = FLASH_BANK_1;
	pEraseInit.NbPages = NbrOfPages;
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	61bb      	str	r3, [r7, #24]
	status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 8000f16:	f107 021c 	add.w	r2, r7, #28
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fe39 	bl	8003b98 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000f2c:	f002 fd72 	bl	8003a14 <HAL_FLASH_Lock>

	if (status != HAL_OK)
 8000f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <FLASH_If_Erase+0x54>
	{
		/* Error occurred while page erase */
		return FLASHIF_ERASEKO;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e000      	b.n	8000f3e <FLASH_If_Erase+0x56>
	}

	return FLASHIF_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <FLASH_If_Write>:
 * @retval uint32_t 0: Data successfully written to Flash memory
 *         1: Error occurred while writing data in Flash memory
 *         2: Written Data in flash memory is different from expected one
 */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000f56:	f002 fd37 	bl	80039c8 <HAL_FLASH_Unlock>

	for (i = 0; i < length; i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	e022      	b.n	8000fa6 <FLASH_If_Write+0x60>
	{
		/* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, destination, (p_source[i])) == HAL_OK)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	4413      	add	r3, r2
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	68f9      	ldr	r1, [r7, #12]
 8000f72:	2002      	movs	r0, #2
 8000f74:	f002 fcb8 	bl	80038e8 <HAL_FLASH_Program>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10e      	bne.n	8000f9c <FLASH_If_Write+0x56>
		{
			/* Check the written value */
			if (*(uint32_t*)destination != *(uint32_t*)(p_source+i))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	440b      	add	r3, r1
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d001      	beq.n	8000f94 <FLASH_If_Write+0x4e>
			{
				/* Flash content doesn't match SRAM content */
				return(FLASHIF_WRITINGCTRL_ERROR);
 8000f90:	2302      	movs	r3, #2
 8000f92:	e00f      	b.n	8000fb4 <FLASH_If_Write+0x6e>
			}
			/* Increment FLASH destination address */
			destination += 4;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3304      	adds	r3, #4
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e001      	b.n	8000fa0 <FLASH_If_Write+0x5a>
		}
		else
		{
			/* Error occurred while writing data in Flash memory */
			return (FLASHIF_WRITING_ERROR);
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e009      	b.n	8000fb4 <FLASH_If_Write+0x6e>
	for (i = 0; i < length; i++)
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3d8      	bcc.n	8000f60 <FLASH_If_Write+0x1a>
		}
	}

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000fae:	f002 fd31 	bl	8003a14 <HAL_FLASH_Lock>

	return (FLASHIF_OK);
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_Read_Unique_ID>:
/**
 * @brief  Read MCU unique ID.
 * @param  id: read ID value as pointer
 * @retval uint32_t HAL_OK if successful, otherwise returns an flash error code.
 */
uint32_t HAL_Read_Unique_ID(uint32_t *id){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	uint32_t ul_rc = HAL_OK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
	uint8_t index = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	76fb      	strb	r3, [r7, #27]

	uint32_t id0 = HAL_GetUIDw0();
 8000fcc:	f001 fed6 	bl	8002d7c <HAL_GetUIDw0>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	617b      	str	r3, [r7, #20]
	memcpy(&id[index],&id0,sizeof(uint32_t));
 8000fd4:	7efb      	ldrb	r3, [r7, #27]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	601a      	str	r2, [r3, #0]
	index++;
 8000fe0:	7efb      	ldrb	r3, [r7, #27]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	76fb      	strb	r3, [r7, #27]

	uint32_t id1 = HAL_GetUIDw1();
 8000fe6:	f001 fed3 	bl	8002d90 <HAL_GetUIDw1>
 8000fea:	4603      	mov	r3, r0
 8000fec:	613b      	str	r3, [r7, #16]
	memcpy(&id[index],&id1,sizeof(uint32_t));
 8000fee:	7efb      	ldrb	r3, [r7, #27]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	601a      	str	r2, [r3, #0]
	index++;
 8000ffa:	7efb      	ldrb	r3, [r7, #27]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	76fb      	strb	r3, [r7, #27]

	uint32_t id2 = HAL_GetUIDw2();
 8001000:	f001 fed0 	bl	8002da4 <HAL_GetUIDw2>
 8001004:	4603      	mov	r3, r0
 8001006:	60fb      	str	r3, [r7, #12]
	memcpy(&id[index],&id2,sizeof(uint32_t));
 8001008:	7efb      	ldrb	r3, [r7, #27]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	4413      	add	r3, r2
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	601a      	str	r2, [r3, #0]
	return ul_rc;
 8001014:	69fb      	ldr	r3, [r7, #28]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b32      	ldr	r3, [pc, #200]	; (8001100 <MX_GPIO_Init+0xe0>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a31      	ldr	r2, [pc, #196]	; (8001100 <MX_GPIO_Init+0xe0>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <MX_GPIO_Init+0xe0>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <MX_GPIO_Init+0xe0>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <MX_GPIO_Init+0xe0>)
 8001052:	f043 0320 	orr.w	r3, r3, #32
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <MX_GPIO_Init+0xe0>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0320 	and.w	r3, r3, #32
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_GPIO_Init+0xe0>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a25      	ldr	r2, [pc, #148]	; (8001100 <MX_GPIO_Init+0xe0>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_GPIO_Init+0xe0>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f640 110c 	movw	r1, #2316	; 0x90c
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <MX_GPIO_Init+0xe4>)
 8001084:	f002 ffc4 	bl	8004010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT_LED1_Pin|INT_LED2_Pin, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800108e:	481e      	ldr	r0, [pc, #120]	; (8001108 <MX_GPIO_Init+0xe8>)
 8001090:	f002 ffbe 	bl	8004010 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin;
 8001094:	f640 130c 	movw	r3, #2316	; 0x90c
 8001098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4619      	mov	r1, r3
 80010ac:	4815      	ldr	r0, [pc, #84]	; (8001104 <MX_GPIO_Init+0xe4>)
 80010ae:	f002 fe1b 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_MODE_SEL_Pin;
 80010b2:	2320      	movs	r3, #32
 80010b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <MX_GPIO_Init+0xec>)
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STM_MODE_SEL_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	4810      	ldr	r0, [pc, #64]	; (8001108 <MX_GPIO_Init+0xe8>)
 80010c6:	f002 fe0f 	bl	8003ce8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INT_LED1_Pin|INT_LED2_Pin;
 80010ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2302      	movs	r3, #2
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4619      	mov	r1, r3
 80010e2:	4809      	ldr	r0, [pc, #36]	; (8001108 <MX_GPIO_Init+0xe8>)
 80010e4:	f002 fe00 	bl	8003ce8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2017      	movs	r0, #23
 80010ee:	f001 ff3a 	bl	8002f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010f2:	2017      	movs	r0, #23
 80010f4:	f001 ff53 	bl	8002f9e <HAL_NVIC_EnableIRQ>

}
 80010f8:	bf00      	nop
 80010fa:	3720      	adds	r7, #32
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	40010800 	.word	0x40010800
 8001108:	40011000 	.word	0x40011000
 800110c:	10310000 	.word	0x10310000

08001110 <iap_JumpToApplication>:
 * @param  None
 * @retval None
 */

void iap_JumpToApplication(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
	pFunction mainApplication;

	/* Retrieve values */
	uint32_t mainAppAddr =  (uint32_t)(APPLICATION_ADDRESS);
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <iap_JumpToApplication+0x44>)
 8001118:	60fb      	str	r3, [r7, #12]
	uint32_t mainAppStack = (uint32_t)*((uint32_t*)mainAppAddr);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60bb      	str	r3, [r7, #8]
	mainApplication = (pFunction)*(uint32_t*)(mainAppAddr + 4); // Corrected!!!
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3304      	adds	r3, #4
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	607b      	str	r3, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f383 8808 	msr	MSP, r3
}
 8001136:	bf00      	nop

	__disable_irq();
	/* Set a valid stack pointer for the application */
	__set_MSP(mainAppStack);
	SCB->VTOR = mainAppAddr;
 8001138:	4a07      	ldr	r2, [pc, #28]	; (8001158 <iap_JumpToApplication+0x48>)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6093      	str	r3, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800113e:	b662      	cpsie	i
}
 8001140:	bf00      	nop
	__enable_irq();

	dbprintf("Jumping to application...\n");
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <iap_JumpToApplication+0x4c>)
 8001144:	f001 fd80 	bl	8002c48 <dbprintf>
	/* Start the application */
	mainApplication();
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4798      	blx	r3
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	08008000 	.word	0x08008000
 8001158:	e000ed00 	.word	0xe000ed00
 800115c:	08005ff0 	.word	0x08005ff0

08001160 <iap_CheckApplication>:
 *         IAP_APP_ADDR_NOT_IN_RAGE : jumping addres is not in flash area occurred
 *         IAP_APP_SIZE_OVER_RAGE 	: application size is out of range
 *         IAP_APP_CHCKSUM_ERR 		: application checksum is not correct
 */
uint8_t iap_CheckApplication(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a4      	sub	sp, #144	; 0x90
 8001164:	af00      	add	r7, sp, #0
	SHA1_CTX sha1_ctx;
	uint8_t csha1[20];

	uint32_t length;
	unsigned char *p = (uint8_t *)(APPLICATION_ADDRESS);
 8001166:	4b31      	ldr	r3, [pc, #196]	; (800122c <iap_CheckApplication+0xcc>)
 8001168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint32_t JumpAddress= *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <iap_CheckApplication+0xd0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	if ((JumpAddress < APPLICATION_ADDRESS)|| (JumpAddress > APPLICATION_ADDRESS + MAX_APPLICATION_SIZE)){
 8001174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001178:	4a2c      	ldr	r2, [pc, #176]	; (800122c <iap_CheckApplication+0xcc>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d304      	bcc.n	8001188 <iap_CheckApplication+0x28>
 800117e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001182:	4a2c      	ldr	r2, [pc, #176]	; (8001234 <iap_CheckApplication+0xd4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d908      	bls.n	800119a <iap_CheckApplication+0x3a>
		dbprintf("IAP Application address not in range error!!! JumpAddress: %08X APPLICATION_ADDRESS:[ %08X-%08X ]",JumpAddress,APPLICATION_ADDRESS,(APPLICATION_ADDRESS + MAX_APPLICATION_SIZE));
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <iap_CheckApplication+0xd4>)
 800118a:	4a28      	ldr	r2, [pc, #160]	; (800122c <iap_CheckApplication+0xcc>)
 800118c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001190:	4829      	ldr	r0, [pc, #164]	; (8001238 <iap_CheckApplication+0xd8>)
 8001192:	f001 fd59 	bl	8002c48 <dbprintf>
		return IAP_APP_ADDR_NOT_IN_RAGE;
 8001196:	2301      	movs	r3, #1
 8001198:	e043      	b.n	8001222 <iap_CheckApplication+0xc2>
	}
	length = *(__IO uint32_t*) (APPLICATION_LEN_ADDRESS);
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <iap_CheckApplication+0xdc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	if ((length <= VECTOR_TABLE_SIZE) || (length > MAX_APPLICATION_SIZE))
 80011a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011a6:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 80011aa:	d904      	bls.n	80011b6 <iap_CheckApplication+0x56>
 80011ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011b0:	f5b3 3f5c 	cmp.w	r3, #225280	; 0x37000
 80011b4:	d90a      	bls.n	80011cc <iap_CheckApplication+0x6c>
	{
		dbprintf("IAP Application size is over range error!!! length: %d VECTOR_TABLE_SIZE: %d MAX_APPLICATION_SIZE: %d",length,VECTOR_TABLE_SIZE,MAX_APPLICATION_SIZE);
 80011b6:	f44f 335c 	mov.w	r3, #225280	; 0x37000
 80011ba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80011be:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80011c2:	481f      	ldr	r0, [pc, #124]	; (8001240 <iap_CheckApplication+0xe0>)
 80011c4:	f001 fd40 	bl	8002c48 <dbprintf>
		return IAP_APP_SIZE_OVER_RAGE;
 80011c8:	2302      	movs	r3, #2
 80011ca:	e02a      	b.n	8001222 <iap_CheckApplication+0xc2>
	}

	sha1_init(&sha1_ctx);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 f8ef 	bl	80023b4 <sha1_init>
	sha1_update(&sha1_ctx,p,length);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80011de:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 f926 	bl	8002434 <sha1_update>
	sha1_final(&sha1_ctx,csha1);
 80011e8:	463a      	mov	r2, r7
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 f95d 	bl	80024b0 <sha1_final>

	if (memcmp(csha1,&p[length],(size_t)20)!=0)
 80011f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80011fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80011fe:	18d1      	adds	r1, r2, r3
 8001200:	463b      	mov	r3, r7
 8001202:	2214      	movs	r2, #20
 8001204:	4618      	mov	r0, r3
 8001206:	f004 fa83 	bl	8005710 <memcmp>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <iap_CheckApplication+0xba>
	{
		dbprintf("IAP Checksum Error!!!");
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <iap_CheckApplication+0xe4>)
 8001212:	f001 fd19 	bl	8002c48 <dbprintf>
		return IAP_APP_CHCKSUM_ERR;
 8001216:	2303      	movs	r3, #3
 8001218:	e003      	b.n	8001222 <iap_CheckApplication+0xc2>
	}
	dbprintf("IAP APP Success.");
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <iap_CheckApplication+0xe8>)
 800121c:	f001 fd14 	bl	8002c48 <dbprintf>
	return IAP_APP_SUCCESS;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3790      	adds	r7, #144	; 0x90
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	08008000 	.word	0x08008000
 8001230:	08008004 	.word	0x08008004
 8001234:	0803f000 	.word	0x0803f000
 8001238:	0800600c 	.word	0x0800600c
 800123c:	080081e4 	.word	0x080081e4
 8001240:	08006070 	.word	0x08006070
 8001244:	080060d8 	.word	0x080060d8
 8001248:	080060f0 	.word	0x080060f0

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t appStatus = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001256:	f001 fd2f 	bl	8002cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125a:	f000 f83b 	bl	80012d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f7ff fedf 	bl	8001020 <MX_GPIO_Init>
  MX_DMA_Init();
 8001262:	f7ff fdf7 	bl	8000e54 <MX_DMA_Init>
  MX_SPI1_Init();
 8001266:	f001 f9ff 	bl	8002668 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800126a:	f001 fc21 	bl	8002ab0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	rt_get_app_info();
 800126e:	f000 fde9 	bl	8001e44 <rt_get_app_info>
	rt_init();
 8001272:	f000 fec5 	bl	8002000 <rt_init>
	//			stay in bootloader mode
	// 		else
	//			jump to application after clearing iapMailbox
	// else
	//			stay in bootloader mode
	dbprintf("Checking....");
 8001276:	4812      	ldr	r0, [pc, #72]	; (80012c0 <main+0x74>)
 8001278:	f001 fce6 	bl	8002c48 <dbprintf>
	appStatus = iap_CheckApplication();  /*  App requested to enter bootloader */
 800127c:	f7ff ff70 	bl	8001160 <iap_CheckApplication>
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
	if (appStatus == IAP_APP_SUCCESS)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d117      	bne.n	80012ba <main+0x6e>
	{
		if ((iapMailbox[0] == MAGIC_1) && (iapMailbox[1] == MAGIC_2))
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <main+0x78>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <main+0x7c>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d110      	bne.n	80012b6 <main+0x6a>
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <main+0x78>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <main+0x80>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10b      	bne.n	80012b6 <main+0x6a>
		{
			dbprintf("Magic !!!");
 800129e:	480c      	ldr	r0, [pc, #48]	; (80012d0 <main+0x84>)
 80012a0:	f001 fcd2 	bl	8002c48 <dbprintf>
			iapMailbox[0] = 0;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <main+0x78>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
			iapMailbox[1] = 0;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <main+0x78>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
			bootloader();
 80012b0:	f000 f8e6 	bl	8001480 <bootloader>
 80012b4:	e001      	b.n	80012ba <main+0x6e>
		}
		else
		{
			normalboot();
 80012b6:	f000 f8f5 	bl	80014a4 <normalboot>
		}
	}
	bootloader();
 80012ba:	f000 f8e1 	bl	8001480 <bootloader>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80012be:	e7fe      	b.n	80012be <main+0x72>
 80012c0:	08006104 	.word	0x08006104
 80012c4:	20000200 	.word	0x20000200
 80012c8:	524f5441 	.word	0x524f5441
 80012cc:	54454b4e 	.word	0x54454b4e
 80012d0:	08006114 	.word	0x08006114

080012d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b090      	sub	sp, #64	; 0x40
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	2228      	movs	r2, #40	; 0x28
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f004 fa30 	bl	8005748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001304:	2301      	movs	r3, #1
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001312:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fec1 	bl	80040a4 <HAL_RCC_OscConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001328:	f000 f8d4 	bl	80014d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	230f      	movs	r3, #15
 800132e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001330:	2302      	movs	r3, #2
 8001332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2101      	movs	r1, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f003 f92c 	bl	80045a4 <HAL_RCC_ClockConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001352:	f000 f8bf 	bl	80014d4 <Error_Handler>
  }
}
 8001356:	bf00      	nop
 8001358:	3740      	adds	r7, #64	; 0x40
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <Set_Comms_Mode>:

/* USER CODE BEGIN 4 */

void Set_Comms_Mode()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	if (STM_MODE_SEL_GPIO_Port->IDR & STM_MODE_SEL_Pin){
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <Set_Comms_Mode+0x54>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 0320 	and.w	r3, r3, #32
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00f      	beq.n	8001390 <Set_Comms_Mode+0x30>
		g_comms_mode = COMMS_MODE_CONF;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <Set_Comms_Mode+0x58>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
		dbprintf("Conf Mode");
 8001376:	4811      	ldr	r0, [pc, #68]	; (80013bc <Set_Comms_Mode+0x5c>)
 8001378:	f001 fc66 	bl	8002c48 <dbprintf>
		ERR_LED1_On();
 800137c:	2200      	movs	r2, #0
 800137e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001382:	480c      	ldr	r0, [pc, #48]	; (80013b4 <Set_Comms_Mode+0x54>)
 8001384:	f002 fe44 	bl	8004010 <HAL_GPIO_WritePin>
		g_led_flash_mode = LED_MODE_HS_FLASH;
 8001388:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <Set_Comms_Mode+0x60>)
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <Set_Comms_Mode+0x64>)
 800138c:	601a      	str	r2, [r3, #0]
		g_comms_mode = COMMS_MODE_PDIO;
		dbprintf("PDIO Mode");
		ERR_LED1_Off();
		g_led_flash_mode = LED_MODE_MS_FLASH;
	}
}
 800138e:	e00e      	b.n	80013ae <Set_Comms_Mode+0x4e>
		g_comms_mode = COMMS_MODE_PDIO;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <Set_Comms_Mode+0x58>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
		dbprintf("PDIO Mode");
 8001396:	480c      	ldr	r0, [pc, #48]	; (80013c8 <Set_Comms_Mode+0x68>)
 8001398:	f001 fc56 	bl	8002c48 <dbprintf>
		ERR_LED1_Off();
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013a2:	4804      	ldr	r0, [pc, #16]	; (80013b4 <Set_Comms_Mode+0x54>)
 80013a4:	f002 fe34 	bl	8004010 <HAL_GPIO_WritePin>
		g_led_flash_mode = LED_MODE_MS_FLASH;
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <Set_Comms_Mode+0x60>)
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <Set_Comms_Mode+0x6c>)
 80013ac:	601a      	str	r2, [r3, #0]
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40011000 	.word	0x40011000
 80013b8:	2000036a 	.word	0x2000036a
 80013bc:	08006120 	.word	0x08006120
 80013c0:	2000021c 	.word	0x2000021c
 80013c4:	00027100 	.word	0x00027100
 80013c8:	0800612c 	.word	0x0800612c
 80013cc:	0004e200 	.word	0x0004e200

080013d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
	Set_Comms_Mode();
 80013da:	f7ff ffc1 	bl	8001360 <Set_Comms_Mode>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
	rt_bus_proto_bl_dt();
 80013ee:	f000 fcef 	bl	8001dd0 <rt_bus_proto_bl_dt>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <rt_status_led_blink>:

void rt_status_led_blink(void){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	static uint32_t led_blink_counter= 0;

	switch(g_led_flash_mode){
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <rt_status_led_blink+0x6c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <rt_status_led_blink+0x70>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d015      	beq.n	8001436 <rt_status_led_blink+0x3a>
 800140a:	4a18      	ldr	r2, [pc, #96]	; (800146c <rt_status_led_blink+0x70>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d826      	bhi.n	800145e <rt_status_led_blink+0x62>
 8001410:	4a17      	ldr	r2, [pc, #92]	; (8001470 <rt_status_led_blink+0x74>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d00f      	beq.n	8001436 <rt_status_led_blink+0x3a>
 8001416:	4a16      	ldr	r2, [pc, #88]	; (8001470 <rt_status_led_blink+0x74>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d820      	bhi.n	800145e <rt_status_led_blink+0x62>
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <rt_status_led_blink+0x2c>
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <rt_status_led_blink+0x78>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d007      	beq.n	8001436 <rt_status_led_blink+0x3a>
							ERR_LED2_Toggle();
							led_blink_counter = 0;
			}
			break;
		default:
			break;
 8001426:	e01a      	b.n	800145e <rt_status_led_blink+0x62>
			ERR_LED2_Off();
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142e:	4812      	ldr	r0, [pc, #72]	; (8001478 <rt_status_led_blink+0x7c>)
 8001430:	f002 fdee 	bl	8004010 <HAL_GPIO_WritePin>
			break;
 8001434:	e016      	b.n	8001464 <rt_status_led_blink+0x68>
			if((++led_blink_counter) == g_led_flash_mode){
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <rt_status_led_blink+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <rt_status_led_blink+0x80>)
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <rt_status_led_blink+0x80>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <rt_status_led_blink+0x6c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d10a      	bne.n	8001462 <rt_status_led_blink+0x66>
							ERR_LED2_Toggle();
 800144c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <rt_status_led_blink+0x7c>)
 8001452:	f002 fdf5 	bl	8004040 <HAL_GPIO_TogglePin>
							led_blink_counter = 0;
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <rt_status_led_blink+0x80>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
			break;
 800145c:	e001      	b.n	8001462 <rt_status_led_blink+0x66>
			break;
 800145e:	bf00      	nop
 8001460:	e000      	b.n	8001464 <rt_status_led_blink+0x68>
			break;
 8001462:	bf00      	nop
	}
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000021c 	.word	0x2000021c
 800146c:	0009c400 	.word	0x0009c400
 8001470:	0004e200 	.word	0x0004e200
 8001474:	00027100 	.word	0x00027100
 8001478:	40011000 	.word	0x40011000
 800147c:	2000036c 	.word	0x2000036c

08001480 <bootloader>:


void bootloader(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	gRunMode = SWLEVEL_BOOTLOADER;
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <bootloader+0x18>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]
	g_led_flash_mode = LED_MODE_MS_FLASH;
 800148a:	4b04      	ldr	r3, [pc, #16]	; (800149c <bootloader+0x1c>)
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <bootloader+0x20>)
 800148e:	601a      	str	r2, [r3, #0]
	while (1)
	{
		rt_status_led_blink();
 8001490:	f7ff ffb4 	bl	80013fc <rt_status_led_blink>
 8001494:	e7fc      	b.n	8001490 <bootloader+0x10>
 8001496:	bf00      	nop
 8001498:	20000368 	.word	0x20000368
 800149c:	2000021c 	.word	0x2000021c
 80014a0:	0004e200 	.word	0x0004e200

080014a4 <normalboot>:
	}
}


void normalboot(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	dbprintf("Application starting...");
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <normalboot+0x24>)
 80014aa:	f001 fbcd 	bl	8002c48 <dbprintf>
	gRunMode = SWLEVEL_JUMPING;
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <normalboot+0x28>)
 80014b0:	2203      	movs	r2, #3
 80014b2:	701a      	strb	r2, [r3, #0]
	/* For normal boot clear mailbox and jumping to application */
	iapMailbox[0] = 0;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <normalboot+0x2c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
	iapMailbox[1] = 0;
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <normalboot+0x2c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
	iap_JumpToApplication();
 80014c0:	f7ff fe26 	bl	8001110 <iap_JumpToApplication>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	08006138 	.word	0x08006138
 80014cc:	20000368 	.word	0x20000368
 80014d0:	20000200 	.word	0x20000200

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014e4:	f3bf 8f4f 	dsb	sy
}
 80014e8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <__NVIC_SystemReset+0x24>)
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014f2:	4904      	ldr	r1, [pc, #16]	; (8001504 <__NVIC_SystemReset+0x24>)
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <__NVIC_SystemReset+0x28>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014fa:	f3bf 8f4f 	dsb	sy
}
 80014fe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <__NVIC_SystemReset+0x20>
 8001504:	e000ed00 	.word	0xe000ed00
 8001508:	05fa0004 	.word	0x05fa0004

0800150c <rt_bus_proto_frame_pack>:
 * @param  sRT_Command_Packet 	:  structure of the communication protocol packet
 * @param  datalength			:  Communication frame size
 * @retval none
 */
void rt_bus_proto_frame_pack(tRT_Command_Packet sRT_Command_Packet, uint16_t *datalength)
{
 800150c:	b084      	sub	sp, #16
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	f107 0c10 	add.w	ip, r7, #16
 8001518:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t cCRC = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	80fb      	strh	r3, [r7, #6]

	sRT_Command_Packet.stx = PRT_STX;
 8001520:	2301      	movs	r3, #1
 8001522:	743b      	strb	r3, [r7, #16]
	sRT_Command_Packet.address = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	827b      	strh	r3, [r7, #18]
	sRT_Command_Packet.len = (*datalength)+sizeof(sRT_Command_Packet.cmd);
 8001528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	82bb      	strh	r3, [r7, #20]

	cCRC =  crc16((unsigned char *) &sRT_Command_Packet.address, (*datalength)+5);
 8001534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	3305      	adds	r3, #5
 800153c:	b29a      	uxth	r2, r3
 800153e:	f107 0312 	add.w	r3, r7, #18
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fc5f 	bl	8000e08 <crc16>
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
	sRT_Command_Packet.crc = cCRC;
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	sRT_Command_Packet.etx = PRT_ETX;
 8001554:	2303      	movs	r3, #3
 8001556:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a

	int offset = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_DMA_Buf[offset],&sRT_Command_Packet.stx,sizeof(sRT_Command_Packet.stx));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <rt_bus_proto_frame_pack+0xe4>)
 8001562:	4413      	add	r3, r2
 8001564:	7c3a      	ldrb	r2, [r7, #16]
 8001566:	701a      	strb	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.stx);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_DMA_Buf[offset],&sRT_Command_Packet.address,sizeof(sRT_Command_Packet.address));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <rt_bus_proto_frame_pack+0xe4>)
 8001572:	4413      	add	r3, r2
 8001574:	8a7a      	ldrh	r2, [r7, #18]
 8001576:	801a      	strh	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.address);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	3302      	adds	r3, #2
 800157c:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_DMA_Buf[offset],&sRT_Command_Packet.len,sizeof(sRT_Command_Packet.len));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <rt_bus_proto_frame_pack+0xe4>)
 8001582:	4413      	add	r3, r2
 8001584:	8aba      	ldrh	r2, [r7, #20]
 8001586:	801a      	strh	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.len);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3302      	adds	r3, #2
 800158c:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_DMA_Buf[offset],&sRT_Command_Packet.cmd,sizeof(sRT_Command_Packet.cmd));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	4a17      	ldr	r2, [pc, #92]	; (80015f0 <rt_bus_proto_frame_pack+0xe4>)
 8001592:	4413      	add	r3, r2
 8001594:	7dba      	ldrb	r2, [r7, #22]
 8001596:	701a      	strb	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.cmd);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_DMA_Buf[offset],&sRT_Command_Packet.data[0],(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd)));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <rt_bus_proto_frame_pack+0xe4>)
 80015a2:	4413      	add	r3, r2
 80015a4:	8aba      	ldrh	r2, [r7, #20]
 80015a6:	3a01      	subs	r2, #1
 80015a8:	f107 0117 	add.w	r1, r7, #23
 80015ac:	4618      	mov	r0, r3
 80015ae:	f004 f8bd 	bl	800572c <memcpy>
	offset +=(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd));
 80015b2:	8abb      	ldrh	r3, [r7, #20]
 80015b4:	461a      	mov	r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	4413      	add	r3, r2
 80015ba:	3b01      	subs	r3, #1
 80015bc:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_DMA_Buf[offset],&sRT_Command_Packet.crc,sizeof(sRT_Command_Packet.crc));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <rt_bus_proto_frame_pack+0xe4>)
 80015c2:	4413      	add	r3, r2
 80015c4:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 80015c8:	801a      	strh	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.crc);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	3302      	adds	r3, #2
 80015ce:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_DMA_Buf[offset],&sRT_Command_Packet.etx,sizeof(sRT_Command_Packet.etx));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <rt_bus_proto_frame_pack+0xe4>)
 80015d4:	4413      	add	r3, r2
 80015d6:	f897 209a 	ldrb.w	r2, [r7, #154]	; 0x9a
 80015da:	701a      	strb	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.etx);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	603b      	str	r3, [r7, #0]
	for(int i=0;i<offset;i++){
		rtprintf("%02X ",gSPI_Tx_DMA_Buf[i]);
	}
	rtprintf("]\n\r");
#endif
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80015ec:	b004      	add	sp, #16
 80015ee:	4770      	bx	lr
 80015f0:	2000079c 	.word	0x2000079c

080015f4 <rt_bus_proto_pack_parser>:
/**
 * @brief  Parser from Raw data to communication structure
 * @param  data	 				: raw data pointer
 * @retval tRT_Command_Packet	: structured data from raw packet
 */
tRT_Command_Packet rt_bus_proto_pack_parser(uint8_t *data){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b0a6      	sub	sp, #152	; 0x98
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]

	tRT_Command_Packet sRT_Command_Packet;
	int offset = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	781b      	ldrb	r3, [r3, #0]
	memcpy(&sRT_Command_Packet.stx,&data[0],sizeof(sRT_Command_Packet.stx));
 8001608:	723b      	strb	r3, [r7, #8]
	offset +=sizeof(sRT_Command_Packet.stx);
 800160a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800160e:	3301      	adds	r3, #1
 8001610:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	memcpy(&sRT_Command_Packet.address,&data[offset],sizeof(sRT_Command_Packet.address));
 8001614:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	4413      	add	r3, r2
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	817b      	strh	r3, [r7, #10]
	offset +=sizeof(sRT_Command_Packet.address);
 8001622:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001626:	3302      	adds	r3, #2
 8001628:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	memcpy(&sRT_Command_Packet.len,&data[offset],sizeof(sRT_Command_Packet.len));
 800162c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	81bb      	strh	r3, [r7, #12]
	offset +=sizeof(sRT_Command_Packet.len);
 800163a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800163e:	3302      	adds	r3, #2
 8001640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	memcpy(&sRT_Command_Packet.cmd,&data[offset],sizeof(sRT_Command_Packet.cmd));
 8001644:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	4413      	add	r3, r2
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	73bb      	strb	r3, [r7, #14]
	offset +=sizeof(sRT_Command_Packet.cmd);
 8001650:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001654:	3301      	adds	r3, #1
 8001656:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	memcpy(&sRT_Command_Packet.data,&data[offset],(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd)));
 800165a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	18d1      	adds	r1, r2, r3
 8001662:	89bb      	ldrh	r3, [r7, #12]
 8001664:	1e5a      	subs	r2, r3, #1
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	3307      	adds	r3, #7
 800166c:	4618      	mov	r0, r3
 800166e:	f004 f85d 	bl	800572c <memcpy>
	offset +=(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd));
 8001672:	89bb      	ldrh	r3, [r7, #12]
 8001674:	461a      	mov	r2, r3
 8001676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800167a:	4413      	add	r3, r2
 800167c:	3b01      	subs	r3, #1
 800167e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	memcpy(&sRT_Command_Packet.crc,&data[offset],sizeof(sRT_Command_Packet.crc));
 8001682:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	4413      	add	r3, r2
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	offset +=sizeof(sRT_Command_Packet.crc);
 8001692:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001696:	3302      	adds	r3, #2
 8001698:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	memcpy(&sRT_Command_Packet.etx,&data[offset],sizeof(sRT_Command_Packet.etx));
 800169c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	return sRT_Command_Packet;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	228c      	movs	r2, #140	; 0x8c
 80016b4:	4619      	mov	r1, r3
 80016b6:	f004 f839 	bl	800572c <memcpy>
}
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	3798      	adds	r7, #152	; 0x98
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <rt_bus_cmd_ping_handler>:
 * @param  txLen	: length of to be transmit data
 * @retval RT_PROTO_OK			: successfull
 * @retval RT_PROTO_FrameError	: Frame error
 */
uint32_t rt_bus_cmd_ping_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b085      	sub	sp, #20
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	460b      	mov	r3, r1
 80016d0:	817b      	strh	r3, [r7, #10]
	if (rxLen != 1)
 80016d2:	897b      	ldrh	r3, [r7, #10]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d001      	beq.n	80016dc <rt_bus_cmd_ping_handler+0x1a>
	{
		return RT_PROTO_FrameError;
 80016d8:	2301      	movs	r3, #1
 80016da:	e009      	b.n	80016f0 <rt_bus_cmd_ping_handler+0x2e>
	}

	txData[0] = rxData[0] + 1;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	701a      	strb	r2, [r3, #0]
	*txLen = 1;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <rt_bus_cmd_reset>:
 * @param  txData	: data to be transmit
 * @param  txLen	: length of to be transmit data
 * @retval RT_PROTO_OK			: successfull
 */
uint32_t rt_bus_cmd_reset(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	460b      	mov	r3, r1
 8001708:	817b      	strh	r3, [r7, #10]
	/*iapMailbox[0] = 0;
	iapMailbox[1] = 0;*/
	NVIC_SystemReset();
 800170a:	f7ff fee9 	bl	80014e0 <__NVIC_SystemReset>
	...

08001710 <rt_bus_cmd_get_runmode_handler>:
 * @param  txData	: data to be transmit
 * @param  txLen	: length of to be transmit data
 * @retval RT_PROTO_OK			: successfull
 */
uint32_t rt_bus_cmd_get_runmode_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	460b      	mov	r3, r1
 800171e:	817b      	strh	r3, [r7, #10]
	//dbprintf("%s gRunMode: %d",__func__,gRunMode);
	txData[0] = gRunMode;
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <rt_bus_cmd_get_runmode_handler+0x30>)
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
	(*txLen) = (*txLen)+1;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b29a      	uxth	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000368 	.word	0x20000368

08001744 <get_mem_type>:
 *txLen = length;
	return RT_PROTO_OK;
}*/

uint32_t get_mem_type(uint32_t address)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if ((address >= FLASH_START_ADDRESS) & (address<=FLASH_END_ADDRESS))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f06f 4278 	mvn.w	r2, #4160749568	; 0xf8000000
 8001752:	4293      	cmp	r3, r2
 8001754:	bf8c      	ite	hi
 8001756:	2301      	movhi	r3, #1
 8001758:	2300      	movls	r3, #0
 800175a:	b2da      	uxtb	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4913      	ldr	r1, [pc, #76]	; (80017ac <get_mem_type+0x68>)
 8001760:	428b      	cmp	r3, r1
 8001762:	bf94      	ite	ls
 8001764:	2301      	movls	r3, #1
 8001766:	2300      	movhi	r3, #0
 8001768:	b2db      	uxtb	r3, r3
 800176a:	4013      	ands	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <get_mem_type+0x32>
		return MEM_TYPE_FLASH;
 8001772:	2300      	movs	r3, #0
 8001774:	e015      	b.n	80017a2 <get_mem_type+0x5e>
	else if ((address >= RAM_START_ADDRESS) & (address <= RAM_END_ADDRESS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800177c:	4293      	cmp	r3, r2
 800177e:	bf8c      	ite	hi
 8001780:	2301      	movhi	r3, #1
 8001782:	2300      	movls	r3, #0
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4909      	ldr	r1, [pc, #36]	; (80017b0 <get_mem_type+0x6c>)
 800178a:	428b      	cmp	r3, r1
 800178c:	bf94      	ite	ls
 800178e:	2301      	movls	r3, #1
 8001790:	2300      	movhi	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4013      	ands	r3, r2
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <get_mem_type+0x5c>
		return MEM_TYPE_RAM;
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <get_mem_type+0x5e>
	else
		return MEM_TYPE_UNK;
 80017a0:	2303      	movs	r3, #3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	08040000 	.word	0x08040000
 80017b0:	2000c000 	.word	0x2000c000

080017b4 <rt_bus_cmd_bl_stay_handler>:
 * @param  txData	: data to be transmit
 * @param  txLen	: length of to be transmit data
 * @retval RT_PROTO_OK			: successfull
 */
uint32_t rt_bus_cmd_bl_stay_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	460b      	mov	r3, r1
 80017c2:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 80017c4:	4905      	ldr	r1, [pc, #20]	; (80017dc <rt_bus_cmd_bl_stay_handler+0x28>)
 80017c6:	4806      	ldr	r0, [pc, #24]	; (80017e0 <rt_bus_cmd_bl_stay_handler+0x2c>)
 80017c8:	f001 fa3e 	bl	8002c48 <dbprintf>
	gStayInBootloader = 1;
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <rt_bus_cmd_bl_stay_handler+0x30>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
	return RT_PROTO_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	080069a8 	.word	0x080069a8
 80017e0:	0800619c 	.word	0x0800619c
 80017e4:	20000369 	.word	0x20000369

080017e8 <rt_bus_cmd_bl_write_handler>:
 * @retval RT_PROTO_OK			: successfull
 * @retval RT_PROTO_DataError	: received data error
 * @retval RT_PROTO_ExcError	: function execution error
 */
uint32_t rt_bus_cmd_bl_write_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	; 0x38
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	460b      	mov	r3, r1
 80017f6:	817b      	strh	r3, [r7, #10]
	txData[0] = gRunMode;
 80017f8:	4b9f      	ldr	r3, [pc, #636]	; (8001a78 <rt_bus_cmd_bl_write_handler+0x290>)
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	701a      	strb	r2, [r3, #0]
	(*txLen) = (*txLen)+1;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	801a      	strh	r2, [r3, #0]
	uint32_t mtype;
	uint8_t decBuffer[FW_PACKET_IV_DATA_SIZE];
	uint8_t rxIndex =0;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	static uint16_t prev_pck_idx = 0;
	memcpy(&sRT_FW_Update_Command_Packet.pck_idx,&rxData[rxIndex],sizeof(sRT_FW_Update_Command_Packet.pck_idx));
 8001812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	b29a      	uxth	r2, r3
 800181e:	4b97      	ldr	r3, [pc, #604]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001820:	801a      	strh	r2, [r3, #0]
	rxIndex += sizeof(sRT_FW_Update_Command_Packet.pck_idx);
 8001822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001826:	3302      	adds	r3, #2
 8001828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	memcpy(&sRT_FW_Update_Command_Packet.total_pck_count,&rxData[rxIndex],sizeof(sRT_FW_Update_Command_Packet.total_pck_count));
 800182c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b90      	ldr	r3, [pc, #576]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 800183a:	805a      	strh	r2, [r3, #2]
	rxIndex += sizeof(sRT_FW_Update_Command_Packet.total_pck_count);
 800183c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001840:	3302      	adds	r3, #2
 8001842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(sRT_FW_Update_Command_Packet.pck_idx == 0 || (sRT_FW_Update_Command_Packet.pck_idx-prev_pck_idx) != 1  || (sRT_FW_Update_Command_Packet.pck_idx > sRT_FW_Update_Command_Packet.total_pck_count)){
 8001846:	4b8d      	ldr	r3, [pc, #564]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00d      	beq.n	800186a <rt_bus_cmd_bl_write_handler+0x82>
 800184e:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	4b8a      	ldr	r3, [pc, #552]	; (8001a80 <rt_bus_cmd_bl_write_handler+0x298>)
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d105      	bne.n	800186a <rt_bus_cmd_bl_write_handler+0x82>
 800185e:	4b87      	ldr	r3, [pc, #540]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001860:	881a      	ldrh	r2, [r3, #0]
 8001862:	4b86      	ldr	r3, [pc, #536]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001864:	885b      	ldrh	r3, [r3, #2]
 8001866:	429a      	cmp	r2, r3
 8001868:	d910      	bls.n	800188c <rt_bus_cmd_bl_write_handler+0xa4>
		dbprintf("Wrong firmware packet received. Address: %08X Received idx: %d, Previous idx: %d Total Packet Size: %d",sRT_FW_Update_Command_Packet.wr_addr,sRT_FW_Update_Command_Packet.pck_idx,prev_pck_idx,sRT_FW_Update_Command_Packet.total_pck_count);
 800186a:	4b84      	ldr	r3, [pc, #528]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 800186c:	6859      	ldr	r1, [r3, #4]
 800186e:	4b83      	ldr	r3, [pc, #524]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b82      	ldr	r3, [pc, #520]	; (8001a80 <rt_bus_cmd_bl_write_handler+0x298>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	4b80      	ldr	r3, [pc, #512]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 800187c:	885b      	ldrh	r3, [r3, #2]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4603      	mov	r3, r0
 8001882:	4880      	ldr	r0, [pc, #512]	; (8001a84 <rt_bus_cmd_bl_write_handler+0x29c>)
 8001884:	f001 f9e0 	bl	8002c48 <dbprintf>
		return RT_PROTO_DataError;
 8001888:	2302      	movs	r3, #2
 800188a:	e0f1      	b.n	8001a70 <rt_bus_cmd_bl_write_handler+0x288>
	}
	prev_pck_idx = sRT_FW_Update_Command_Packet.pck_idx;
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 800188e:	881a      	ldrh	r2, [r3, #0]
 8001890:	4b7b      	ldr	r3, [pc, #492]	; (8001a80 <rt_bus_cmd_bl_write_handler+0x298>)
 8001892:	801a      	strh	r2, [r3, #0]


	memcpy(&sRT_FW_Update_Command_Packet.wr_addr,&rxData[rxIndex],sizeof(sRT_FW_Update_Command_Packet.wr_addr));
 8001894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b76      	ldr	r3, [pc, #472]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 80018a2:	605a      	str	r2, [r3, #4]
	rxIndex += sizeof(sRT_FW_Update_Command_Packet.wr_addr);
 80018a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018a8:	3304      	adds	r3, #4
 80018aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (sRT_FW_Update_Command_Packet.wr_addr < APPLICATION_ADDRESS){
 80018ae:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4a75      	ldr	r2, [pc, #468]	; (8001a88 <rt_bus_cmd_bl_write_handler+0x2a0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d208      	bcs.n	80018ca <rt_bus_cmd_bl_write_handler+0xe2>
		dbprintf("Write address error!!! writeaddress : %08X, APPLICATION_ADDRESS:%08X",sRT_FW_Update_Command_Packet.wr_addr,APPLICATION_ADDRESS);
 80018b8:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	4a72      	ldr	r2, [pc, #456]	; (8001a88 <rt_bus_cmd_bl_write_handler+0x2a0>)
 80018be:	4619      	mov	r1, r3
 80018c0:	4872      	ldr	r0, [pc, #456]	; (8001a8c <rt_bus_cmd_bl_write_handler+0x2a4>)
 80018c2:	f001 f9c1 	bl	8002c48 <dbprintf>
		return RT_PROTO_DataError;
 80018c6:	2302      	movs	r3, #2
 80018c8:	e0d2      	b.n	8001a70 <rt_bus_cmd_bl_write_handler+0x288>
	}

	static uint32_t fw_idx = 0;

	if(sRT_FW_Update_Command_Packet.pck_idx == 1){
 80018ca:	4b6c      	ldr	r3, [pc, #432]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d112      	bne.n	80018f8 <rt_bus_cmd_bl_write_handler+0x110>
		memcpy(&sRT_FW_Update_Command_Packet.iv[0],&rxData[rxIndex],FW_PACKET_IV_DATA_SIZE);
 80018d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4413      	add	r3, r2
 80018da:	2210      	movs	r2, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	486c      	ldr	r0, [pc, #432]	; (8001a90 <rt_bus_cmd_bl_write_handler+0x2a8>)
 80018e0:	f003 ff24 	bl	800572c <memcpy>
		rxIndex += FW_PACKET_IV_DATA_SIZE;
 80018e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018e8:	3310      	adds	r3, #16
 80018ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		fw_idx += FW_PACKET_IV_DATA_SIZE;
 80018ee:	4b69      	ldr	r3, [pc, #420]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	3310      	adds	r3, #16
 80018f4:	4a67      	ldr	r2, [pc, #412]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 80018f6:	6013      	str	r3, [r2, #0]
	}

	if(sRT_FW_Update_Command_Packet.pck_idx < sRT_FW_Update_Command_Packet.total_pck_count){
 80018f8:	4b60      	ldr	r3, [pc, #384]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 80018fa:	881a      	ldrh	r2, [r3, #0]
 80018fc:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 80018fe:	885b      	ldrh	r3, [r3, #2]
 8001900:	429a      	cmp	r2, r3
 8001902:	d21c      	bcs.n	800193e <rt_bus_cmd_bl_write_handler+0x156>
		memcpy(&sRT_FW_Update_Command_Packet.enc_data[fw_idx-FW_PACKET_IV_DATA_SIZE],&rxData[rxIndex],(rxLen-rxIndex));
 8001904:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	3b10      	subs	r3, #16
 800190a:	3318      	adds	r3, #24
 800190c:	4a5b      	ldr	r2, [pc, #364]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 800190e:	1898      	adds	r0, r3, r2
 8001910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	18d1      	adds	r1, r2, r3
 8001918:	897a      	ldrh	r2, [r7, #10]
 800191a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	461a      	mov	r2, r3
 8001922:	f003 ff03 	bl	800572c <memcpy>
		fw_idx += (rxLen-rxIndex);
 8001926:	897a      	ldrh	r2, [r7, #10]
 8001928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	461a      	mov	r2, r3
 8001930:	4b58      	ldr	r3, [pc, #352]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4413      	add	r3, r2
 8001936:	4a57      	ldr	r2, [pc, #348]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 8001938:	6013      	str	r3, [r2, #0]
		return RT_PROTO_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e098      	b.n	8001a70 <rt_bus_cmd_bl_write_handler+0x288>
	}

	memcpy(&sRT_FW_Update_Command_Packet.enc_data[fw_idx-FW_PACKET_IV_DATA_SIZE],&rxData[rxIndex],(rxLen-rxIndex));
 800193e:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3b10      	subs	r3, #16
 8001944:	3318      	adds	r3, #24
 8001946:	4a4d      	ldr	r2, [pc, #308]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001948:	1898      	adds	r0, r3, r2
 800194a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	18d1      	adds	r1, r2, r3
 8001952:	897a      	ldrh	r2, [r7, #10]
 8001954:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	461a      	mov	r2, r3
 800195c:	f003 fee6 	bl	800572c <memcpy>
	fw_idx += (rxLen-rxIndex);
 8001960:	897a      	ldrh	r2, [r7, #10]
 8001962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	461a      	mov	r2, r3
 800196a:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a48      	ldr	r2, [pc, #288]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 8001972:	6013      	str	r3, [r2, #0]

	if ((fw_idx-FW_PACKET_IV_DATA_SIZE) != FW_ENC_DATA_PACKET_SIZE){
 8001974:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800197c:	d00a      	beq.n	8001994 <rt_bus_cmd_bl_write_handler+0x1ac>
		dbprintf("Received firmware file size error!!! Received Size: %d Expected Size: %d",(fw_idx-FW_PACKET_IV_DATA_SIZE),FW_ENC_DATA_PACKET_SIZE);
 800197e:	4b45      	ldr	r3, [pc, #276]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	3b10      	subs	r3, #16
 8001984:	f44f 6282 	mov.w	r2, #1040	; 0x410
 8001988:	4619      	mov	r1, r3
 800198a:	4843      	ldr	r0, [pc, #268]	; (8001a98 <rt_bus_cmd_bl_write_handler+0x2b0>)
 800198c:	f001 f95c 	bl	8002c48 <dbprintf>
		return RT_PROTO_DataError;
 8001990:	2302      	movs	r3, #2
 8001992:	e06d      	b.n	8001a70 <rt_bus_cmd_bl_write_handler+0x288>
	}
	prev_pck_idx = 0;
 8001994:	4b3a      	ldr	r3, [pc, #232]	; (8001a80 <rt_bus_cmd_bl_write_handler+0x298>)
 8001996:	2200      	movs	r2, #0
 8001998:	801a      	strh	r2, [r3, #0]
	fw_idx = 0;
 800199a:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <rt_bus_cmd_bl_write_handler+0x2ac>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
	// Addr       IV      [ Magic      Random Data      Magic     Raw Data	]
	//  4         16      [   4      		8      		  4       	1024 	]
	//				      [ Encrypted      							   		]
	// 0..3      4..19	  [ 20..23		  24..31    	32..35	  36..1060	]

	AES_CBC_decrypt_buffer(decBuffer,&sRT_FW_Update_Command_Packet.enc_data[0],FW_PACKET_MAGIC_DATA_SIZE,AES_KEY,&sRT_FW_Update_Command_Packet.iv[0]);
 80019a0:	f107 0014 	add.w	r0, r7, #20
 80019a4:	4b3a      	ldr	r3, [pc, #232]	; (8001a90 <rt_bus_cmd_bl_write_handler+0x2a8>)
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	4b3c      	ldr	r3, [pc, #240]	; (8001a9c <rt_bus_cmd_bl_write_handler+0x2b4>)
 80019aa:	2210      	movs	r2, #16
 80019ac:	493c      	ldr	r1, [pc, #240]	; (8001aa0 <rt_bus_cmd_bl_write_handler+0x2b8>)
 80019ae:	f7ff f9bd 	bl	8000d2c <AES_CBC_decrypt_buffer>
	if (memcmp("ROTA",&decBuffer[0],4) != 0){
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2204      	movs	r2, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	483a      	ldr	r0, [pc, #232]	; (8001aa4 <rt_bus_cmd_bl_write_handler+0x2bc>)
 80019bc:	f003 fea8 	bl	8005710 <memcmp>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <rt_bus_cmd_bl_write_handler+0x1e8>
		dbprintf("Decryption error!!!");
 80019c6:	4838      	ldr	r0, [pc, #224]	; (8001aa8 <rt_bus_cmd_bl_write_handler+0x2c0>)
 80019c8:	f001 f93e 	bl	8002c48 <dbprintf>
		return RT_PROTO_DataError;
 80019cc:	2302      	movs	r3, #2
 80019ce:	e04f      	b.n	8001a70 <rt_bus_cmd_bl_write_handler+0x288>
	}
	if (memcmp("ROTA",&decBuffer[12],4) != 0){
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	330c      	adds	r3, #12
 80019d6:	2204      	movs	r2, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4832      	ldr	r0, [pc, #200]	; (8001aa4 <rt_bus_cmd_bl_write_handler+0x2bc>)
 80019dc:	f003 fe98 	bl	8005710 <memcmp>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <rt_bus_cmd_bl_write_handler+0x208>
		dbprintf("Decryption error!!!");
 80019e6:	4830      	ldr	r0, [pc, #192]	; (8001aa8 <rt_bus_cmd_bl_write_handler+0x2c0>)
 80019e8:	f001 f92e 	bl	8002c48 <dbprintf>
		return RT_PROTO_DataError;
 80019ec:	2302      	movs	r3, #2
 80019ee:	e03f      	b.n	8001a70 <rt_bus_cmd_bl_write_handler+0x288>
	}
	AES_CBC_decrypt_buffer(flashBuffer,&sRT_FW_Update_Command_Packet.enc_data[0],FW_ENC_DATA_PACKET_SIZE,AES_KEY,&sRT_FW_Update_Command_Packet.iv[0]);
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <rt_bus_cmd_bl_write_handler+0x2a8>)
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <rt_bus_cmd_bl_write_handler+0x2b4>)
 80019f6:	f44f 6282 	mov.w	r2, #1040	; 0x410
 80019fa:	4929      	ldr	r1, [pc, #164]	; (8001aa0 <rt_bus_cmd_bl_write_handler+0x2b8>)
 80019fc:	482b      	ldr	r0, [pc, #172]	; (8001aac <rt_bus_cmd_bl_write_handler+0x2c4>)
 80019fe:	f7ff f995 	bl	8000d2c <AES_CBC_decrypt_buffer>

	mtype = get_mem_type(sRT_FW_Update_Command_Packet.wr_addr);
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fe9c 	bl	8001744 <get_mem_type>
 8001a0c:	62b8      	str	r0, [r7, #40]	; 0x28
	if (mtype == MEM_TYPE_FLASH)
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d119      	bne.n	8001a48 <rt_bus_cmd_bl_write_handler+0x260>
	{
		FLASH_If_Init();
 8001a14:	f7ff fa4c 	bl	8000eb0 <FLASH_If_Init>
		uint32_t ret = FLASH_If_Write(sRT_FW_Update_Command_Packet.wr_addr,(uint32_t *)&flashBuffer[16],FW_RAW_DATA_PACKET_SIZE/4 /* 32-bit conversion*/ );
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a20:	4923      	ldr	r1, [pc, #140]	; (8001ab0 <rt_bus_cmd_bl_write_handler+0x2c8>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fa8f 	bl	8000f46 <FLASH_If_Write>
 8001a28:	6278      	str	r0, [r7, #36]	; 0x24
		if (ret == HAL_OK){
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d106      	bne.n	8001a3e <rt_bus_cmd_bl_write_handler+0x256>
			dbprintf("Writing firmware to 0x%08X...",sRT_FW_Update_Command_Packet.wr_addr);
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	4619      	mov	r1, r3
 8001a36:	481f      	ldr	r0, [pc, #124]	; (8001ab4 <rt_bus_cmd_bl_write_handler+0x2cc>)
 8001a38:	f001 f906 	bl	8002c48 <dbprintf>
 8001a3c:	e017      	b.n	8001a6e <rt_bus_cmd_bl_write_handler+0x286>
		}else{
			dbprintf("Write error!!!");
 8001a3e:	481e      	ldr	r0, [pc, #120]	; (8001ab8 <rt_bus_cmd_bl_write_handler+0x2d0>)
 8001a40:	f001 f902 	bl	8002c48 <dbprintf>
			return RT_PROTO_ExcError;
 8001a44:	2304      	movs	r3, #4
 8001a46:	e013      	b.n	8001a70 <rt_bus_cmd_bl_write_handler+0x288>
		}
	}
	else if (mtype == MEM_TYPE_RAM)
 8001a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10a      	bne.n	8001a64 <rt_bus_cmd_bl_write_handler+0x27c>
	{
		memcpy((uint8_t *)sRT_FW_Update_Command_Packet.wr_addr,&rxData[4],FW_RAW_DATA_PACKET_SIZE);
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <rt_bus_cmd_bl_write_handler+0x294>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4618      	mov	r0, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3304      	adds	r3, #4
 8001a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f003 fe65 	bl	800572c <memcpy>
 8001a62:	e004      	b.n	8001a6e <rt_bus_cmd_bl_write_handler+0x286>
	}
	else
	{
		dbprintf("RT_PROTO_DataError");
 8001a64:	4815      	ldr	r0, [pc, #84]	; (8001abc <rt_bus_cmd_bl_write_handler+0x2d4>)
 8001a66:	f001 f8ef 	bl	8002c48 <dbprintf>
		return RT_PROTO_DataError;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e000      	b.n	8001a70 <rt_bus_cmd_bl_write_handler+0x288>
	}

	return RT_PROTO_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000368 	.word	0x20000368
 8001a7c:	20000928 	.word	0x20000928
 8001a80:	20000378 	.word	0x20000378
 8001a84:	080061a0 	.word	0x080061a0
 8001a88:	08008000 	.word	0x08008000
 8001a8c:	08006208 	.word	0x08006208
 8001a90:	20000930 	.word	0x20000930
 8001a94:	2000037c 	.word	0x2000037c
 8001a98:	08006250 	.word	0x08006250
 8001a9c:	08006554 	.word	0x08006554
 8001aa0:	20000940 	.word	0x20000940
 8001aa4:	0800629c 	.word	0x0800629c
 8001aa8:	080062a4 	.word	0x080062a4
 8001aac:	2000038c 	.word	0x2000038c
 8001ab0:	2000039c 	.word	0x2000039c
 8001ab4:	080062b8 	.word	0x080062b8
 8001ab8:	080062d8 	.word	0x080062d8
 8001abc:	080062e8 	.word	0x080062e8

08001ac0 <rt_bus_cmd_bl_erase_handler>:
 * @retval RT_PROTO_OK			: successfull
 * @retval RT_PROTO_DataError	: received data error
 * @retval RT_PROTO_ExcError	: function execution error
 */
uint32_t rt_bus_cmd_bl_erase_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	460b      	mov	r3, r1
 8001ace:	817b      	strh	r3, [r7, #10]
	uint32_t eraseaddress;
	uint32_t eraseLen;
	uint32_t mtype = MEM_TYPE_UNK;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	61fb      	str	r3, [r7, #28]

	if (rxLen != 0x08)
 8001ad4:	897b      	ldrh	r3, [r7, #10]
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d001      	beq.n	8001ade <rt_bus_cmd_bl_erase_handler+0x1e>
		return RT_PROTO_DataError;
 8001ada:	2302      	movs	r3, #2
 8001adc:	e05e      	b.n	8001b9c <rt_bus_cmd_bl_erase_handler+0xdc>
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]

	memcpy(&eraseaddress,&rxData[0],4);
 8001ae2:	61bb      	str	r3, [r7, #24]
	memcpy(&eraseLen,&rxData[4],4);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	617b      	str	r3, [r7, #20]

	dbprintf("Erasing flash... Start Address : %08X, Size: %d",eraseaddress,eraseLen);
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4619      	mov	r1, r3
 8001af2:	482c      	ldr	r0, [pc, #176]	; (8001ba4 <rt_bus_cmd_bl_erase_handler+0xe4>)
 8001af4:	f001 f8a8 	bl	8002c48 <dbprintf>

	if (eraseaddress % FLASH_PAGE_SIZE){
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <rt_bus_cmd_bl_erase_handler+0x52>
		dbprintf("%s_%d",__func__,__LINE__);
 8001b02:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8001b06:	4928      	ldr	r1, [pc, #160]	; (8001ba8 <rt_bus_cmd_bl_erase_handler+0xe8>)
 8001b08:	4828      	ldr	r0, [pc, #160]	; (8001bac <rt_bus_cmd_bl_erase_handler+0xec>)
 8001b0a:	f001 f89d 	bl	8002c48 <dbprintf>
		return RT_PROTO_DataError;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e044      	b.n	8001b9c <rt_bus_cmd_bl_erase_handler+0xdc>
	}
	if (eraseLen % FLASH_PAGE_SIZE){
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <rt_bus_cmd_bl_erase_handler+0x6c>
		dbprintf("%s_%d",__func__,__LINE__);
 8001b1c:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001b20:	4921      	ldr	r1, [pc, #132]	; (8001ba8 <rt_bus_cmd_bl_erase_handler+0xe8>)
 8001b22:	4822      	ldr	r0, [pc, #136]	; (8001bac <rt_bus_cmd_bl_erase_handler+0xec>)
 8001b24:	f001 f890 	bl	8002c48 <dbprintf>
		return RT_PROTO_DataError;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e037      	b.n	8001b9c <rt_bus_cmd_bl_erase_handler+0xdc>
	}

	mtype = get_mem_type(eraseaddress);
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe08 	bl	8001744 <get_mem_type>
 8001b34:	61f8      	str	r0, [r7, #28]

	if (mtype == MEM_TYPE_FLASH)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d11e      	bne.n	8001b7a <rt_bus_cmd_bl_erase_handler+0xba>
	{
		dbprintf("MEM_TYPE_FLASH");
 8001b3c:	481c      	ldr	r0, [pc, #112]	; (8001bb0 <rt_bus_cmd_bl_erase_handler+0xf0>)
 8001b3e:	f001 f883 	bl	8002c48 <dbprintf>
		if (FLASH_If_Init() != HAL_OK){
 8001b42:	f7ff f9b5 	bl	8000eb0 <FLASH_If_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <rt_bus_cmd_bl_erase_handler+0x96>
			dbprintf("Flash init error");
 8001b4c:	4819      	ldr	r0, [pc, #100]	; (8001bb4 <rt_bus_cmd_bl_erase_handler+0xf4>)
 8001b4e:	f001 f87b 	bl	8002c48 <dbprintf>
			return RT_PROTO_ExcError;
 8001b52:	2304      	movs	r3, #4
 8001b54:	e022      	b.n	8001b9c <rt_bus_cmd_bl_erase_handler+0xdc>
		}
		if (FLASH_If_Erase(eraseaddress,eraseLen) != HAL_OK){
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f9c3 	bl	8000ee8 <FLASH_If_Erase>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d004      	beq.n	8001b72 <rt_bus_cmd_bl_erase_handler+0xb2>
			dbprintf("RT_PROTO_ExcError");
 8001b68:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <rt_bus_cmd_bl_erase_handler+0xf8>)
 8001b6a:	f001 f86d 	bl	8002c48 <dbprintf>
			return RT_PROTO_ExcError;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	e014      	b.n	8001b9c <rt_bus_cmd_bl_erase_handler+0xdc>
		}
		dbprintf("Erased flash");
 8001b72:	4812      	ldr	r0, [pc, #72]	; (8001bbc <rt_bus_cmd_bl_erase_handler+0xfc>)
 8001b74:	f001 f868 	bl	8002c48 <dbprintf>
 8001b78:	e00f      	b.n	8001b9a <rt_bus_cmd_bl_erase_handler+0xda>
	}
	else if (mtype == MEM_TYPE_RAM)
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d10a      	bne.n	8001b96 <rt_bus_cmd_bl_erase_handler+0xd6>
	{
		dbprintf("MEM_TYPE_RAM");
 8001b80:	480f      	ldr	r0, [pc, #60]	; (8001bc0 <rt_bus_cmd_bl_erase_handler+0x100>)
 8001b82:	f001 f861 	bl	8002c48 <dbprintf>
		memset((unsigned char *)eraseaddress,0,eraseLen);
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f003 fdda 	bl	8005748 <memset>
 8001b94:	e001      	b.n	8001b9a <rt_bus_cmd_bl_erase_handler+0xda>
	}
	else
	{
		return RT_PROTO_DataError;
 8001b96:	2302      	movs	r3, #2
 8001b98:	e000      	b.n	8001b9c <rt_bus_cmd_bl_erase_handler+0xdc>
	}

	return RT_PROTO_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3720      	adds	r7, #32
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	080062fc 	.word	0x080062fc
 8001ba8:	080069c4 	.word	0x080069c4
 8001bac:	0800632c 	.word	0x0800632c
 8001bb0:	08006334 	.word	0x08006334
 8001bb4:	08006344 	.word	0x08006344
 8001bb8:	08006358 	.word	0x08006358
 8001bbc:	0800636c 	.word	0x0800636c
 8001bc0:	0800637c 	.word	0x0800637c

08001bc4 <rt_bus_cmd_prepare_response_handler>:
 * @retval RT_PROTO_OK			: successfull
 * @retval RT_PROTO_DataError	: received data error
 * @retval RT_PROTO_ExcError	: function execution error
 */
uint32_t rt_bus_cmd_prepare_response_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	817b      	strh	r3, [r7, #10]
	/* Must not do nothing */
	return RT_PROTO_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <rt_bus_proto_bl_process>:

void rt_bus_proto_bl_process(tRT_Command_Packet sRT_Command_Packet )
{
 8001be0:	b084      	sub	sp, #16
 8001be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001be6:	b0a4      	sub	sp, #144	; 0x90
 8001be8:	af20      	add	r7, sp, #128	; 0x80
 8001bea:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001bee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t cCRC = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	80fb      	strh	r3, [r7, #6]
	uint16_t txSize = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	80bb      	strh	r3, [r7, #4]
	uint32_t ret;
	if (isFrameReady)
 8001bfa:	4b67      	ldr	r3, [pc, #412]	; (8001d98 <rt_bus_proto_bl_process+0x1b8>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80c2 	beq.w	8001d88 <rt_bus_proto_bl_process+0x1a8>
	{
		cCRC = crc16((unsigned char *) &sRT_Command_Packet.address, (sizeof(sRT_Command_Packet.address)+sizeof(sRT_Command_Packet.len)+sRT_Command_Packet.len));
 8001c04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c06:	3304      	adds	r3, #4
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f8f9 	bl	8000e08 <crc16>
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
		if(memcmp(&sRT_Command_Packet.crc,&cCRC,2) == 0){
 8001c1a:	1db9      	adds	r1, r7, #6
 8001c1c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c20:	2202      	movs	r2, #2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fd74 	bl	8005710 <memcmp>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d164      	bne.n	8001cf8 <rt_bus_proto_bl_process+0x118>
			for (int i=0;i<gCommandCount ;i++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	e05c      	b.n	8001cee <rt_bus_proto_bl_process+0x10e>
			{
				if (commands[i].cmd == sRT_Command_Packet.cmd)
 8001c34:	4a59      	ldr	r2, [pc, #356]	; (8001d9c <rt_bus_proto_bl_process+0x1bc>)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8001c3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d151      	bne.n	8001ce8 <rt_bus_proto_bl_process+0x108>
				{
					txSize = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	80bb      	strh	r3, [r7, #4]
					gFrameCount++;
 8001c48:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <rt_bus_proto_bl_process+0x1c0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a54      	ldr	r2, [pc, #336]	; (8001da0 <rt_bus_proto_bl_process+0x1c0>)
 8001c50:	6013      	str	r3, [r2, #0]
					ret = commands[i].handler(&sRT_Command_Packet.data[0],(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd)),&gRT_Command_Packet.data[1],&txSize);
 8001c52:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <rt_bus_proto_bl_process+0x1bc>)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	685c      	ldr	r4, [r3, #4]
 8001c5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b299      	uxth	r1, r3
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	f107 002f 	add.w	r0, r7, #47	; 0x2f
 8001c68:	4a4e      	ldr	r2, [pc, #312]	; (8001da4 <rt_bus_proto_bl_process+0x1c4>)
 8001c6a:	47a0      	blx	r4
 8001c6c:	60b8      	str	r0, [r7, #8]
					if(commands[i].cmd != CMD_Prepare_Response){
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <rt_bus_proto_bl_process+0x1bc>)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8001c76:	2b09      	cmp	r3, #9
 8001c78:	d07a      	beq.n	8001d70 <rt_bus_proto_bl_process+0x190>
						gRT_Command_Packet.cmd = commands[i].cmd;
 8001c7a:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <rt_bus_proto_bl_process+0x1bc>)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <rt_bus_proto_bl_process+0x1c8>)
 8001c84:	719a      	strb	r2, [r3, #6]
						if (ret == RT_PROTO_OK)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d107      	bne.n	8001c9c <rt_bus_proto_bl_process+0xbc>
						{
							gRT_Command_Packet.data[0]= PRT_ACK;
 8001c8c:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <rt_bus_proto_bl_process+0x1c8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	71da      	strb	r2, [r3, #7]
							txSize +=1;
 8001c92:	88bb      	ldrh	r3, [r7, #4]
 8001c94:	3301      	adds	r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	80bb      	strh	r3, [r7, #4]
 8001c9a:	e008      	b.n	8001cae <rt_bus_proto_bl_process+0xce>
						}
						else
						{
							gRT_Command_Packet.data[0]= PRT_NCK;
 8001c9c:	4b42      	ldr	r3, [pc, #264]	; (8001da8 <rt_bus_proto_bl_process+0x1c8>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	71da      	strb	r2, [r3, #7]
							gRT_Command_Packet.data[1]= ret;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <rt_bus_proto_bl_process+0x1c8>)
 8001ca8:	721a      	strb	r2, [r3, #8]
							txSize = 2;
 8001caa:	2302      	movs	r3, #2
 8001cac:	80bb      	strh	r3, [r7, #4]
						}
						rt_bus_proto_frame_pack(gRT_Command_Packet/*commands[i].cmd*/,&txSize);
 8001cae:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <rt_bus_proto_bl_process+0x1c8>)
 8001cb0:	1d3a      	adds	r2, r7, #4
 8001cb2:	921f      	str	r2, [sp, #124]	; 0x7c
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	f04f 0800 	mov.w	r8, #0
 8001cba:	4690      	mov	r8, r2
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	2600      	movs	r6, #0
 8001cc0:	4616      	mov	r6, r2
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	2500      	movs	r5, #0
 8001cc6:	4615      	mov	r5, r2
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	2400      	movs	r4, #0
 8001ccc:	4614      	mov	r4, r2
 8001cce:	4668      	mov	r0, sp
 8001cd0:	3310      	adds	r3, #16
 8001cd2:	227c      	movs	r2, #124	; 0x7c
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f003 fd29 	bl	800572c <memcpy>
 8001cda:	4640      	mov	r0, r8
 8001cdc:	4631      	mov	r1, r6
 8001cde:	462a      	mov	r2, r5
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f7ff fc13 	bl	800150c <rt_bus_proto_frame_pack>
					}
					break;
 8001ce6:	e043      	b.n	8001d70 <rt_bus_proto_bl_process+0x190>
			for (int i=0;i<gCommandCount ;i++)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	2207      	movs	r2, #7
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	db9e      	blt.n	8001c34 <rt_bus_proto_bl_process+0x54>
 8001cf6:	e03c      	b.n	8001d72 <rt_bus_proto_bl_process+0x192>
				}
			}
		}else{
			dbprintf("CRC ERROR: Calculated: %04X Received: %04X",cCRC,sRT_Command_Packet.crc);
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8001d00:	461a      	mov	r2, r3
 8001d02:	482a      	ldr	r0, [pc, #168]	; (8001dac <rt_bus_proto_bl_process+0x1cc>)
 8001d04:	f000 ffa0 	bl	8002c48 <dbprintf>
			dbprintf("********************************************************");
 8001d08:	4829      	ldr	r0, [pc, #164]	; (8001db0 <rt_bus_proto_bl_process+0x1d0>)
 8001d0a:	f000 ff9d 	bl	8002c48 <dbprintf>
			dbprintf("STX :%02X",sRT_Command_Packet.stx);
 8001d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001d12:	4619      	mov	r1, r3
 8001d14:	4827      	ldr	r0, [pc, #156]	; (8001db4 <rt_bus_proto_bl_process+0x1d4>)
 8001d16:	f000 ff97 	bl	8002c48 <dbprintf>
			dbprintf("ADDR :%04X",sRT_Command_Packet.address);
 8001d1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4826      	ldr	r0, [pc, #152]	; (8001db8 <rt_bus_proto_bl_process+0x1d8>)
 8001d20:	f000 ff92 	bl	8002c48 <dbprintf>
			dbprintf("LEN :%04X",sRT_Command_Packet.len);
 8001d24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001d26:	4619      	mov	r1, r3
 8001d28:	4824      	ldr	r0, [pc, #144]	; (8001dbc <rt_bus_proto_bl_process+0x1dc>)
 8001d2a:	f000 ff8d 	bl	8002c48 <dbprintf>
			dbprintf("CMD :%02X",sRT_Command_Packet.cmd);
 8001d2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d32:	4619      	mov	r1, r3
 8001d34:	4822      	ldr	r0, [pc, #136]	; (8001dc0 <rt_bus_proto_bl_process+0x1e0>)
 8001d36:	f000 ff87 	bl	8002c48 <dbprintf>
			dbprintf("Data :%02X %02X %02X",sRT_Command_Packet.data[0],sRT_Command_Packet.data[1],sRT_Command_Packet.data[2]);
 8001d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d44:	461a      	mov	r2, r3
 8001d46:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001d4a:	481e      	ldr	r0, [pc, #120]	; (8001dc4 <rt_bus_proto_bl_process+0x1e4>)
 8001d4c:	f000 ff7c 	bl	8002c48 <dbprintf>
			dbprintf("CRC :%04X",sRT_Command_Packet.crc);
 8001d50:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8001d54:	4619      	mov	r1, r3
 8001d56:	481c      	ldr	r0, [pc, #112]	; (8001dc8 <rt_bus_proto_bl_process+0x1e8>)
 8001d58:	f000 ff76 	bl	8002c48 <dbprintf>
			dbprintf("ETX :%02X",sRT_Command_Packet.etx);
 8001d5c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8001d60:	4619      	mov	r1, r3
 8001d62:	481a      	ldr	r0, [pc, #104]	; (8001dcc <rt_bus_proto_bl_process+0x1ec>)
 8001d64:	f000 ff70 	bl	8002c48 <dbprintf>
			dbprintf("********************************************************");
 8001d68:	4811      	ldr	r0, [pc, #68]	; (8001db0 <rt_bus_proto_bl_process+0x1d0>)
 8001d6a:	f000 ff6d 	bl	8002c48 <dbprintf>
 8001d6e:	e000      	b.n	8001d72 <rt_bus_proto_bl_process+0x192>
					break;
 8001d70:	bf00      	nop
		}
		memset(&sRT_Command_Packet,0,sizeof(tRT_Command_Packet));
 8001d72:	228c      	movs	r2, #140	; 0x8c
 8001d74:	2100      	movs	r1, #0
 8001d76:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001d7a:	f003 fce5 	bl	8005748 <memset>
		SPI_DMA_Reset();
 8001d7e:	f000 fd51 	bl	8002824 <SPI_DMA_Reset>
		isFrameReady = 0;
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <rt_bus_proto_bl_process+0x1b8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
	}
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d92:	b004      	add	sp, #16
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000370 	.word	0x20000370
 8001d9c:	08006970 	.word	0x08006970
 8001da0:	20000374 	.word	0x20000374
 8001da4:	20000824 	.word	0x20000824
 8001da8:	2000081c 	.word	0x2000081c
 8001dac:	0800638c 	.word	0x0800638c
 8001db0:	080063b8 	.word	0x080063b8
 8001db4:	080063f4 	.word	0x080063f4
 8001db8:	08006400 	.word	0x08006400
 8001dbc:	0800640c 	.word	0x0800640c
 8001dc0:	08006418 	.word	0x08006418
 8001dc4:	08006424 	.word	0x08006424
 8001dc8:	0800643c 	.word	0x0800643c
 8001dcc:	08006448 	.word	0x08006448

08001dd0 <rt_bus_proto_bl_dt>:


void rt_bus_proto_bl_dt(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0c4      	sub	sp, #272	; 0x110
 8001dd4:	af20      	add	r7, sp, #128	; 0x80
	tRT_Command_Packet sRT_Command_Packet;
	memcpy(gSPI_Rx_Buf, gSPI_Rx_DMA_Buf, MAX_SPI_PACKET_SIZE);
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <rt_bus_proto_bl_dt+0x68>)
 8001dd8:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <rt_bus_proto_bl_dt+0x6c>)
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	461a      	mov	r2, r3
 8001de2:	f003 fca3 	bl	800572c <memcpy>
	for(int i=0;i<50;i++){
		rtprintf("%02X ",gSPI_Rx_Buf[i]);
	}
	dbprintf("]");
#endif
	sRT_Command_Packet = rt_bus_proto_pack_parser(&gSPI_Rx_Buf[0]);
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	4913      	ldr	r1, [pc, #76]	; (8001e38 <rt_bus_proto_bl_dt+0x68>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fc02 	bl	80015f4 <rt_bus_proto_pack_parser>
	if(sRT_Command_Packet.len < 1068){
 8001df0:	893b      	ldrh	r3, [r7, #8]
 8001df2:	f240 422b 	movw	r2, #1067	; 0x42b
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d809      	bhi.n	8001e0e <rt_bus_proto_bl_dt+0x3e>
		if(sRT_Command_Packet.stx == PRT_STX && sRT_Command_Packet.etx==PRT_ETX){
 8001dfa:	793b      	ldrb	r3, [r7, #4]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d106      	bne.n	8001e0e <rt_bus_proto_bl_dt+0x3e>
 8001e00:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d102      	bne.n	8001e0e <rt_bus_proto_bl_dt+0x3e>
			isFrameReady = 0x01;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <rt_bus_proto_bl_dt+0x70>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
			//dbprintf("Packet Ready");
		}
	}
	memset(gSPI_Rx_DMA_Buf, 0, MAX_SPI_PACKET_SIZE);
 8001e0e:	2280      	movs	r2, #128	; 0x80
 8001e10:	2100      	movs	r1, #0
 8001e12:	480a      	ldr	r0, [pc, #40]	; (8001e3c <rt_bus_proto_bl_dt+0x6c>)
 8001e14:	f003 fc98 	bl	8005748 <memset>
	rt_bus_proto_bl_process(sRT_Command_Packet);
 8001e18:	4668      	mov	r0, sp
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	227c      	movs	r2, #124	; 0x7c
 8001e20:	4619      	mov	r1, r3
 8001e22:	f003 fc83 	bl	800572c <memcpy>
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e2a:	f7ff fed9 	bl	8001be0 <rt_bus_proto_bl_process>
}
 8001e2e:	bf00      	nop
 8001e30:	3790      	adds	r7, #144	; 0x90
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000d50 	.word	0x20000d50
 8001e3c:	200008a8 	.word	0x200008a8
 8001e40:	20000370 	.word	0x20000370

08001e44 <rt_get_app_info>:
/**
 * @brief Application Get Info
 * @param none
 * @return none
 */
void rt_get_app_info(void){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af02      	add	r7, sp, #8

	sRotaDeviceInfo.ubSwLevel = SWLEVEL_BOOTLOADER;
 8001e4a:	4b51      	ldr	r3, [pc, #324]	; (8001f90 <rt_get_app_info+0x14c>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	801a      	strh	r2, [r3, #0]
	sRotaDeviceInfo.ubRunMode = RUNMODE_OPERATION;
 8001e50:	4b4f      	ldr	r3, [pc, #316]	; (8001f90 <rt_get_app_info+0x14c>)
 8001e52:	2202      	movs	r2, #2
 8001e54:	805a      	strh	r2, [r3, #2]
	sRotaDeviceInfo.ulManufacturerID = ROTA_MANUFACTURER_ID;
 8001e56:	4b4e      	ldr	r3, [pc, #312]	; (8001f90 <rt_get_app_info+0x14c>)
 8001e58:	4a4e      	ldr	r2, [pc, #312]	; (8001f94 <rt_get_app_info+0x150>)
 8001e5a:	605a      	str	r2, [r3, #4]
	sRotaDeviceInfo.ubDeviceClass =DEVICE_CONTROLLER;
 8001e5c:	4b4c      	ldr	r3, [pc, #304]	; (8001f90 <rt_get_app_info+0x14c>)
 8001e5e:	2202      	movs	r2, #2
 8001e60:	609a      	str	r2, [r3, #8]
	uint32_t flash_ret = HAL_Read_Unique_ID(&sRotaDeviceInfo.aulUniqueID[0]);
 8001e62:	484d      	ldr	r0, [pc, #308]	; (8001f98 <rt_get_app_info+0x154>)
 8001e64:	f7ff f8aa 	bl	8000fbc <HAL_Read_Unique_ID>
 8001e68:	6078      	str	r0, [r7, #4]
	if(flash_ret != HAL_OK){
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00b      	beq.n	8001e88 <rt_get_app_info+0x44>
		sRotaDeviceInfo.aulUniqueID[0] = 0;
 8001e70:	4b47      	ldr	r3, [pc, #284]	; (8001f90 <rt_get_app_info+0x14c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
		sRotaDeviceInfo.aulUniqueID[1] = 0;
 8001e76:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <rt_get_app_info+0x14c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
		sRotaDeviceInfo.aulUniqueID[2] = 0;
 8001e7c:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <rt_get_app_info+0x14c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	615a      	str	r2, [r3, #20]
		sRotaDeviceInfo.aulUniqueID[3] = 0;
 8001e82:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <rt_get_app_info+0x14c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
	}

	sRotaDeviceInfo.ulHWVersion = BOARD_VERSION;
 8001e88:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <rt_get_app_info+0x14c>)
 8001e8a:	2232      	movs	r2, #50	; 0x32
 8001e8c:	61da      	str	r2, [r3, #28]
	strncpy(sRotaDeviceInfo.acFWVersion, git_version, sizeof(sRotaDeviceInfo.acFWVersion));
 8001e8e:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <rt_get_app_info+0x158>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2214      	movs	r2, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	4842      	ldr	r0, [pc, #264]	; (8001fa0 <rt_get_app_info+0x15c>)
 8001e98:	f003 fc5e 	bl	8005758 <strncpy>
	strncpy(sRotaDeviceInfo.acProjectName, project_description, sizeof(sRotaDeviceInfo.acProjectName));
 8001e9c:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <rt_get_app_info+0x160>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2264      	movs	r2, #100	; 0x64
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4840      	ldr	r0, [pc, #256]	; (8001fa8 <rt_get_app_info+0x164>)
 8001ea6:	f003 fc57 	bl	8005758 <strncpy>
	strncpy(sRotaDeviceInfo.acManufacturer, company, sizeof(sRotaDeviceInfo.acManufacturer));
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <rt_get_app_info+0x168>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2214      	movs	r2, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	483f      	ldr	r0, [pc, #252]	; (8001fb0 <rt_get_app_info+0x16c>)
 8001eb4:	f003 fc50 	bl	8005758 <strncpy>
	const char *serial = "RTTCxxxxxxxxxx";
 8001eb8:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <rt_get_app_info+0x170>)
 8001eba:	603b      	str	r3, [r7, #0]
	strncpy(sRotaDeviceInfo.acSerialNumber, serial, sizeof(sRotaDeviceInfo.acSerialNumber));
 8001ebc:	2264      	movs	r2, #100	; 0x64
 8001ebe:	6839      	ldr	r1, [r7, #0]
 8001ec0:	483d      	ldr	r0, [pc, #244]	; (8001fb8 <rt_get_app_info+0x174>)
 8001ec2:	f003 fc49 	bl	8005758 <strncpy>
	strncpy(sRotaDeviceInfo.acManufacturer, company, sizeof(sRotaDeviceInfo.acManufacturer));
 8001ec6:	4b39      	ldr	r3, [pc, #228]	; (8001fac <rt_get_app_info+0x168>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2214      	movs	r2, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4838      	ldr	r0, [pc, #224]	; (8001fb0 <rt_get_app_info+0x16c>)
 8001ed0:	f003 fc42 	bl	8005758 <strncpy>

	sRotaAdvanceDeviceInfo.deviceInfo = sRotaDeviceInfo;
 8001ed4:	4a39      	ldr	r2, [pc, #228]	; (8001fbc <rt_get_app_info+0x178>)
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	; (8001f90 <rt_get_app_info+0x14c>)
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f003 fc23 	bl	800572c <memcpy>
	strncpy(sRotaAdvanceDeviceInfo.acProductionDate, timestamp, sizeof(sRotaAdvanceDeviceInfo.acProductionDate));
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <rt_get_app_info+0x17c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2214      	movs	r2, #20
 8001eec:	4619      	mov	r1, r3
 8001eee:	4835      	ldr	r0, [pc, #212]	; (8001fc4 <rt_get_app_info+0x180>)
 8001ef0:	f003 fc32 	bl	8005758 <strncpy>
	strncpy(sRotaAdvanceDeviceInfo.acFwCompileDate, timestamp, sizeof(sRotaAdvanceDeviceInfo.acFwCompileDate));
 8001ef4:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <rt_get_app_info+0x17c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2214      	movs	r2, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4832      	ldr	r0, [pc, #200]	; (8001fc8 <rt_get_app_info+0x184>)
 8001efe:	f003 fc2b 	bl	8005758 <strncpy>
	strncpy(sRotaAdvanceDeviceInfo.acCalibrationDate, timestamp, sizeof(sRotaAdvanceDeviceInfo.acCalibrationDate));
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <rt_get_app_info+0x17c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2214      	movs	r2, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4830      	ldr	r0, [pc, #192]	; (8001fcc <rt_get_app_info+0x188>)
 8001f0c:	f003 fc24 	bl	8005758 <strncpy>
	strncpy(sRotaAdvanceDeviceInfo.acTestDate, timestamp, sizeof(sRotaAdvanceDeviceInfo.acTestDate));
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <rt_get_app_info+0x17c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2214      	movs	r2, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	482d      	ldr	r0, [pc, #180]	; (8001fd0 <rt_get_app_info+0x18c>)
 8001f1a:	f003 fc1d 	bl	8005758 <strncpy>

	dbprintf("------- %s -------",sRotaAdvanceDeviceInfo.deviceInfo.acProjectName);
 8001f1e:	492d      	ldr	r1, [pc, #180]	; (8001fd4 <rt_get_app_info+0x190>)
 8001f20:	482d      	ldr	r0, [pc, #180]	; (8001fd8 <rt_get_app_info+0x194>)
 8001f22:	f000 fe91 	bl	8002c48 <dbprintf>
	dbprintf("Manufacturer\t\t: %s",sRotaAdvanceDeviceInfo.deviceInfo.acManufacturer);
 8001f26:	492d      	ldr	r1, [pc, #180]	; (8001fdc <rt_get_app_info+0x198>)
 8001f28:	482d      	ldr	r0, [pc, #180]	; (8001fe0 <rt_get_app_info+0x19c>)
 8001f2a:	f000 fe8d 	bl	8002c48 <dbprintf>
	dbprintf("Firmware Version\t: %s",sRotaAdvanceDeviceInfo.deviceInfo.acFWVersion);
 8001f2e:	492d      	ldr	r1, [pc, #180]	; (8001fe4 <rt_get_app_info+0x1a0>)
 8001f30:	482d      	ldr	r0, [pc, #180]	; (8001fe8 <rt_get_app_info+0x1a4>)
 8001f32:	f000 fe89 	bl	8002c48 <dbprintf>
	dbprintf("Hardware Version\t: %lu.%lu",(sRotaAdvanceDeviceInfo.deviceInfo.ulHWVersion/10),(sRotaAdvanceDeviceInfo.deviceInfo.ulHWVersion%10));
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <rt_get_app_info+0x178>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a2c      	ldr	r2, [pc, #176]	; (8001fec <rt_get_app_info+0x1a8>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	08d8      	lsrs	r0, r3, #3
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <rt_get_app_info+0x178>)
 8001f44:	69d9      	ldr	r1, [r3, #28]
 8001f46:	4b29      	ldr	r3, [pc, #164]	; (8001fec <rt_get_app_info+0x1a8>)
 8001f48:	fba3 2301 	umull	r2, r3, r3, r1
 8001f4c:	08da      	lsrs	r2, r3, #3
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	1aca      	subs	r2, r1, r3
 8001f58:	4601      	mov	r1, r0
 8001f5a:	4825      	ldr	r0, [pc, #148]	; (8001ff0 <rt_get_app_info+0x1ac>)
 8001f5c:	f000 fe74 	bl	8002c48 <dbprintf>
	dbprintf("Production Time\t\t: %s",sRotaAdvanceDeviceInfo.acProductionDate);
 8001f60:	4918      	ldr	r1, [pc, #96]	; (8001fc4 <rt_get_app_info+0x180>)
 8001f62:	4824      	ldr	r0, [pc, #144]	; (8001ff4 <rt_get_app_info+0x1b0>)
 8001f64:	f000 fe70 	bl	8002c48 <dbprintf>
	dbprintf("UID\t\t\t: %08lu%08lu%08lu%08lu",	sRotaDeviceInfo.aulUniqueID[3], sRotaDeviceInfo.aulUniqueID[2],	sRotaDeviceInfo.aulUniqueID[1], sRotaDeviceInfo.aulUniqueID[0]);
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <rt_get_app_info+0x14c>)
 8001f6a:	6999      	ldr	r1, [r3, #24]
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <rt_get_app_info+0x14c>)
 8001f6e:	695a      	ldr	r2, [r3, #20]
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <rt_get_app_info+0x14c>)
 8001f72:	6918      	ldr	r0, [r3, #16]
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <rt_get_app_info+0x14c>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	481e      	ldr	r0, [pc, #120]	; (8001ff8 <rt_get_app_info+0x1b4>)
 8001f7e:	f000 fe63 	bl	8002c48 <dbprintf>
	dbprintf("----------------------------------------------------------------");
 8001f82:	481e      	ldr	r0, [pc, #120]	; (8001ffc <rt_get_app_info+0x1b8>)
 8001f84:	f000 fe60 	bl	8002c48 <dbprintf>

}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000f30 	.word	0x20000f30
 8001f94:	524f5441 	.word	0x524f5441
 8001f98:	20000f3c 	.word	0x20000f3c
 8001f9c:	2000020c 	.word	0x2000020c
 8001fa0:	20000f50 	.word	0x20000f50
 8001fa4:	20000208 	.word	0x20000208
 8001fa8:	20000f64 	.word	0x20000f64
 8001fac:	20000210 	.word	0x20000210
 8001fb0:	20000fc8 	.word	0x20000fc8
 8001fb4:	08006454 	.word	0x08006454
 8001fb8:	20000fdc 	.word	0x20000fdc
 8001fbc:	20000dd0 	.word	0x20000dd0
 8001fc0:	20000214 	.word	0x20000214
 8001fc4:	20000ee0 	.word	0x20000ee0
 8001fc8:	20000ef4 	.word	0x20000ef4
 8001fcc:	20000f08 	.word	0x20000f08
 8001fd0:	20000f1c 	.word	0x20000f1c
 8001fd4:	20000e04 	.word	0x20000e04
 8001fd8:	08006464 	.word	0x08006464
 8001fdc:	20000e68 	.word	0x20000e68
 8001fe0:	08006478 	.word	0x08006478
 8001fe4:	20000df0 	.word	0x20000df0
 8001fe8:	0800648c 	.word	0x0800648c
 8001fec:	cccccccd 	.word	0xcccccccd
 8001ff0:	080064a4 	.word	0x080064a4
 8001ff4:	080064c0 	.word	0x080064c0
 8001ff8:	080064d8 	.word	0x080064d8
 8001ffc:	080064f8 	.word	0x080064f8

08002000 <rt_init>:

/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
void rt_init()
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	SPI_Comms_Init();
 8002004:	f000 fc46 	bl	8002894 <SPI_Comms_Init>
	FLASH_If_Init();
 8002008:	f7fe ff52 	bl	8000eb0 <FLASH_If_Init>
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <sha1_transform>:

/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
void sha1_transform(SHA1_CTX *ctx, uchar data[])
{
 8002010:	b480      	push	{r7}
 8002012:	b0db      	sub	sp, #364	; 0x16c
 8002014:	af00      	add	r7, sp, #0
 8002016:	1d3b      	adds	r3, r7, #4
 8002018:	6018      	str	r0, [r3, #0]
 800201a:	463b      	mov	r3, r7
 800201c:	6019      	str	r1, [r3, #0]
   uint a,b,c,d,e,i,j,t,m[80];

   for (i=0,j=0; i < 16; ++i, j += 4)
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800202a:	e031      	b.n	8002090 <sha1_transform+0x80>
      m[i] = (data[j] << 24) + (data[j+1] << 16) + (data[j+2] << 8) + (data[j+3]);
 800202c:	463b      	mov	r3, r7
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002034:	4413      	add	r3, r2
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	061a      	lsls	r2, r3, #24
 800203a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800203e:	3301      	adds	r3, #1
 8002040:	4639      	mov	r1, r7
 8002042:	6809      	ldr	r1, [r1, #0]
 8002044:	440b      	add	r3, r1
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	441a      	add	r2, r3
 800204c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002050:	3302      	adds	r3, #2
 8002052:	4639      	mov	r1, r7
 8002054:	6809      	ldr	r1, [r1, #0]
 8002056:	440b      	add	r3, r1
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	4413      	add	r3, r2
 800205e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002062:	3203      	adds	r2, #3
 8002064:	4639      	mov	r1, r7
 8002066:	6809      	ldr	r1, [r1, #0]
 8002068:	440a      	add	r2, r1
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	4413      	add	r3, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for (i=0,j=0; i < 16; ++i, j += 4)
 800207c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002080:	3301      	adds	r3, #1
 8002082:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002086:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800208a:	3304      	adds	r3, #4
 800208c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002090:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d9c9      	bls.n	800202c <sha1_transform+0x1c>
   for ( ; i < 80; ++i) {
 8002098:	e03b      	b.n	8002112 <sha1_transform+0x102>
      m[i] = (m[i-3] ^ m[i-8] ^ m[i-14] ^ m[i-16]);
 800209a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800209e:	1eda      	subs	r2, r3, #3
 80020a0:	f107 0308 	add.w	r3, r7, #8
 80020a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020ac:	f1a3 0108 	sub.w	r1, r3, #8
 80020b0:	f107 0308 	add.w	r3, r7, #8
 80020b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020b8:	405a      	eors	r2, r3
 80020ba:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020be:	f1a3 010e 	sub.w	r1, r3, #14
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020ca:	405a      	eors	r2, r3
 80020cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020d0:	f1a3 0110 	sub.w	r1, r3, #16
 80020d4:	f107 0308 	add.w	r3, r7, #8
 80020d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80020dc:	ea82 0103 	eor.w	r1, r2, r3
 80020e0:	f107 0308 	add.w	r3, r7, #8
 80020e4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80020e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      m[i] = (m[i] << 1) | (m[i] >> 31);
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	ea4f 71f3 	mov.w	r1, r3, ror #31
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8002104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   for ( ; i < 80; ++i) {
 8002108:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800210c:	3301      	adds	r3, #1
 800210e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002112:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002116:	2b4f      	cmp	r3, #79	; 0x4f
 8002118:	d9bf      	bls.n	800209a <sha1_transform+0x8a>
   }

   a = ctx->state[0];
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   b = ctx->state[1];
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   c = ctx->state[2];
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002134:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   d = ctx->state[3];
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   e = ctx->state[4];
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

   for (i=0; i < 20; ++i) {
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002152:	e03b      	b.n	80021cc <sha1_transform+0x1bc>
      t = ROTLEFT(a,5) + ((b & c) ^ (~b & d)) + e + ctx->k[0] + m[i];
 8002154:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002158:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800215c:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8002160:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002164:	4019      	ands	r1, r3
 8002166:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800216a:	43d8      	mvns	r0, r3
 800216c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002170:	4003      	ands	r3, r0
 8002172:	404b      	eors	r3, r1
 8002174:	441a      	add	r2, r3
 8002176:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800217a:	441a      	add	r2, r3
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002182:	441a      	add	r2, r3
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800218c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002190:	4413      	add	r3, r2
 8002192:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
      e = d;
 8002196:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800219a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      d = c;
 800219e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80021a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      c = ROTLEFT(b,30);
 80021a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80021aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80021ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      b = a;
 80021b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80021b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      a = t;
 80021ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80021be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   for (i=0; i < 20; ++i) {
 80021c2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021c6:	3301      	adds	r3, #1
 80021c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80021d0:	2b13      	cmp	r3, #19
 80021d2:	d9bf      	bls.n	8002154 <sha1_transform+0x144>
   }
   for ( ; i < 40; ++i) {
 80021d4:	e037      	b.n	8002246 <sha1_transform+0x236>
      t = ROTLEFT(a,5) + (b ^ c ^ d) + e + ctx->k[1] + m[i];
 80021d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80021da:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80021de:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80021e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80021e6:	4059      	eors	r1, r3
 80021e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80021ec:	404b      	eors	r3, r1
 80021ee:	441a      	add	r2, r3
 80021f0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80021f4:	441a      	add	r2, r3
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021fc:	441a      	add	r2, r3
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8002206:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800220a:	4413      	add	r3, r2
 800220c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
      e = d;
 8002210:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002214:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      d = c;
 8002218:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800221c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      c = ROTLEFT(b,30);
 8002220:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002224:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002228:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      b = a;
 800222c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002230:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      a = t;
 8002234:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002238:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   for ( ; i < 40; ++i) {
 800223c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002240:	3301      	adds	r3, #1
 8002242:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002246:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800224a:	2b27      	cmp	r3, #39	; 0x27
 800224c:	d9c3      	bls.n	80021d6 <sha1_transform+0x1c6>
   }
   for ( ; i < 60; ++i) {
 800224e:	e03d      	b.n	80022cc <sha1_transform+0x2bc>
      t = ROTLEFT(a,5) + ((b & c) ^ (b & d) ^ (c & d))  + e + ctx->k[2] + m[i];
 8002250:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002254:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8002258:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 800225c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002260:	4059      	eors	r1, r3
 8002262:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002266:	4019      	ands	r1, r3
 8002268:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 800226c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002270:	4003      	ands	r3, r0
 8002272:	404b      	eors	r3, r1
 8002274:	441a      	add	r2, r3
 8002276:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800227a:	441a      	add	r2, r3
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002282:	441a      	add	r2, r3
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800228c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002290:	4413      	add	r3, r2
 8002292:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
      e = d;
 8002296:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800229a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      d = c;
 800229e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80022a2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      c = ROTLEFT(b,30);
 80022a6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80022aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80022ae:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      b = a;
 80022b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80022b6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      a = t;
 80022ba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80022be:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   for ( ; i < 60; ++i) {
 80022c2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022c6:	3301      	adds	r3, #1
 80022c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80022cc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80022d0:	2b3b      	cmp	r3, #59	; 0x3b
 80022d2:	d9bd      	bls.n	8002250 <sha1_transform+0x240>
   }
   for ( ; i < 80; ++i) {
 80022d4:	e037      	b.n	8002346 <sha1_transform+0x336>
      t = ROTLEFT(a,5) + (b ^ c ^ d) + e + ctx->k[3] + m[i];
 80022d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80022da:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80022de:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 80022e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80022e6:	4059      	eors	r1, r3
 80022e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80022ec:	404b      	eors	r3, r1
 80022ee:	441a      	add	r2, r3
 80022f0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80022f4:	441a      	add	r2, r3
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fc:	441a      	add	r2, r3
 80022fe:	f107 0308 	add.w	r3, r7, #8
 8002302:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8002306:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800230a:	4413      	add	r3, r2
 800230c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
      e = d;
 8002310:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002314:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      d = c;
 8002318:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800231c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      c = ROTLEFT(b,30);
 8002320:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002324:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8002328:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      b = a;
 800232c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002330:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      a = t;
 8002334:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002338:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   for ( ; i < 80; ++i) {
 800233c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002340:	3301      	adds	r3, #1
 8002342:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002346:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800234a:	2b4f      	cmp	r3, #79	; 0x4f
 800234c:	d9c3      	bls.n	80022d6 <sha1_transform+0x2c6>
   }

   ctx->state[0] += a;
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002354:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002358:	441a      	add	r2, r3
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	64da      	str	r2, [r3, #76]	; 0x4c
   ctx->state[1] += b;
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002366:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800236a:	441a      	add	r2, r3
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	651a      	str	r2, [r3, #80]	; 0x50
   ctx->state[2] += c;
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002378:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800237c:	441a      	add	r2, r3
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	655a      	str	r2, [r3, #84]	; 0x54
   ctx->state[3] += d;
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800238a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800238e:	441a      	add	r2, r3
 8002390:	1d3b      	adds	r3, r7, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	659a      	str	r2, [r3, #88]	; 0x58
   ctx->state[4] += e;
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800239c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80023a0:	441a      	add	r2, r3
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80023a8:	bf00      	nop
 80023aa:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <sha1_init>:

void sha1_init(SHA1_CTX *ctx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
   ctx->datalen = 0;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
   ctx->bitlen[0] = 0;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
   ctx->bitlen[1] = 0;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	649a      	str	r2, [r3, #72]	; 0x48
   ctx->state[0] = 0x67452301;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a0f      	ldr	r2, [pc, #60]	; (8002410 <sha1_init+0x5c>)
 80023d2:	64da      	str	r2, [r3, #76]	; 0x4c
   ctx->state[1] = 0xEFCDAB89;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <sha1_init+0x60>)
 80023d8:	651a      	str	r2, [r3, #80]	; 0x50
   ctx->state[2] = 0x98BADCFE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <sha1_init+0x64>)
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
   ctx->state[3] = 0x10325476;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a0e      	ldr	r2, [pc, #56]	; (800241c <sha1_init+0x68>)
 80023e4:	659a      	str	r2, [r3, #88]	; 0x58
   ctx->state[4] = 0xc3d2e1f0;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <sha1_init+0x6c>)
 80023ea:	65da      	str	r2, [r3, #92]	; 0x5c
   ctx->k[0] = 0x5a827999;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <sha1_init+0x70>)
 80023f0:	661a      	str	r2, [r3, #96]	; 0x60
   ctx->k[1] = 0x6ed9eba1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a0c      	ldr	r2, [pc, #48]	; (8002428 <sha1_init+0x74>)
 80023f6:	665a      	str	r2, [r3, #100]	; 0x64
   ctx->k[2] = 0x8f1bbcdc;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <sha1_init+0x78>)
 80023fc:	669a      	str	r2, [r3, #104]	; 0x68
   ctx->k[3] = 0xca62c1d6;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <sha1_init+0x7c>)
 8002402:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	67452301 	.word	0x67452301
 8002414:	efcdab89 	.word	0xefcdab89
 8002418:	98badcfe 	.word	0x98badcfe
 800241c:	10325476 	.word	0x10325476
 8002420:	c3d2e1f0 	.word	0xc3d2e1f0
 8002424:	5a827999 	.word	0x5a827999
 8002428:	6ed9eba1 	.word	0x6ed9eba1
 800242c:	8f1bbcdc 	.word	0x8f1bbcdc
 8002430:	ca62c1d6 	.word	0xca62c1d6

08002434 <sha1_update>:

void sha1_update(SHA1_CTX *ctx, uchar data[], uint len)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
   uint i;

   for (i=0; i < len; ++i) {
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e02b      	b.n	800249e <sha1_update+0x6a>
      ctx->data[ctx->datalen] = data[i];
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	441a      	add	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	7811      	ldrb	r1, [r2, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	54d1      	strb	r1, [r2, r3]
      ctx->datalen++;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
      if (ctx->datalen == 64) {
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d117      	bne.n	8002498 <sha1_update+0x64>
         sha1_transform(ctx,ctx->data);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4619      	mov	r1, r3
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7ff fdcf 	bl	8002010 <sha1_transform>
         DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],512);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f513 7f00 	cmn.w	r3, #512	; 0x200
 800247a:	d304      	bcc.n	8002486 <sha1_update+0x52>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	649a      	str	r2, [r3, #72]	; 0x48
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
         ctx->datalen = 0;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
   for (i=0; i < len; ++i) {
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d3cf      	bcc.n	8002446 <sha1_update+0x12>
      }
   }
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <sha1_final>:

void sha1_final(SHA1_CTX *ctx, uchar hash[])
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
   uint i;

   i = ctx->datalen;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	60fb      	str	r3, [r7, #12]

   // Pad whatever data is left in the buffer.
   if (ctx->datalen < 56) {
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b37      	cmp	r3, #55	; 0x37
 80024c6:	d810      	bhi.n	80024ea <sha1_final+0x3a>
      ctx->data[i++] = 0x80;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	60fa      	str	r2, [r7, #12]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	2180      	movs	r1, #128	; 0x80
 80024d2:	54d1      	strb	r1, [r2, r3]
      while (i < 56)
 80024d4:	e005      	b.n	80024e2 <sha1_final+0x32>
         ctx->data[i++] = 0x00;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	60fa      	str	r2, [r7, #12]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	2100      	movs	r1, #0
 80024e0:	54d1      	strb	r1, [r2, r3]
      while (i < 56)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b37      	cmp	r3, #55	; 0x37
 80024e6:	d9f6      	bls.n	80024d6 <sha1_final+0x26>
 80024e8:	e01a      	b.n	8002520 <sha1_final+0x70>
   }
   else {
      ctx->data[i++] = 0x80;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	60fa      	str	r2, [r7, #12]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	54d1      	strb	r1, [r2, r3]
      while (i < 64)
 80024f6:	e005      	b.n	8002504 <sha1_final+0x54>
         ctx->data[i++] = 0x00;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	60fa      	str	r2, [r7, #12]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	2100      	movs	r1, #0
 8002502:	54d1      	strb	r1, [r2, r3]
      while (i < 64)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b3f      	cmp	r3, #63	; 0x3f
 8002508:	d9f6      	bls.n	80024f8 <sha1_final+0x48>
      sha1_transform(ctx,ctx->data);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4619      	mov	r1, r3
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff fd7e 	bl	8002010 <sha1_transform>
      memset(ctx->data,0,56);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2238      	movs	r2, #56	; 0x38
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f003 f914 	bl	8005748 <memset>
   }

   // Append to the padding the total message's length in bits and transform.
   DBL_INT_ADD(ctx->bitlen[0],ctx->bitlen[1],8 * ctx->datalen);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	43db      	mvns	r3, r3
 800252c:	429a      	cmp	r2, r3
 800252e:	d904      	bls.n	800253a <sha1_final+0x8a>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	649a      	str	r2, [r3, #72]	; 0x48
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	441a      	add	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	645a      	str	r2, [r3, #68]	; 0x44
   ctx->data[63] = ctx->bitlen[0];
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	b2da      	uxtb	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
   ctx->data[62] = ctx->bitlen[0] >> 8;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b2da      	uxtb	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
   ctx->data[61] = ctx->bitlen[0] >> 16;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	b2da      	uxtb	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
   ctx->data[60] = ctx->bitlen[0] >> 24;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	0e1b      	lsrs	r3, r3, #24
 8002578:	b2da      	uxtb	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   ctx->data[59] = ctx->bitlen[1];
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002584:	b2da      	uxtb	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
   ctx->data[58] = ctx->bitlen[1] >> 8;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	b2da      	uxtb	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
   ctx->data[57] = ctx->bitlen[1] >> 16;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   ctx->data[56] = ctx->bitlen[1] >> 24;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	0e1b      	lsrs	r3, r3, #24
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
   sha1_transform(ctx,ctx->data);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4619      	mov	r1, r3
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fd28 	bl	8002010 <sha1_transform>

   // Since this implementation uses little endian byte ordering and MD uses big endian,
   // reverse all the bytes when copying the final state to the output hash.
   for (i=0; i < 4; ++i) {
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e047      	b.n	8002656 <sha1_final+0x1a6>
      hash[i]    = (ctx->state[0] >> (24-i*8)) & 0x000000ff;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f1c3 0303 	rsb	r3, r3, #3
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	fa22 f103 	lsr.w	r1, r2, r3
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	b2ca      	uxtb	r2, r1
 80025de:	701a      	strb	r2, [r3, #0]
      hash[i+4]  = (ctx->state[1] >> (24-i*8)) & 0x000000ff;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f1c3 0303 	rsb	r3, r3, #3
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	fa22 f103 	lsr.w	r1, r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	3304      	adds	r3, #4
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	b2ca      	uxtb	r2, r1
 80025fa:	701a      	strb	r2, [r3, #0]
      hash[i+8]  = (ctx->state[2] >> (24-i*8)) & 0x000000ff;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f1c3 0303 	rsb	r3, r3, #3
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	fa22 f103 	lsr.w	r1, r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3308      	adds	r3, #8
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	4413      	add	r3, r2
 8002614:	b2ca      	uxtb	r2, r1
 8002616:	701a      	strb	r2, [r3, #0]
      hash[i+12] = (ctx->state[3] >> (24-i*8)) & 0x000000ff;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f1c3 0303 	rsb	r3, r3, #3
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	fa22 f103 	lsr.w	r1, r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	330c      	adds	r3, #12
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	4413      	add	r3, r2
 8002630:	b2ca      	uxtb	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
      hash[i+16] = (ctx->state[4] >> (24-i*8)) & 0x000000ff;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f1c3 0303 	rsb	r3, r3, #3
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	fa22 f103 	lsr.w	r1, r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3310      	adds	r3, #16
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	4413      	add	r3, r2
 800264c:	b2ca      	uxtb	r2, r1
 800264e:	701a      	strb	r2, [r3, #0]
   for (i=0; i < 4; ++i) {
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3301      	adds	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d9b4      	bls.n	80025c6 <sha1_final+0x116>
   }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800266c:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <MX_SPI1_Init+0x60>)
 800266e:	4a17      	ldr	r2, [pc, #92]	; (80026cc <MX_SPI1_Init+0x64>)
 8002670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <MX_SPI1_Init+0x60>)
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <MX_SPI1_Init+0x60>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <MX_SPI1_Init+0x60>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <MX_SPI1_Init+0x60>)
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <MX_SPI1_Init+0x60>)
 800268c:	2200      	movs	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002690:	4b0d      	ldr	r3, [pc, #52]	; (80026c8 <MX_SPI1_Init+0x60>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002696:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_SPI1_Init+0x60>)
 8002698:	2208      	movs	r2, #8
 800269a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800269c:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <MX_SPI1_Init+0x60>)
 800269e:	2200      	movs	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_SPI1_Init+0x60>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <MX_SPI1_Init+0x60>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_SPI1_Init+0x60>)
 80026b0:	220a      	movs	r2, #10
 80026b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026b4:	4804      	ldr	r0, [pc, #16]	; (80026c8 <MX_SPI1_Init+0x60>)
 80026b6:	f002 f90f 	bl	80048d8 <HAL_SPI_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 80026c0:	f7fe ff08 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20001040 	.word	0x20001040
 80026cc:	40013000 	.word	0x40013000

080026d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a47      	ldr	r2, [pc, #284]	; (8002808 <HAL_SPI_MspInit+0x138>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f040 8086 	bne.w	80027fe <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026f2:	4b46      	ldr	r3, [pc, #280]	; (800280c <HAL_SPI_MspInit+0x13c>)
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	4a45      	ldr	r2, [pc, #276]	; (800280c <HAL_SPI_MspInit+0x13c>)
 80026f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026fc:	6193      	str	r3, [r2, #24]
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_SPI_MspInit+0x13c>)
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270a:	4b40      	ldr	r3, [pc, #256]	; (800280c <HAL_SPI_MspInit+0x13c>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	4a3f      	ldr	r2, [pc, #252]	; (800280c <HAL_SPI_MspInit+0x13c>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6193      	str	r3, [r2, #24]
 8002716:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_SPI_MspInit+0x13c>)
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8002722:	23b0      	movs	r3, #176	; 0xb0
 8002724:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 0310 	add.w	r3, r7, #16
 8002732:	4619      	mov	r1, r3
 8002734:	4836      	ldr	r0, [pc, #216]	; (8002810 <HAL_SPI_MspInit+0x140>)
 8002736:	f001 fad7 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002742:	2303      	movs	r3, #3
 8002744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	4619      	mov	r1, r3
 800274c:	4830      	ldr	r0, [pc, #192]	; (8002810 <HAL_SPI_MspInit+0x140>)
 800274e:	f001 facb 	bl	8003ce8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002752:	4b30      	ldr	r3, [pc, #192]	; (8002814 <HAL_SPI_MspInit+0x144>)
 8002754:	4a30      	ldr	r2, [pc, #192]	; (8002818 <HAL_SPI_MspInit+0x148>)
 8002756:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002758:	4b2e      	ldr	r3, [pc, #184]	; (8002814 <HAL_SPI_MspInit+0x144>)
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800275e:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_SPI_MspInit+0x144>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <HAL_SPI_MspInit+0x144>)
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800276a:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <HAL_SPI_MspInit+0x144>)
 800276c:	2200      	movs	r2, #0
 800276e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002770:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_SPI_MspInit+0x144>)
 8002772:	2200      	movs	r2, #0
 8002774:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_SPI_MspInit+0x144>)
 8002778:	2220      	movs	r2, #32
 800277a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800277c:	4b25      	ldr	r3, [pc, #148]	; (8002814 <HAL_SPI_MspInit+0x144>)
 800277e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002782:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002784:	4823      	ldr	r0, [pc, #140]	; (8002814 <HAL_SPI_MspInit+0x144>)
 8002786:	f000 fc25 	bl	8002fd4 <HAL_DMA_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8002790:	f7fe fea0 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <HAL_SPI_MspInit+0x144>)
 8002798:	64da      	str	r2, [r3, #76]	; 0x4c
 800279a:	4a1e      	ldr	r2, [pc, #120]	; (8002814 <HAL_SPI_MspInit+0x144>)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027a2:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <HAL_SPI_MspInit+0x150>)
 80027a4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027a8:	2210      	movs	r2, #16
 80027aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027b2:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027be:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80027d2:	4812      	ldr	r0, [pc, #72]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027d4:	f000 fbfe 	bl	8002fd4 <HAL_DMA_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80027de:	f7fe fe79 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027e6:	649a      	str	r2, [r3, #72]	; 0x48
 80027e8:	4a0c      	ldr	r2, [pc, #48]	; (800281c <HAL_SPI_MspInit+0x14c>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2100      	movs	r1, #0
 80027f2:	2023      	movs	r0, #35	; 0x23
 80027f4:	f000 fbb7 	bl	8002f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80027f8:	2023      	movs	r0, #35	; 0x23
 80027fa:	f000 fbd0 	bl	8002f9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027fe:	bf00      	nop
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40013000 	.word	0x40013000
 800280c:	40021000 	.word	0x40021000
 8002810:	40010800 	.word	0x40010800
 8002814:	20001098 	.word	0x20001098
 8002818:	4002001c 	.word	0x4002001c
 800281c:	200010dc 	.word	0x200010dc
 8002820:	40020030 	.word	0x40020030

08002824 <SPI_DMA_Reset>:
/**
 * @brief  SPI DMA reset function
 * @param  none
 * @retval none
 */
void SPI_DMA_Reset(void){
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
	//dbprintf("%s",__func__);
	/* Disable the peripheral */
	hdma_spi1_tx.Instance->CCR &= ~DMA_CCR_EN;
 8002828:	4b16      	ldr	r3, [pc, #88]	; (8002884 <SPI_DMA_Reset+0x60>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <SPI_DMA_Reset+0x60>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]
	hdma_spi1_tx.DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma_spi1_tx.ChannelIndex);
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <SPI_DMA_Reset+0x60>)
 800283a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <SPI_DMA_Reset+0x60>)
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	605a      	str	r2, [r3, #4]
	/* Configure DMA Channel data length */
	hdma_spi1_tx.Instance->CNDTR = MAX_SPI_PACKET_SIZE;
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <SPI_DMA_Reset+0x60>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	605a      	str	r2, [r3, #4]
	/* Configure DMA Channel destination address */
	hdma_spi1_tx.Instance->CPAR = (uint32_t)&hspi1.Instance->DR;
 8002850:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <SPI_DMA_Reset+0x64>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f103 020c 	add.w	r2, r3, #12
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <SPI_DMA_Reset+0x60>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	609a      	str	r2, [r3, #8]
	/* Configure DMA Channel source address */
	hdma_spi1_tx.Instance->CMAR = (uint32_t)&gSPI_Tx_DMA_Buf[0];
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <SPI_DMA_Reset+0x60>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <SPI_DMA_Reset+0x68>)
 8002864:	60da      	str	r2, [r3, #12]
	/* Enable the Peripheral */
	hdma_spi1_tx.Instance->CCR |= DMA_CCR_EN;
 8002866:	4b07      	ldr	r3, [pc, #28]	; (8002884 <SPI_DMA_Reset+0x60>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <SPI_DMA_Reset+0x60>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]

	prevDMACnt = MAX_SPI_PACKET_SIZE;
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <SPI_DMA_Reset+0x6c>)
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	801a      	strh	r2, [r3, #0]
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	200010dc 	.word	0x200010dc
 8002888:	20001040 	.word	0x20001040
 800288c:	2000079c 	.word	0x2000079c
 8002890:	20000218 	.word	0x20000218

08002894 <SPI_Comms_Init>:
 * @brief  SPI communication initialize
 * @param  none
 * @retval none
 */
void SPI_Comms_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0

	memset(&gSPI_Rx_DMA_Buf[0],0,MAX_SPI_PACKET_SIZE);
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	2100      	movs	r1, #0
 800289c:	4818      	ldr	r0, [pc, #96]	; (8002900 <SPI_Comms_Init+0x6c>)
 800289e:	f002 ff53 	bl	8005748 <memset>
	memset(&gSPI_Tx_DMA_Buf[0],0,MAX_SPI_PACKET_SIZE);
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	2100      	movs	r1, #0
 80028a6:	4817      	ldr	r0, [pc, #92]	; (8002904 <SPI_Comms_Init+0x70>)
 80028a8:	f002 ff4e 	bl	8005748 <memset>

	HAL_SPI_Receive_DMA(&hspi1, gSPI_Rx_DMA_Buf, MAX_SPI_PACKET_SIZE);
 80028ac:	2280      	movs	r2, #128	; 0x80
 80028ae:	4914      	ldr	r1, [pc, #80]	; (8002900 <SPI_Comms_Init+0x6c>)
 80028b0:	4815      	ldr	r0, [pc, #84]	; (8002908 <SPI_Comms_Init+0x74>)
 80028b2:	f002 f895 	bl	80049e0 <HAL_SPI_Receive_DMA>

	SET_BIT(hspi1.Instance->CR2, SPI_CR2_TXDMAEN);
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <SPI_Comms_Init+0x74>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <SPI_Comms_Init+0x74>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f042 0202 	orr.w	r2, r2, #2
 80028c4:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(hspi1.Instance->CR1, SPI_CR1_SSM);
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <SPI_Comms_Init+0x74>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <SPI_Comms_Init+0x74>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028d4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(hspi1.Instance->CR1, SPI_CR1_SSI);
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <SPI_Comms_Init+0x74>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <SPI_Comms_Init+0x74>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028e4:	601a      	str	r2, [r3, #0]

	HAL_DMA_Start(&hdma_spi1_tx, (uint32_t)&gSPI_Tx_DMA_Buf[0], (uint32_t)&hspi1.Instance->DR, MAX_SPI_PACKET_SIZE);
 80028e6:	4907      	ldr	r1, [pc, #28]	; (8002904 <SPI_Comms_Init+0x70>)
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <SPI_Comms_Init+0x74>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	330c      	adds	r3, #12
 80028ee:	461a      	mov	r2, r3
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	4806      	ldr	r0, [pc, #24]	; (800290c <SPI_Comms_Init+0x78>)
 80028f4:	f000 fbe4 	bl	80030c0 <HAL_DMA_Start>

	Set_Comms_Mode();
 80028f8:	f7fe fd32 	bl	8001360 <Set_Comms_Mode>
}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200008a8 	.word	0x200008a8
 8002904:	2000079c 	.word	0x2000079c
 8002908:	20001040 	.word	0x20001040
 800290c:	200010dc 	.word	0x200010dc

08002910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_MspInit+0x5c>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <HAL_MspInit+0x5c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6193      	str	r3, [r2, #24]
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_MspInit+0x5c>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_MspInit+0x5c>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_MspInit+0x5c>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_MspInit+0x5c>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_MspInit+0x60>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_MspInit+0x60>)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	40021000 	.word	0x40021000
 8002970:	40010000 	.word	0x40010000

08002974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <NMI_Handler+0x4>
	...

0800297c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  dbprintf("%s",__func__);
 8002980:	4902      	ldr	r1, [pc, #8]	; (800298c <HardFault_Handler+0x10>)
 8002982:	4803      	ldr	r0, [pc, #12]	; (8002990 <HardFault_Handler+0x14>)
 8002984:	f000 f960 	bl	8002c48 <dbprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <HardFault_Handler+0xc>
 800298a:	bf00      	nop
 800298c:	080069e0 	.word	0x080069e0
 8002990:	0800653c 	.word	0x0800653c

08002994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <MemManage_Handler+0x4>

0800299a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800299e:	e7fe      	b.n	800299e <BusFault_Handler+0x4>

080029a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <UsageFault_Handler+0x4>

080029a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ce:	f000 f9b9 	bl	8002d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <DMA1_Channel2_IRQHandler+0x10>)
 80029de:	f000 fd19 	bl	8003414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20001098 	.word	0x20001098

080029ec <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <DMA1_Channel3_IRQHandler+0x10>)
 80029f2:	f000 fd0f 	bl	8003414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200010dc 	.word	0x200010dc

08002a00 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <DMA1_Channel4_IRQHandler+0x10>)
 8002a06:	f000 fd05 	bl	8003414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20001120 	.word	0x20001120

08002a14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002a18:	2020      	movs	r0, #32
 8002a1a:	f001 fb2b 	bl	8004074 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <SPI1_IRQHandler+0x10>)
 8002a2a:	f002 f9a3 	bl	8004d74 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20001040 	.word	0x20001040

08002a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a40:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <_sbrk+0x5c>)
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <_sbrk+0x60>)
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <_sbrk+0x64>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <_sbrk+0x64>)
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <_sbrk+0x68>)
 8002a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a5a:	4b10      	ldr	r3, [pc, #64]	; (8002a9c <_sbrk+0x64>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d207      	bcs.n	8002a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a68:	f002 fe28 	bl	80056bc <__errno>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	220c      	movs	r2, #12
 8002a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a72:	f04f 33ff 	mov.w	r3, #4294967295
 8002a76:	e009      	b.n	8002a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a78:	4b08      	ldr	r3, [pc, #32]	; (8002a9c <_sbrk+0x64>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <_sbrk+0x64>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <_sbrk+0x64>)
 8002a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	2000c000 	.word	0x2000c000
 8002a98:	00000400 	.word	0x00000400
 8002a9c:	20000380 	.word	0x20000380
 8002aa0:	200011e0 	.word	0x200011e0

08002aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <MX_USART1_UART_Init+0x50>)
 8002ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002abc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ad6:	220c      	movs	r2, #12
 8002ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ae6:	4805      	ldr	r0, [pc, #20]	; (8002afc <MX_USART1_UART_Init+0x4c>)
 8002ae8:	f002 fc30 	bl	800534c <HAL_UART_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002af2:	f7fe fcef 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20001164 	.word	0x20001164
 8002b00:	40013800 	.word	0x40013800

08002b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a2f      	ldr	r2, [pc, #188]	; (8002bdc <HAL_UART_MspInit+0xd8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d157      	bne.n	8002bd4 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b24:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <HAL_UART_MspInit+0xdc>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	4a2d      	ldr	r2, [pc, #180]	; (8002be0 <HAL_UART_MspInit+0xdc>)
 8002b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b2e:	6193      	str	r3, [r2, #24]
 8002b30:	4b2b      	ldr	r3, [pc, #172]	; (8002be0 <HAL_UART_MspInit+0xdc>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3c:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <HAL_UART_MspInit+0xdc>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_UART_MspInit+0xdc>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6193      	str	r3, [r2, #24]
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_UART_MspInit+0xdc>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 8002b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4619      	mov	r1, r3
 8002b68:	481e      	ldr	r0, [pc, #120]	; (8002be4 <HAL_UART_MspInit+0xe0>)
 8002b6a:	f001 f8bd 	bl	8003ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DBG_RX_Pin;
 8002b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 8002b7c:	f107 0310 	add.w	r3, r7, #16
 8002b80:	4619      	mov	r1, r3
 8002b82:	4818      	ldr	r0, [pc, #96]	; (8002be4 <HAL_UART_MspInit+0xe0>)
 8002b84:	f001 f8b0 	bl	8003ce8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002b88:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002b8a:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_UART_MspInit+0xe8>)
 8002b8c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002b90:	2210      	movs	r2, #16
 8002b92:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9a:	4b13      	ldr	r3, [pc, #76]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ba6:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002bb8:	480b      	ldr	r0, [pc, #44]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002bba:	f000 fa0b 	bl	8002fd4 <HAL_DMA_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002bc4:	f7fe fc86 	bl	80014d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8002bce:	4a06      	ldr	r2, [pc, #24]	; (8002be8 <HAL_UART_MspInit+0xe4>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40010800 	.word	0x40010800
 8002be8:	20001120 	.word	0x20001120
 8002bec:	40020044 	.word	0x40020044

08002bf0 <vprintln>:
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    }
}

void vprintln(const char *fmt, va_list argp)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0b4      	sub	sp, #208	; 0xd0
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8002bfa:	f107 0308 	add.w	r3, r7, #8
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fdd2 	bl	80057ac <vsiprintf>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	dd14      	ble.n	8002c38 <vprintln+0x48>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 8002c0e:	f107 0308 	add.w	r3, r7, #8
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fb0a 	bl	800022c <strlen>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	f107 0108 	add.w	r1, r7, #8
 8002c20:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002c24:	4806      	ldr	r0, [pc, #24]	; (8002c40 <vprintln+0x50>)
 8002c26:	f002 fbde 	bl	80053e6 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r",2, 0xffffff);
 8002c2a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002c2e:	2202      	movs	r2, #2
 8002c30:	4904      	ldr	r1, [pc, #16]	; (8002c44 <vprintln+0x54>)
 8002c32:	4803      	ldr	r0, [pc, #12]	; (8002c40 <vprintln+0x50>)
 8002c34:	f002 fbd7 	bl	80053e6 <HAL_UART_Transmit>
    }
}
 8002c38:	bf00      	nop
 8002c3a:	37d0      	adds	r7, #208	; 0xd0
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20001164 	.word	0x20001164
 8002c44:	08006540 	.word	0x08006540

08002c48 <dbprintf>:

void dbprintf(const char *fmt, ...)
{
 8002c48:	b40f      	push	{r0, r1, r2, r3}
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8002c50:	f107 0314 	add.w	r3, r7, #20
 8002c54:	607b      	str	r3, [r7, #4]
    vprintln((const char *)fmt, argp);
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	6938      	ldr	r0, [r7, #16]
 8002c5a:	f7ff ffc9 	bl	8002bf0 <vprintln>
    va_end(argp);
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c68:	b004      	add	sp, #16
 8002c6a:	4770      	bx	lr

08002c6c <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c6e:	490d      	ldr	r1, [pc, #52]	; (8002ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c74:	e002      	b.n	8002c7c <LoopCopyDataInit>

08002c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7a:	3304      	adds	r3, #4

08002c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c80:	d3f9      	bcc.n	8002c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c82:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c88:	e001      	b.n	8002c8e <LoopFillZerobss>

08002c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c8c:	3204      	adds	r2, #4

08002c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c90:	d3fb      	bcc.n	8002c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c92:	f7ff ff07 	bl	8002aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c96:	f002 fd17 	bl	80056c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c9a:	f7fe fad7 	bl	800124c <main>
  bx lr
 8002c9e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  ldr r0, =_sdata
 8002ca0:	20000208 	.word	0x20000208
  ldr r1, =_edata
 8002ca4:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8002ca8:	08006a48 	.word	0x08006a48
  ldr r2, =_sbss
 8002cac:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8002cb0:	200011e0 	.word	0x200011e0

08002cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cb4:	e7fe      	b.n	8002cb4 <ADC1_2_IRQHandler>
	...

08002cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_Init+0x28>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_Init+0x28>)
 8002cc2:	f043 0310 	orr.w	r3, r3, #16
 8002cc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc8:	2003      	movs	r0, #3
 8002cca:	f000 f941 	bl	8002f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cce:	200f      	movs	r0, #15
 8002cd0:	f000 f808 	bl	8002ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd4:	f7ff fe1c 	bl	8002910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40022000 	.word	0x40022000

08002ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_InitTick+0x54>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_InitTick+0x58>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f959 	bl	8002fba <HAL_SYSTICK_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00e      	b.n	8002d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d80a      	bhi.n	8002d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f000 f921 	bl	8002f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d24:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <HAL_InitTick+0x5c>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000220 	.word	0x20000220
 8002d3c:	20000228 	.word	0x20000228
 8002d40:	20000224 	.word	0x20000224

08002d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_IncTick+0x1c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <HAL_IncTick+0x20>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	4a03      	ldr	r2, [pc, #12]	; (8002d64 <HAL_IncTick+0x20>)
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr
 8002d60:	20000228 	.word	0x20000228
 8002d64:	200011a8 	.word	0x200011a8

08002d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <HAL_GetTick+0x10>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	200011a8 	.word	0x200011a8

08002d7c <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <HAL_GetUIDw0+0x10>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	1ffff7e8 	.word	0x1ffff7e8

08002d90 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002d94:	4b02      	ldr	r3, [pc, #8]	; (8002da0 <HAL_GetUIDw1+0x10>)
 8002d96:	681b      	ldr	r3, [r3, #0]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	1ffff7ec 	.word	0x1ffff7ec

08002da4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002da8:	4b02      	ldr	r3, [pc, #8]	; (8002db4 <HAL_GetUIDw2+0x10>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr
 8002db4:	1ffff7f0 	.word	0x1ffff7f0

08002db8 <__NVIC_SetPriorityGrouping>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <__NVIC_SetPriorityGrouping+0x44>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dea:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <__NVIC_SetPriorityGrouping+0x44>)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	60d3      	str	r3, [r2, #12]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_GetPriorityGrouping>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <__NVIC_GetPriorityGrouping+0x18>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	f003 0307 	and.w	r3, r3, #7
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <__NVIC_EnableIRQ>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	db0b      	blt.n	8002e46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	4906      	ldr	r1, [pc, #24]	; (8002e50 <__NVIC_EnableIRQ+0x34>)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bc80      	pop	{r7}
 8002e4e:	4770      	bx	lr
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0a      	blt.n	8002e7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	490c      	ldr	r1, [pc, #48]	; (8002ea0 <__NVIC_SetPriority+0x4c>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	440b      	add	r3, r1
 8002e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e7c:	e00a      	b.n	8002e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4908      	ldr	r1, [pc, #32]	; (8002ea4 <__NVIC_SetPriority+0x50>)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	440b      	add	r3, r1
 8002e92:	761a      	strb	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <NVIC_EncodePriority>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	; 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f1c3 0307 	rsb	r3, r3, #7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf28      	it	cs
 8002ec6:	2304      	movcs	r3, #4
 8002ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d902      	bls.n	8002ed8 <NVIC_EncodePriority+0x30>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b03      	subs	r3, #3
 8002ed6:	e000      	b.n	8002eda <NVIC_EncodePriority+0x32>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	4313      	orrs	r3, r2
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	; 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f1c:	d301      	bcc.n	8002f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00f      	b.n	8002f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <SysTick_Config+0x40>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2a:	210f      	movs	r1, #15
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f7ff ff90 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <SysTick_Config+0x40>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <SysTick_Config+0x40>)
 8002f3c:	2207      	movs	r2, #7
 8002f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	e000e010 	.word	0xe000e010

08002f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff2d 	bl	8002db8 <__NVIC_SetPriorityGrouping>
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f78:	f7ff ff42 	bl	8002e00 <__NVIC_GetPriorityGrouping>
 8002f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	68b9      	ldr	r1, [r7, #8]
 8002f82:	6978      	ldr	r0, [r7, #20]
 8002f84:	f7ff ff90 	bl	8002ea8 <NVIC_EncodePriority>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff5f 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff ff35 	bl	8002e1c <__NVIC_EnableIRQ>
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ffa2 	bl	8002f0c <SysTick_Config>
 8002fc8:	4603      	mov	r3, r0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e059      	b.n	800309e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <HAL_DMA_Init+0xd4>)
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d80f      	bhi.n	8003016 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	; (80030ac <HAL_DMA_Init+0xd8>)
 8002ffe:	4413      	add	r3, r2
 8003000:	4a2b      	ldr	r2, [pc, #172]	; (80030b0 <HAL_DMA_Init+0xdc>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	009a      	lsls	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a28      	ldr	r2, [pc, #160]	; (80030b4 <HAL_DMA_Init+0xe0>)
 8003012:	63da      	str	r2, [r3, #60]	; 0x3c
 8003014:	e00e      	b.n	8003034 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <HAL_DMA_Init+0xe4>)
 800301e:	4413      	add	r3, r2
 8003020:	4a23      	ldr	r2, [pc, #140]	; (80030b0 <HAL_DMA_Init+0xdc>)
 8003022:	fba2 2303 	umull	r2, r3, r2, r3
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	009a      	lsls	r2, r3, #2
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a22      	ldr	r2, [pc, #136]	; (80030bc <HAL_DMA_Init+0xe8>)
 8003032:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800304a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800304e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003058:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003064:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003070:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4313      	orrs	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	40020407 	.word	0x40020407
 80030ac:	bffdfff8 	.word	0xbffdfff8
 80030b0:	cccccccd 	.word	0xcccccccd
 80030b4:	40020000 	.word	0x40020000
 80030b8:	bffdfbf8 	.word	0xbffdfbf8
 80030bc:	40020400 	.word	0x40020400

080030c0 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_DMA_Start+0x20>
 80030dc:	2302      	movs	r3, #2
 80030de:	e02d      	b.n	800313c <HAL_DMA_Start+0x7c>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d11d      	bne.n	800312e <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2202      	movs	r2, #2
 80030f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fbb8 	bl	800388c <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	e005      	b.n	800313a <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 800313a:	7dfb      	ldrb	r3, [r7, #23]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_DMA_Start_IT+0x20>
 8003160:	2302      	movs	r3, #2
 8003162:	e04a      	b.n	80031fa <HAL_DMA_Start_IT+0xb6>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003172:	2b01      	cmp	r3, #1
 8003174:	d13a      	bne.n	80031ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2202      	movs	r2, #2
 800317a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fb76 	bl	800388c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 020e 	orr.w	r2, r2, #14
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	e00f      	b.n	80031da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0204 	bic.w	r2, r2, #4
 80031c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f042 020a 	orr.w	r2, r2, #10
 80031d8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e005      	b.n	80031f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80031f4:	2302      	movs	r3, #2
 80031f6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80031f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003216:	2b02      	cmp	r3, #2
 8003218:	d005      	beq.n	8003226 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2204      	movs	r2, #4
 800321e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
 8003224:	e0d6      	b.n	80033d4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 020e 	bic.w	r2, r2, #14
 8003234:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0201 	bic.w	r2, r2, #1
 8003244:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <HAL_DMA_Abort_IT+0x1dc>)
 800324e:	429a      	cmp	r2, r3
 8003250:	d958      	bls.n	8003304 <HAL_DMA_Abort_IT+0x100>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a63      	ldr	r2, [pc, #396]	; (80033e4 <HAL_DMA_Abort_IT+0x1e0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d04f      	beq.n	80032fc <HAL_DMA_Abort_IT+0xf8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a61      	ldr	r2, [pc, #388]	; (80033e8 <HAL_DMA_Abort_IT+0x1e4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d048      	beq.n	80032f8 <HAL_DMA_Abort_IT+0xf4>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a60      	ldr	r2, [pc, #384]	; (80033ec <HAL_DMA_Abort_IT+0x1e8>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d040      	beq.n	80032f2 <HAL_DMA_Abort_IT+0xee>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a5e      	ldr	r2, [pc, #376]	; (80033f0 <HAL_DMA_Abort_IT+0x1ec>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d038      	beq.n	80032ec <HAL_DMA_Abort_IT+0xe8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a5d      	ldr	r2, [pc, #372]	; (80033f4 <HAL_DMA_Abort_IT+0x1f0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d030      	beq.n	80032e6 <HAL_DMA_Abort_IT+0xe2>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5b      	ldr	r2, [pc, #364]	; (80033f8 <HAL_DMA_Abort_IT+0x1f4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d028      	beq.n	80032e0 <HAL_DMA_Abort_IT+0xdc>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a53      	ldr	r2, [pc, #332]	; (80033e0 <HAL_DMA_Abort_IT+0x1dc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d020      	beq.n	80032da <HAL_DMA_Abort_IT+0xd6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a57      	ldr	r2, [pc, #348]	; (80033fc <HAL_DMA_Abort_IT+0x1f8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d019      	beq.n	80032d6 <HAL_DMA_Abort_IT+0xd2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a56      	ldr	r2, [pc, #344]	; (8003400 <HAL_DMA_Abort_IT+0x1fc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d012      	beq.n	80032d2 <HAL_DMA_Abort_IT+0xce>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a54      	ldr	r2, [pc, #336]	; (8003404 <HAL_DMA_Abort_IT+0x200>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00a      	beq.n	80032cc <HAL_DMA_Abort_IT+0xc8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a53      	ldr	r2, [pc, #332]	; (8003408 <HAL_DMA_Abort_IT+0x204>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d102      	bne.n	80032c6 <HAL_DMA_Abort_IT+0xc2>
 80032c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c4:	e01b      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ca:	e018      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d0:	e015      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032d2:	2310      	movs	r3, #16
 80032d4:	e013      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e011      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032de:	e00e      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80032e4:	e00b      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ea:	e008      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f0:	e005      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f6:	e002      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032f8:	2310      	movs	r3, #16
 80032fa:	e000      	b.n	80032fe <HAL_DMA_Abort_IT+0xfa>
 80032fc:	2301      	movs	r3, #1
 80032fe:	4a43      	ldr	r2, [pc, #268]	; (800340c <HAL_DMA_Abort_IT+0x208>)
 8003300:	6053      	str	r3, [r2, #4]
 8003302:	e057      	b.n	80033b4 <HAL_DMA_Abort_IT+0x1b0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a36      	ldr	r2, [pc, #216]	; (80033e4 <HAL_DMA_Abort_IT+0x1e0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d04f      	beq.n	80033ae <HAL_DMA_Abort_IT+0x1aa>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a35      	ldr	r2, [pc, #212]	; (80033e8 <HAL_DMA_Abort_IT+0x1e4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d048      	beq.n	80033aa <HAL_DMA_Abort_IT+0x1a6>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a33      	ldr	r2, [pc, #204]	; (80033ec <HAL_DMA_Abort_IT+0x1e8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d040      	beq.n	80033a4 <HAL_DMA_Abort_IT+0x1a0>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a32      	ldr	r2, [pc, #200]	; (80033f0 <HAL_DMA_Abort_IT+0x1ec>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d038      	beq.n	800339e <HAL_DMA_Abort_IT+0x19a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a30      	ldr	r2, [pc, #192]	; (80033f4 <HAL_DMA_Abort_IT+0x1f0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d030      	beq.n	8003398 <HAL_DMA_Abort_IT+0x194>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2f      	ldr	r2, [pc, #188]	; (80033f8 <HAL_DMA_Abort_IT+0x1f4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d028      	beq.n	8003392 <HAL_DMA_Abort_IT+0x18e>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a26      	ldr	r2, [pc, #152]	; (80033e0 <HAL_DMA_Abort_IT+0x1dc>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d020      	beq.n	800338c <HAL_DMA_Abort_IT+0x188>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <HAL_DMA_Abort_IT+0x1f8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d019      	beq.n	8003388 <HAL_DMA_Abort_IT+0x184>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a29      	ldr	r2, [pc, #164]	; (8003400 <HAL_DMA_Abort_IT+0x1fc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d012      	beq.n	8003384 <HAL_DMA_Abort_IT+0x180>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a28      	ldr	r2, [pc, #160]	; (8003404 <HAL_DMA_Abort_IT+0x200>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00a      	beq.n	800337e <HAL_DMA_Abort_IT+0x17a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a26      	ldr	r2, [pc, #152]	; (8003408 <HAL_DMA_Abort_IT+0x204>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d102      	bne.n	8003378 <HAL_DMA_Abort_IT+0x174>
 8003372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003376:	e01b      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 8003378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800337c:	e018      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 800337e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003382:	e015      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 8003384:	2310      	movs	r3, #16
 8003386:	e013      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 8003388:	2301      	movs	r3, #1
 800338a:	e011      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 800338c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003390:	e00e      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 8003392:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003396:	e00b      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 8003398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800339c:	e008      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 800339e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a2:	e005      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 80033a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033a8:	e002      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 80033aa:	2310      	movs	r3, #16
 80033ac:	e000      	b.n	80033b0 <HAL_DMA_Abort_IT+0x1ac>
 80033ae:	2301      	movs	r3, #1
 80033b0:	4a17      	ldr	r2, [pc, #92]	; (8003410 <HAL_DMA_Abort_IT+0x20c>)
 80033b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
    } 
  }
  return status;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40020080 	.word	0x40020080
 80033e4:	40020008 	.word	0x40020008
 80033e8:	4002001c 	.word	0x4002001c
 80033ec:	40020030 	.word	0x40020030
 80033f0:	40020044 	.word	0x40020044
 80033f4:	40020058 	.word	0x40020058
 80033f8:	4002006c 	.word	0x4002006c
 80033fc:	40020408 	.word	0x40020408
 8003400:	4002041c 	.word	0x4002041c
 8003404:	40020430 	.word	0x40020430
 8003408:	40020444 	.word	0x40020444
 800340c:	40020400 	.word	0x40020400
 8003410:	40020000 	.word	0x40020000

08003414 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	2204      	movs	r2, #4
 8003432:	409a      	lsls	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80d6 	beq.w	80035ea <HAL_DMA_IRQHandler+0x1d6>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80d0 	beq.w	80035ea <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d107      	bne.n	8003468 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0204 	bic.w	r2, r2, #4
 8003466:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	4b9b      	ldr	r3, [pc, #620]	; (80036dc <HAL_DMA_IRQHandler+0x2c8>)
 8003470:	429a      	cmp	r2, r3
 8003472:	d958      	bls.n	8003526 <HAL_DMA_IRQHandler+0x112>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a99      	ldr	r2, [pc, #612]	; (80036e0 <HAL_DMA_IRQHandler+0x2cc>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d04f      	beq.n	800351e <HAL_DMA_IRQHandler+0x10a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a98      	ldr	r2, [pc, #608]	; (80036e4 <HAL_DMA_IRQHandler+0x2d0>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d048      	beq.n	800351a <HAL_DMA_IRQHandler+0x106>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a96      	ldr	r2, [pc, #600]	; (80036e8 <HAL_DMA_IRQHandler+0x2d4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d040      	beq.n	8003514 <HAL_DMA_IRQHandler+0x100>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a95      	ldr	r2, [pc, #596]	; (80036ec <HAL_DMA_IRQHandler+0x2d8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d038      	beq.n	800350e <HAL_DMA_IRQHandler+0xfa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a93      	ldr	r2, [pc, #588]	; (80036f0 <HAL_DMA_IRQHandler+0x2dc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d030      	beq.n	8003508 <HAL_DMA_IRQHandler+0xf4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a92      	ldr	r2, [pc, #584]	; (80036f4 <HAL_DMA_IRQHandler+0x2e0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d028      	beq.n	8003502 <HAL_DMA_IRQHandler+0xee>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a89      	ldr	r2, [pc, #548]	; (80036dc <HAL_DMA_IRQHandler+0x2c8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d020      	beq.n	80034fc <HAL_DMA_IRQHandler+0xe8>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a8e      	ldr	r2, [pc, #568]	; (80036f8 <HAL_DMA_IRQHandler+0x2e4>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d019      	beq.n	80034f8 <HAL_DMA_IRQHandler+0xe4>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a8c      	ldr	r2, [pc, #560]	; (80036fc <HAL_DMA_IRQHandler+0x2e8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d012      	beq.n	80034f4 <HAL_DMA_IRQHandler+0xe0>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a8b      	ldr	r2, [pc, #556]	; (8003700 <HAL_DMA_IRQHandler+0x2ec>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00a      	beq.n	80034ee <HAL_DMA_IRQHandler+0xda>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a89      	ldr	r2, [pc, #548]	; (8003704 <HAL_DMA_IRQHandler+0x2f0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d102      	bne.n	80034e8 <HAL_DMA_IRQHandler+0xd4>
 80034e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034e6:	e01b      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80034ec:	e018      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f2:	e015      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034f4:	2340      	movs	r3, #64	; 0x40
 80034f6:	e013      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034f8:	2304      	movs	r3, #4
 80034fa:	e011      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 80034fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003500:	e00e      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 8003502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003506:	e00b      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 8003508:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800350c:	e008      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 800350e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003512:	e005      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 8003514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003518:	e002      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 800351a:	2340      	movs	r3, #64	; 0x40
 800351c:	e000      	b.n	8003520 <HAL_DMA_IRQHandler+0x10c>
 800351e:	2304      	movs	r3, #4
 8003520:	4a79      	ldr	r2, [pc, #484]	; (8003708 <HAL_DMA_IRQHandler+0x2f4>)
 8003522:	6053      	str	r3, [r2, #4]
 8003524:	e057      	b.n	80035d6 <HAL_DMA_IRQHandler+0x1c2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a6d      	ldr	r2, [pc, #436]	; (80036e0 <HAL_DMA_IRQHandler+0x2cc>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d04f      	beq.n	80035d0 <HAL_DMA_IRQHandler+0x1bc>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a6b      	ldr	r2, [pc, #428]	; (80036e4 <HAL_DMA_IRQHandler+0x2d0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d048      	beq.n	80035cc <HAL_DMA_IRQHandler+0x1b8>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a6a      	ldr	r2, [pc, #424]	; (80036e8 <HAL_DMA_IRQHandler+0x2d4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d040      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x1b2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a68      	ldr	r2, [pc, #416]	; (80036ec <HAL_DMA_IRQHandler+0x2d8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d038      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x1ac>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a67      	ldr	r2, [pc, #412]	; (80036f0 <HAL_DMA_IRQHandler+0x2dc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d030      	beq.n	80035ba <HAL_DMA_IRQHandler+0x1a6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a65      	ldr	r2, [pc, #404]	; (80036f4 <HAL_DMA_IRQHandler+0x2e0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d028      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x1a0>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5d      	ldr	r2, [pc, #372]	; (80036dc <HAL_DMA_IRQHandler+0x2c8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d020      	beq.n	80035ae <HAL_DMA_IRQHandler+0x19a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a61      	ldr	r2, [pc, #388]	; (80036f8 <HAL_DMA_IRQHandler+0x2e4>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_DMA_IRQHandler+0x196>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a60      	ldr	r2, [pc, #384]	; (80036fc <HAL_DMA_IRQHandler+0x2e8>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d012      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x192>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5e      	ldr	r2, [pc, #376]	; (8003700 <HAL_DMA_IRQHandler+0x2ec>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00a      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x18c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <HAL_DMA_IRQHandler+0x2f0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d102      	bne.n	800359a <HAL_DMA_IRQHandler+0x186>
 8003594:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003598:	e01b      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 800359a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800359e:	e018      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a4:	e015      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035a6:	2340      	movs	r3, #64	; 0x40
 80035a8:	e013      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e011      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035b2:	e00e      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035b8:	e00b      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035be:	e008      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035c4:	e005      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035ca:	e002      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035cc:	2340      	movs	r3, #64	; 0x40
 80035ce:	e000      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1be>
 80035d0:	2304      	movs	r3, #4
 80035d2:	4a4e      	ldr	r2, [pc, #312]	; (800370c <HAL_DMA_IRQHandler+0x2f8>)
 80035d4:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8136 	beq.w	800384c <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035e8:	e130      	b.n	800384c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	2202      	movs	r2, #2
 80035f0:	409a      	lsls	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f000 80f8 	beq.w	80037ec <HAL_DMA_IRQHandler+0x3d8>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80f2 	beq.w	80037ec <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10b      	bne.n	800362e <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 020a 	bic.w	r2, r2, #10
 8003624:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	4b29      	ldr	r3, [pc, #164]	; (80036dc <HAL_DMA_IRQHandler+0x2c8>)
 8003636:	429a      	cmp	r2, r3
 8003638:	d973      	bls.n	8003722 <HAL_DMA_IRQHandler+0x30e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a28      	ldr	r2, [pc, #160]	; (80036e0 <HAL_DMA_IRQHandler+0x2cc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d06a      	beq.n	800371a <HAL_DMA_IRQHandler+0x306>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <HAL_DMA_IRQHandler+0x2d0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d063      	beq.n	8003716 <HAL_DMA_IRQHandler+0x302>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a25      	ldr	r2, [pc, #148]	; (80036e8 <HAL_DMA_IRQHandler+0x2d4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d05b      	beq.n	8003710 <HAL_DMA_IRQHandler+0x2fc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <HAL_DMA_IRQHandler+0x2d8>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d038      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x2c0>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_DMA_IRQHandler+0x2dc>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d030      	beq.n	80036ce <HAL_DMA_IRQHandler+0x2ba>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <HAL_DMA_IRQHandler+0x2e0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d028      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x2b4>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a18      	ldr	r2, [pc, #96]	; (80036dc <HAL_DMA_IRQHandler+0x2c8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d020      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x2ae>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_DMA_IRQHandler+0x2e4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d019      	beq.n	80036be <HAL_DMA_IRQHandler+0x2aa>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <HAL_DMA_IRQHandler+0x2e8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d012      	beq.n	80036ba <HAL_DMA_IRQHandler+0x2a6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_DMA_IRQHandler+0x2ec>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00a      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x2a0>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a18      	ldr	r2, [pc, #96]	; (8003704 <HAL_DMA_IRQHandler+0x2f0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d102      	bne.n	80036ae <HAL_DMA_IRQHandler+0x29a>
 80036a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036ac:	e036      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036b2:	e033      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036b8:	e030      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036ba:	2320      	movs	r3, #32
 80036bc:	e02e      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036be:	2302      	movs	r3, #2
 80036c0:	e02c      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c6:	e029      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80036cc:	e026      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036d2:	e023      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d8:	e020      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 80036da:	bf00      	nop
 80036dc:	40020080 	.word	0x40020080
 80036e0:	40020008 	.word	0x40020008
 80036e4:	4002001c 	.word	0x4002001c
 80036e8:	40020030 	.word	0x40020030
 80036ec:	40020044 	.word	0x40020044
 80036f0:	40020058 	.word	0x40020058
 80036f4:	4002006c 	.word	0x4002006c
 80036f8:	40020408 	.word	0x40020408
 80036fc:	4002041c 	.word	0x4002041c
 8003700:	40020430 	.word	0x40020430
 8003704:	40020444 	.word	0x40020444
 8003708:	40020400 	.word	0x40020400
 800370c:	40020000 	.word	0x40020000
 8003710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003714:	e002      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 8003716:	2320      	movs	r3, #32
 8003718:	e000      	b.n	800371c <HAL_DMA_IRQHandler+0x308>
 800371a:	2302      	movs	r3, #2
 800371c:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <HAL_DMA_IRQHandler+0x444>)
 800371e:	6053      	str	r3, [r2, #4]
 8003720:	e057      	b.n	80037d2 <HAL_DMA_IRQHandler+0x3be>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a4d      	ldr	r2, [pc, #308]	; (800385c <HAL_DMA_IRQHandler+0x448>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d04f      	beq.n	80037cc <HAL_DMA_IRQHandler+0x3b8>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a4b      	ldr	r2, [pc, #300]	; (8003860 <HAL_DMA_IRQHandler+0x44c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d048      	beq.n	80037c8 <HAL_DMA_IRQHandler+0x3b4>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a4a      	ldr	r2, [pc, #296]	; (8003864 <HAL_DMA_IRQHandler+0x450>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d040      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x3ae>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a48      	ldr	r2, [pc, #288]	; (8003868 <HAL_DMA_IRQHandler+0x454>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d038      	beq.n	80037bc <HAL_DMA_IRQHandler+0x3a8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a47      	ldr	r2, [pc, #284]	; (800386c <HAL_DMA_IRQHandler+0x458>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d030      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x3a2>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a45      	ldr	r2, [pc, #276]	; (8003870 <HAL_DMA_IRQHandler+0x45c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d028      	beq.n	80037b0 <HAL_DMA_IRQHandler+0x39c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a44      	ldr	r2, [pc, #272]	; (8003874 <HAL_DMA_IRQHandler+0x460>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d020      	beq.n	80037aa <HAL_DMA_IRQHandler+0x396>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a42      	ldr	r2, [pc, #264]	; (8003878 <HAL_DMA_IRQHandler+0x464>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_DMA_IRQHandler+0x392>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a41      	ldr	r2, [pc, #260]	; (800387c <HAL_DMA_IRQHandler+0x468>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d012      	beq.n	80037a2 <HAL_DMA_IRQHandler+0x38e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a3f      	ldr	r2, [pc, #252]	; (8003880 <HAL_DMA_IRQHandler+0x46c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00a      	beq.n	800379c <HAL_DMA_IRQHandler+0x388>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3e      	ldr	r2, [pc, #248]	; (8003884 <HAL_DMA_IRQHandler+0x470>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d102      	bne.n	8003796 <HAL_DMA_IRQHandler+0x382>
 8003790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003794:	e01b      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 8003796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800379a:	e018      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 800379c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037a0:	e015      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037a2:	2320      	movs	r3, #32
 80037a4:	e013      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e011      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037ae:	e00e      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80037b4:	e00b      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037ba:	e008      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037c0:	e005      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037c6:	e002      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037c8:	2320      	movs	r3, #32
 80037ca:	e000      	b.n	80037ce <HAL_DMA_IRQHandler+0x3ba>
 80037cc:	2302      	movs	r3, #2
 80037ce:	4a2e      	ldr	r2, [pc, #184]	; (8003888 <HAL_DMA_IRQHandler+0x474>)
 80037d0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d034      	beq.n	800384c <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037ea:	e02f      	b.n	800384c <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	2208      	movs	r2, #8
 80037f2:	409a      	lsls	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d028      	beq.n	800384e <HAL_DMA_IRQHandler+0x43a>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d023      	beq.n	800384e <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 020e 	bic.w	r2, r2, #14
 8003814:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2101      	movs	r1, #1
 8003820:	fa01 f202 	lsl.w	r2, r1, r2
 8003824:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	2b00      	cmp	r3, #0
 8003842:	d004      	beq.n	800384e <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
    }
  }
  return;
 800384c:	bf00      	nop
 800384e:	bf00      	nop
}
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40020400 	.word	0x40020400
 800385c:	40020008 	.word	0x40020008
 8003860:	4002001c 	.word	0x4002001c
 8003864:	40020030 	.word	0x40020030
 8003868:	40020044 	.word	0x40020044
 800386c:	40020058 	.word	0x40020058
 8003870:	4002006c 	.word	0x4002006c
 8003874:	40020080 	.word	0x40020080
 8003878:	40020408 	.word	0x40020408
 800387c:	4002041c 	.word	0x4002041c
 8003880:	40020430 	.word	0x40020430
 8003884:	40020444 	.word	0x40020444
 8003888:	40020000 	.word	0x40020000

0800388c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f202 	lsl.w	r2, r1, r2
 80038a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d108      	bne.n	80038cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038ca:	e007      	b.n	80038dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	60da      	str	r2, [r3, #12]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003902:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <HAL_FLASH_Program+0xd8>)
 8003904:	7e1b      	ldrb	r3, [r3, #24]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d101      	bne.n	800390e <HAL_FLASH_Program+0x26>
 800390a:	2302      	movs	r3, #2
 800390c:	e054      	b.n	80039b8 <HAL_FLASH_Program+0xd0>
 800390e:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <HAL_FLASH_Program+0xd8>)
 8003910:	2201      	movs	r2, #1
 8003912:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003914:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003918:	f000 f8a8 	bl	8003a6c <FLASH_WaitForLastOperation>
 800391c:	4603      	mov	r3, r0
 800391e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003920:	7dfb      	ldrb	r3, [r7, #23]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d144      	bne.n	80039b0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d102      	bne.n	8003932 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800392c:	2301      	movs	r3, #1
 800392e:	757b      	strb	r3, [r7, #21]
 8003930:	e007      	b.n	8003942 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d102      	bne.n	800393e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003938:	2302      	movs	r3, #2
 800393a:	757b      	strb	r3, [r7, #21]
 800393c:	e001      	b.n	8003942 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800393e:	2304      	movs	r3, #4
 8003940:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003942:	2300      	movs	r3, #0
 8003944:	75bb      	strb	r3, [r7, #22]
 8003946:	e02d      	b.n	80039a4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003948:	7dbb      	ldrb	r3, [r7, #22]
 800394a:	005a      	lsls	r2, r3, #1
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	eb02 0c03 	add.w	ip, r2, r3
 8003952:	7dbb      	ldrb	r3, [r7, #22]
 8003954:	0119      	lsls	r1, r3, #4
 8003956:	e9d7 2300 	ldrd	r2, r3, [r7]
 800395a:	f1c1 0620 	rsb	r6, r1, #32
 800395e:	f1a1 0020 	sub.w	r0, r1, #32
 8003962:	fa22 f401 	lsr.w	r4, r2, r1
 8003966:	fa03 f606 	lsl.w	r6, r3, r6
 800396a:	4334      	orrs	r4, r6
 800396c:	fa23 f000 	lsr.w	r0, r3, r0
 8003970:	4304      	orrs	r4, r0
 8003972:	fa23 f501 	lsr.w	r5, r3, r1
 8003976:	b2a3      	uxth	r3, r4
 8003978:	4619      	mov	r1, r3
 800397a:	4660      	mov	r0, ip
 800397c:	f000 f85a 	bl	8003a34 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003980:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003984:	f000 f872 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800398c:	4b0d      	ldr	r3, [pc, #52]	; (80039c4 <HAL_FLASH_Program+0xdc>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	4a0c      	ldr	r2, [pc, #48]	; (80039c4 <HAL_FLASH_Program+0xdc>)
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d107      	bne.n	80039ae <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800399e:	7dbb      	ldrb	r3, [r7, #22]
 80039a0:	3301      	adds	r3, #1
 80039a2:	75bb      	strb	r3, [r7, #22]
 80039a4:	7dba      	ldrb	r2, [r7, #22]
 80039a6:	7d7b      	ldrb	r3, [r7, #21]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3cd      	bcc.n	8003948 <HAL_FLASH_Program+0x60>
 80039ac:	e000      	b.n	80039b0 <HAL_FLASH_Program+0xc8>
      {
        break;
 80039ae:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_FLASH_Program+0xd8>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	761a      	strb	r2, [r3, #24]

  return status;
 80039b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039c0:	200011b0 	.word	0x200011b0
 80039c4:	40022000 	.word	0x40022000

080039c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_FLASH_Unlock+0x40>)
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_FLASH_Unlock+0x40>)
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <HAL_FLASH_Unlock+0x44>)
 80039e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <HAL_FLASH_Unlock+0x40>)
 80039e6:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <HAL_FLASH_Unlock+0x48>)
 80039e8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039ea:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <HAL_FLASH_Unlock+0x40>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80039fa:	79fb      	ldrb	r3, [r7, #7]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40022000 	.word	0x40022000
 8003a0c:	45670123 	.word	0x45670123
 8003a10:	cdef89ab 	.word	0xcdef89ab

08003a14 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003a18:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_FLASH_Lock+0x1c>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <HAL_FLASH_Lock+0x1c>)
 8003a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a22:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40022000 	.word	0x40022000

08003a34 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a40:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <FLASH_Program_HalfWord+0x30>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003a46:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <FLASH_Program_HalfWord+0x34>)
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <FLASH_Program_HalfWord+0x34>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	887a      	ldrh	r2, [r7, #2]
 8003a56:	801a      	strh	r2, [r3, #0]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	200011b0 	.word	0x200011b0
 8003a68:	40022000 	.word	0x40022000

08003a6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a74:	f7ff f978 	bl	8002d68 <HAL_GetTick>
 8003a78:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a7a:	e010      	b.n	8003a9e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d00c      	beq.n	8003a9e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <FLASH_WaitForLastOperation+0x2e>
 8003a8a:	f7ff f96d 	bl	8002d68 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d201      	bcs.n	8003a9e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e025      	b.n	8003aea <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e8      	bne.n	8003a7c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003ab8:	2220      	movs	r2, #32
 8003aba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10b      	bne.n	8003ae0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <FLASH_WaitForLastOperation+0x88>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003ae0:	f000 f80a 	bl	8003af8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40022000 	.word	0x40022000

08003af8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0310 	and.w	r3, r3, #16
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f043 0302 	orr.w	r3, r3, #2
 8003b16:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b18:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f043 0310 	orr.w	r3, r3, #16
 8003b20:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b2e:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b38:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003b42:	4b13      	ldr	r3, [pc, #76]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <FLASH_SetErrorCode+0x9c>)
 8003b58:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f240 1201 	movw	r2, #257	; 0x101
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d106      	bne.n	8003b7e <FLASH_SetErrorCode+0x86>
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4a06      	ldr	r2, [pc, #24]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	61d3      	str	r3, [r2, #28]
}  
 8003b7c:	e002      	b.n	8003b84 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b7e:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <FLASH_SetErrorCode+0x98>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	60d3      	str	r3, [r2, #12]
}  
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40022000 	.word	0x40022000
 8003b94:	200011b0 	.word	0x200011b0

08003b98 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003baa:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_FLASHEx_Erase+0xd0>)
 8003bac:	7e1b      	ldrb	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_FLASHEx_Erase+0x1e>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e053      	b.n	8003c5e <HAL_FLASHEx_Erase+0xc6>
 8003bb6:	4b2c      	ldr	r3, [pc, #176]	; (8003c68 <HAL_FLASHEx_Erase+0xd0>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d116      	bne.n	8003bf2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bc4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bc8:	f7ff ff50 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d141      	bne.n	8003c56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003bd2:	2001      	movs	r0, #1
 8003bd4:	f000 f84c 	bl	8003c70 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bdc:	f7ff ff46 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_FLASHEx_Erase+0xd4>)
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <HAL_FLASHEx_Erase+0xd4>)
 8003bea:	f023 0304 	bic.w	r3, r3, #4
 8003bee:	6113      	str	r3, [r2, #16]
 8003bf0:	e031      	b.n	8003c56 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bf2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bf6:	f7ff ff39 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d12a      	bne.n	8003c56 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f04f 32ff 	mov.w	r2, #4294967295
 8003c06:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	e019      	b.n	8003c44 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003c10:	68b8      	ldr	r0, [r7, #8]
 8003c12:	f000 f849 	bl	8003ca8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c1a:	f7ff ff27 	bl	8003a6c <FLASH_WaitForLastOperation>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <HAL_FLASHEx_Erase+0xd4>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a11      	ldr	r2, [pc, #68]	; (8003c6c <HAL_FLASHEx_Erase+0xd4>)
 8003c28:	f023 0302 	bic.w	r3, r3, #2
 8003c2c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	601a      	str	r2, [r3, #0]
            break;
 8003c3a:	e00c      	b.n	8003c56 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	02da      	lsls	r2, r3, #11
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d3dc      	bcc.n	8003c10 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c56:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_FLASHEx_Erase+0xd0>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	761a      	strb	r2, [r3, #24]

  return status;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	200011b0 	.word	0x200011b0
 8003c6c:	40022000 	.word	0x40022000

08003c70 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <FLASH_MassErase+0x30>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <FLASH_MassErase+0x34>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	4a08      	ldr	r2, [pc, #32]	; (8003ca4 <FLASH_MassErase+0x34>)
 8003c84:	f043 0304 	orr.w	r3, r3, #4
 8003c88:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <FLASH_MassErase+0x34>)
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <FLASH_MassErase+0x34>)
 8003c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c94:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	200011b0 	.word	0x200011b0
 8003ca4:	40022000 	.word	0x40022000

08003ca8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <FLASH_PageErase+0x38>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003cc2:	4a08      	ldr	r2, [pc, #32]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <FLASH_PageErase+0x3c>)
 8003cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	200011b0 	.word	0x200011b0
 8003ce4:	40022000 	.word	0x40022000

08003ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b08b      	sub	sp, #44	; 0x2c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cfa:	e179      	b.n	8003ff0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	f040 8168 	bne.w	8003fea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4aa0      	ldr	r2, [pc, #640]	; (8003fa0 <HAL_GPIO_Init+0x2b8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d05e      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d24:	4a9e      	ldr	r2, [pc, #632]	; (8003fa0 <HAL_GPIO_Init+0x2b8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d875      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d2a:	4a9e      	ldr	r2, [pc, #632]	; (8003fa4 <HAL_GPIO_Init+0x2bc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d058      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d30:	4a9c      	ldr	r2, [pc, #624]	; (8003fa4 <HAL_GPIO_Init+0x2bc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d86f      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d36:	4a9c      	ldr	r2, [pc, #624]	; (8003fa8 <HAL_GPIO_Init+0x2c0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d052      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d3c:	4a9a      	ldr	r2, [pc, #616]	; (8003fa8 <HAL_GPIO_Init+0x2c0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d869      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d42:	4a9a      	ldr	r2, [pc, #616]	; (8003fac <HAL_GPIO_Init+0x2c4>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d04c      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d48:	4a98      	ldr	r2, [pc, #608]	; (8003fac <HAL_GPIO_Init+0x2c4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d863      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d4e:	4a98      	ldr	r2, [pc, #608]	; (8003fb0 <HAL_GPIO_Init+0x2c8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d046      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
 8003d54:	4a96      	ldr	r2, [pc, #600]	; (8003fb0 <HAL_GPIO_Init+0x2c8>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d85d      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d5a:	2b12      	cmp	r3, #18
 8003d5c:	d82a      	bhi.n	8003db4 <HAL_GPIO_Init+0xcc>
 8003d5e:	2b12      	cmp	r3, #18
 8003d60:	d859      	bhi.n	8003e16 <HAL_GPIO_Init+0x12e>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <HAL_GPIO_Init+0x80>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003de3 	.word	0x08003de3
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003dcf 	.word	0x08003dcf
 8003d74:	08003e11 	.word	0x08003e11
 8003d78:	08003e17 	.word	0x08003e17
 8003d7c:	08003e17 	.word	0x08003e17
 8003d80:	08003e17 	.word	0x08003e17
 8003d84:	08003e17 	.word	0x08003e17
 8003d88:	08003e17 	.word	0x08003e17
 8003d8c:	08003e17 	.word	0x08003e17
 8003d90:	08003e17 	.word	0x08003e17
 8003d94:	08003e17 	.word	0x08003e17
 8003d98:	08003e17 	.word	0x08003e17
 8003d9c:	08003e17 	.word	0x08003e17
 8003da0:	08003e17 	.word	0x08003e17
 8003da4:	08003e17 	.word	0x08003e17
 8003da8:	08003e17 	.word	0x08003e17
 8003dac:	08003dc5 	.word	0x08003dc5
 8003db0:	08003dd9 	.word	0x08003dd9
 8003db4:	4a7f      	ldr	r2, [pc, #508]	; (8003fb4 <HAL_GPIO_Init+0x2cc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dba:	e02c      	b.n	8003e16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	623b      	str	r3, [r7, #32]
          break;
 8003dc2:	e029      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	623b      	str	r3, [r7, #32]
          break;
 8003dcc:	e024      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	623b      	str	r3, [r7, #32]
          break;
 8003dd6:	e01f      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	330c      	adds	r3, #12
 8003dde:	623b      	str	r3, [r7, #32]
          break;
 8003de0:	e01a      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003dea:	2304      	movs	r3, #4
 8003dec:	623b      	str	r3, [r7, #32]
          break;
 8003dee:	e013      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d105      	bne.n	8003e04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df8:	2308      	movs	r3, #8
 8003dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	611a      	str	r2, [r3, #16]
          break;
 8003e02:	e009      	b.n	8003e18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e04:	2308      	movs	r3, #8
 8003e06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	615a      	str	r2, [r3, #20]
          break;
 8003e0e:	e003      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e10:	2300      	movs	r3, #0
 8003e12:	623b      	str	r3, [r7, #32]
          break;
 8003e14:	e000      	b.n	8003e18 <HAL_GPIO_Init+0x130>
          break;
 8003e16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2bff      	cmp	r3, #255	; 0xff
 8003e1c:	d801      	bhi.n	8003e22 <HAL_GPIO_Init+0x13a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	e001      	b.n	8003e26 <HAL_GPIO_Init+0x13e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3304      	adds	r3, #4
 8003e26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2bff      	cmp	r3, #255	; 0xff
 8003e2c:	d802      	bhi.n	8003e34 <HAL_GPIO_Init+0x14c>
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	e002      	b.n	8003e3a <HAL_GPIO_Init+0x152>
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	3b08      	subs	r3, #8
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	210f      	movs	r1, #15
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	43db      	mvns	r3, r3
 8003e4a:	401a      	ands	r2, r3
 8003e4c:	6a39      	ldr	r1, [r7, #32]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	fa01 f303 	lsl.w	r3, r1, r3
 8003e54:	431a      	orrs	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80c1 	beq.w	8003fea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e68:	4b53      	ldr	r3, [pc, #332]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	4a52      	ldr	r2, [pc, #328]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6193      	str	r3, [r2, #24]
 8003e74:	4b50      	ldr	r3, [pc, #320]	; (8003fb8 <HAL_GPIO_Init+0x2d0>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e80:	4a4e      	ldr	r2, [pc, #312]	; (8003fbc <HAL_GPIO_Init+0x2d4>)
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	3302      	adds	r3, #2
 8003e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	220f      	movs	r2, #15
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a46      	ldr	r2, [pc, #280]	; (8003fc0 <HAL_GPIO_Init+0x2d8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d01f      	beq.n	8003eec <HAL_GPIO_Init+0x204>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a45      	ldr	r2, [pc, #276]	; (8003fc4 <HAL_GPIO_Init+0x2dc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d019      	beq.n	8003ee8 <HAL_GPIO_Init+0x200>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a44      	ldr	r2, [pc, #272]	; (8003fc8 <HAL_GPIO_Init+0x2e0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <HAL_GPIO_Init+0x1fc>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a43      	ldr	r2, [pc, #268]	; (8003fcc <HAL_GPIO_Init+0x2e4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00d      	beq.n	8003ee0 <HAL_GPIO_Init+0x1f8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a42      	ldr	r2, [pc, #264]	; (8003fd0 <HAL_GPIO_Init+0x2e8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <HAL_GPIO_Init+0x1f4>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a41      	ldr	r2, [pc, #260]	; (8003fd4 <HAL_GPIO_Init+0x2ec>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <HAL_GPIO_Init+0x1f0>
 8003ed4:	2305      	movs	r3, #5
 8003ed6:	e00a      	b.n	8003eee <HAL_GPIO_Init+0x206>
 8003ed8:	2306      	movs	r3, #6
 8003eda:	e008      	b.n	8003eee <HAL_GPIO_Init+0x206>
 8003edc:	2304      	movs	r3, #4
 8003ede:	e006      	b.n	8003eee <HAL_GPIO_Init+0x206>
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e004      	b.n	8003eee <HAL_GPIO_Init+0x206>
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	e002      	b.n	8003eee <HAL_GPIO_Init+0x206>
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e000      	b.n	8003eee <HAL_GPIO_Init+0x206>
 8003eec:	2300      	movs	r3, #0
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	f002 0203 	and.w	r2, r2, #3
 8003ef4:	0092      	lsls	r2, r2, #2
 8003ef6:	4093      	lsls	r3, r2
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003efe:	492f      	ldr	r1, [pc, #188]	; (8003fbc <HAL_GPIO_Init+0x2d4>)
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	3302      	adds	r3, #2
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d006      	beq.n	8003f26 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f18:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	492e      	ldr	r1, [pc, #184]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	600b      	str	r3, [r1, #0]
 8003f24:	e006      	b.n	8003f34 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f26:	4b2c      	ldr	r3, [pc, #176]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	492a      	ldr	r1, [pc, #168]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f40:	4b25      	ldr	r3, [pc, #148]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	4924      	ldr	r1, [pc, #144]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]
 8003f4c:	e006      	b.n	8003f5c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f4e:	4b22      	ldr	r3, [pc, #136]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	4920      	ldr	r1, [pc, #128]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d006      	beq.n	8003f76 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f68:	4b1b      	ldr	r3, [pc, #108]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	491a      	ldr	r1, [pc, #104]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	608b      	str	r3, [r1, #8]
 8003f74:	e006      	b.n	8003f84 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f76:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	4916      	ldr	r1, [pc, #88]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d025      	beq.n	8003fdc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f90:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	4910      	ldr	r1, [pc, #64]	; (8003fd8 <HAL_GPIO_Init+0x2f0>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60cb      	str	r3, [r1, #12]
 8003f9c:	e025      	b.n	8003fea <HAL_GPIO_Init+0x302>
 8003f9e:	bf00      	nop
 8003fa0:	10320000 	.word	0x10320000
 8003fa4:	10310000 	.word	0x10310000
 8003fa8:	10220000 	.word	0x10220000
 8003fac:	10210000 	.word	0x10210000
 8003fb0:	10120000 	.word	0x10120000
 8003fb4:	10110000 	.word	0x10110000
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40010800 	.word	0x40010800
 8003fc4:	40010c00 	.word	0x40010c00
 8003fc8:	40011000 	.word	0x40011000
 8003fcc:	40011400 	.word	0x40011400
 8003fd0:	40011800 	.word	0x40011800
 8003fd4:	40011c00 	.word	0x40011c00
 8003fd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_GPIO_Init+0x324>)
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	4909      	ldr	r1, [pc, #36]	; (800400c <HAL_GPIO_Init+0x324>)
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	3301      	adds	r3, #1
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f47f ae7e 	bne.w	8003cfc <HAL_GPIO_Init+0x14>
  }
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	372c      	adds	r7, #44	; 0x2c
 8004006:	46bd      	mov	sp, r7
 8004008:	bc80      	pop	{r7}
 800400a:	4770      	bx	lr
 800400c:	40010400 	.word	0x40010400

08004010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	807b      	strh	r3, [r7, #2]
 800401c:	4613      	mov	r3, r2
 800401e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004020:	787b      	ldrb	r3, [r7, #1]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004026:	887a      	ldrh	r2, [r7, #2]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800402c:	e003      	b.n	8004036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800402e:	887b      	ldrh	r3, [r7, #2]
 8004030:	041a      	lsls	r2, r3, #16
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	611a      	str	r2, [r3, #16]
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004052:	887a      	ldrh	r2, [r7, #2]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4013      	ands	r3, r2
 8004058:	041a      	lsls	r2, r3, #16
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	43d9      	mvns	r1, r3
 800405e:	887b      	ldrh	r3, [r7, #2]
 8004060:	400b      	ands	r3, r1
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	611a      	str	r2, [r3, #16]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
	...

08004074 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800407e:	4b08      	ldr	r3, [pc, #32]	; (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004080:	695a      	ldr	r2, [r3, #20]
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004090:	88fb      	ldrh	r3, [r7, #6]
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd f99c 	bl	80013d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004098:	bf00      	nop
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40010400 	.word	0x40010400

080040a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e26c      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 8087 	beq.w	80041d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040c4:	4b92      	ldr	r3, [pc, #584]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d00c      	beq.n	80040ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040d0:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 030c 	and.w	r3, r3, #12
 80040d8:	2b08      	cmp	r3, #8
 80040da:	d112      	bne.n	8004102 <HAL_RCC_OscConfig+0x5e>
 80040dc:	4b8c      	ldr	r3, [pc, #560]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e8:	d10b      	bne.n	8004102 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ea:	4b89      	ldr	r3, [pc, #548]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d06c      	beq.n	80041d0 <HAL_RCC_OscConfig+0x12c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d168      	bne.n	80041d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e246      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x76>
 800410c:	4b80      	ldr	r3, [pc, #512]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a7f      	ldr	r2, [pc, #508]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e02e      	b.n	8004178 <HAL_RCC_OscConfig+0xd4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x98>
 8004122:	4b7b      	ldr	r3, [pc, #492]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a7a      	ldr	r2, [pc, #488]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b78      	ldr	r3, [pc, #480]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a77      	ldr	r2, [pc, #476]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e01d      	b.n	8004178 <HAL_RCC_OscConfig+0xd4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0xbc>
 8004146:	4b72      	ldr	r3, [pc, #456]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a71      	ldr	r2, [pc, #452]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800414c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b6f      	ldr	r3, [pc, #444]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a6e      	ldr	r2, [pc, #440]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e00b      	b.n	8004178 <HAL_RCC_OscConfig+0xd4>
 8004160:	4b6b      	ldr	r3, [pc, #428]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a6a      	ldr	r2, [pc, #424]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	4b68      	ldr	r3, [pc, #416]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a67      	ldr	r2, [pc, #412]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004176:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d013      	beq.n	80041a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fe fdf2 	bl	8002d68 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004188:	f7fe fdee 	bl	8002d68 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b64      	cmp	r3, #100	; 0x64
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e1fa      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b5d      	ldr	r3, [pc, #372]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0f0      	beq.n	8004188 <HAL_RCC_OscConfig+0xe4>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7fe fdde 	bl	8002d68 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b0:	f7fe fdda 	bl	8002d68 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1e6      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	4b53      	ldr	r3, [pc, #332]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x10c>
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d063      	beq.n	80042a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041de:	4b4c      	ldr	r3, [pc, #304]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041ea:	4b49      	ldr	r3, [pc, #292]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d11c      	bne.n	8004230 <HAL_RCC_OscConfig+0x18c>
 80041f6:	4b46      	ldr	r3, [pc, #280]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d116      	bne.n	8004230 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004202:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <HAL_RCC_OscConfig+0x176>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1ba      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421a:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	4939      	ldr	r1, [pc, #228]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	e03a      	b.n	80042a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004238:	4b36      	ldr	r3, [pc, #216]	; (8004314 <HAL_RCC_OscConfig+0x270>)
 800423a:	2201      	movs	r2, #1
 800423c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fe fd93 	bl	8002d68 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004246:	f7fe fd8f 	bl	8002d68 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e19b      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004264:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4927      	ldr	r1, [pc, #156]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 8004274:	4313      	orrs	r3, r2
 8004276:	600b      	str	r3, [r1, #0]
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <HAL_RCC_OscConfig+0x270>)
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe fd72 	bl	8002d68 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004288:	f7fe fd6e 	bl	8002d68 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e17a      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d03a      	beq.n	8004328 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d019      	beq.n	80042ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ba:	4b17      	ldr	r3, [pc, #92]	; (8004318 <HAL_RCC_OscConfig+0x274>)
 80042bc:	2201      	movs	r2, #1
 80042be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c0:	f7fe fd52 	bl	8002d68 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042c8:	f7fe fd4e 	bl	8002d68 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e15a      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80042e6:	2001      	movs	r0, #1
 80042e8:	f000 fad8 	bl	800489c <RCC_Delay>
 80042ec:	e01c      	b.n	8004328 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_RCC_OscConfig+0x274>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f4:	f7fe fd38 	bl	8002d68 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fa:	e00f      	b.n	800431c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fc:	f7fe fd34 	bl	8002d68 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d908      	bls.n	800431c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e140      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
 800430e:	bf00      	nop
 8004310:	40021000 	.word	0x40021000
 8004314:	42420000 	.word	0x42420000
 8004318:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b9e      	ldr	r3, [pc, #632]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e9      	bne.n	80042fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a6 	beq.w	8004482 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b97      	ldr	r3, [pc, #604]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	4b94      	ldr	r3, [pc, #592]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	4a93      	ldr	r2, [pc, #588]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004350:	61d3      	str	r3, [r2, #28]
 8004352:	4b91      	ldr	r3, [pc, #580]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b8e      	ldr	r3, [pc, #568]	; (800459c <HAL_RCC_OscConfig+0x4f8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d118      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436e:	4b8b      	ldr	r3, [pc, #556]	; (800459c <HAL_RCC_OscConfig+0x4f8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a8a      	ldr	r2, [pc, #552]	; (800459c <HAL_RCC_OscConfig+0x4f8>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437a:	f7fe fcf5 	bl	8002d68 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004382:	f7fe fcf1 	bl	8002d68 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b64      	cmp	r3, #100	; 0x64
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0fd      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004394:	4b81      	ldr	r3, [pc, #516]	; (800459c <HAL_RCC_OscConfig+0x4f8>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d106      	bne.n	80043b6 <HAL_RCC_OscConfig+0x312>
 80043a8:	4b7b      	ldr	r3, [pc, #492]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4a7a      	ldr	r2, [pc, #488]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	6213      	str	r3, [r2, #32]
 80043b4:	e02d      	b.n	8004412 <HAL_RCC_OscConfig+0x36e>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x334>
 80043be:	4b76      	ldr	r3, [pc, #472]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4a75      	ldr	r2, [pc, #468]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	6213      	str	r3, [r2, #32]
 80043ca:	4b73      	ldr	r3, [pc, #460]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	4a72      	ldr	r2, [pc, #456]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043d0:	f023 0304 	bic.w	r3, r3, #4
 80043d4:	6213      	str	r3, [r2, #32]
 80043d6:	e01c      	b.n	8004412 <HAL_RCC_OscConfig+0x36e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d10c      	bne.n	80043fa <HAL_RCC_OscConfig+0x356>
 80043e0:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	4a6c      	ldr	r2, [pc, #432]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	6213      	str	r3, [r2, #32]
 80043ec:	4b6a      	ldr	r3, [pc, #424]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	4a69      	ldr	r2, [pc, #420]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6213      	str	r3, [r2, #32]
 80043f8:	e00b      	b.n	8004412 <HAL_RCC_OscConfig+0x36e>
 80043fa:	4b67      	ldr	r3, [pc, #412]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	4a66      	ldr	r2, [pc, #408]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 8004400:	f023 0301 	bic.w	r3, r3, #1
 8004404:	6213      	str	r3, [r2, #32]
 8004406:	4b64      	ldr	r3, [pc, #400]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	4a63      	ldr	r2, [pc, #396]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 800440c:	f023 0304 	bic.w	r3, r3, #4
 8004410:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d015      	beq.n	8004446 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441a:	f7fe fca5 	bl	8002d68 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004420:	e00a      	b.n	8004438 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004422:	f7fe fca1 	bl	8002d68 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004430:	4293      	cmp	r3, r2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e0ab      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	4b57      	ldr	r3, [pc, #348]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0ee      	beq.n	8004422 <HAL_RCC_OscConfig+0x37e>
 8004444:	e014      	b.n	8004470 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004446:	f7fe fc8f 	bl	8002d68 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fe fc8b 	bl	8002d68 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e095      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004464:	4b4c      	ldr	r3, [pc, #304]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d105      	bne.n	8004482 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004476:	4b48      	ldr	r3, [pc, #288]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	4a47      	ldr	r2, [pc, #284]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 800447c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004480:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8081 	beq.w	800458e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800448c:	4b42      	ldr	r3, [pc, #264]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b08      	cmp	r3, #8
 8004496:	d061      	beq.n	800455c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d146      	bne.n	800452e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a0:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <HAL_RCC_OscConfig+0x4fc>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fe fc5f 	bl	8002d68 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ae:	f7fe fc5b 	bl	8002d68 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e067      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044c0:	4b35      	ldr	r3, [pc, #212]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f0      	bne.n	80044ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d4:	d108      	bne.n	80044e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044d6:	4b30      	ldr	r3, [pc, #192]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	492d      	ldr	r1, [pc, #180]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044e8:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a19      	ldr	r1, [r3, #32]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	430b      	orrs	r3, r1
 80044fa:	4927      	ldr	r1, [pc, #156]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004500:	4b27      	ldr	r3, [pc, #156]	; (80045a0 <HAL_RCC_OscConfig+0x4fc>)
 8004502:	2201      	movs	r2, #1
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fe fc2f 	bl	8002d68 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450e:	f7fe fc2b 	bl	8002d68 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e037      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004520:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x46a>
 800452c:	e02f      	b.n	800458e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452e:	4b1c      	ldr	r3, [pc, #112]	; (80045a0 <HAL_RCC_OscConfig+0x4fc>)
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fe fc18 	bl	8002d68 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453c:	f7fe fc14 	bl	8002d68 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e020      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x498>
 800455a:	e018      	b.n	800458e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e013      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_OscConfig+0x4f4>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	429a      	cmp	r2, r3
 800457a:	d106      	bne.n	800458a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004586:	429a      	cmp	r2, r3
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	40007000 	.word	0x40007000
 80045a0:	42420060 	.word	0x42420060

080045a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0d0      	b.n	800475a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b8:	4b6a      	ldr	r3, [pc, #424]	; (8004764 <HAL_RCC_ClockConfig+0x1c0>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d910      	bls.n	80045e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c6:	4b67      	ldr	r3, [pc, #412]	; (8004764 <HAL_RCC_ClockConfig+0x1c0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 0207 	bic.w	r2, r3, #7
 80045ce:	4965      	ldr	r1, [pc, #404]	; (8004764 <HAL_RCC_ClockConfig+0x1c0>)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d6:	4b63      	ldr	r3, [pc, #396]	; (8004764 <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d001      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e0b8      	b.n	800475a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d020      	beq.n	8004636 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004600:	4b59      	ldr	r3, [pc, #356]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4a58      	ldr	r2, [pc, #352]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004606:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800460a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004618:	4b53      	ldr	r3, [pc, #332]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4a52      	ldr	r2, [pc, #328]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004622:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004624:	4b50      	ldr	r3, [pc, #320]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	494d      	ldr	r1, [pc, #308]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d040      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d107      	bne.n	800465a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464a:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d115      	bne.n	8004682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e07f      	b.n	800475a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d107      	bne.n	8004672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004662:	4b41      	ldr	r3, [pc, #260]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d109      	bne.n	8004682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e073      	b.n	800475a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004672:	4b3d      	ldr	r3, [pc, #244]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e06b      	b.n	800475a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004682:	4b39      	ldr	r3, [pc, #228]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f023 0203 	bic.w	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	4936      	ldr	r1, [pc, #216]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004694:	f7fe fb68 	bl	8002d68 <HAL_GetTick>
 8004698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469c:	f7fe fb64 	bl	8002d68 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e053      	b.n	800475a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b2:	4b2d      	ldr	r3, [pc, #180]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 020c 	and.w	r2, r3, #12
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d1eb      	bne.n	800469c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <HAL_RCC_ClockConfig+0x1c0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d210      	bcs.n	80046f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b24      	ldr	r3, [pc, #144]	; (8004764 <HAL_RCC_ClockConfig+0x1c0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 0207 	bic.w	r2, r3, #7
 80046da:	4922      	ldr	r1, [pc, #136]	; (8004764 <HAL_RCC_ClockConfig+0x1c0>)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b20      	ldr	r3, [pc, #128]	; (8004764 <HAL_RCC_ClockConfig+0x1c0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e032      	b.n	800475a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d008      	beq.n	8004712 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004700:	4b19      	ldr	r3, [pc, #100]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4916      	ldr	r1, [pc, #88]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800471e:	4b12      	ldr	r3, [pc, #72]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	490e      	ldr	r1, [pc, #56]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004732:	f000 f821 	bl	8004778 <HAL_RCC_GetSysClockFreq>
 8004736:	4602      	mov	r2, r0
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_ClockConfig+0x1c4>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	091b      	lsrs	r3, r3, #4
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	490a      	ldr	r1, [pc, #40]	; (800476c <HAL_RCC_ClockConfig+0x1c8>)
 8004744:	5ccb      	ldrb	r3, [r1, r3]
 8004746:	fa22 f303 	lsr.w	r3, r2, r3
 800474a:	4a09      	ldr	r2, [pc, #36]	; (8004770 <HAL_RCC_ClockConfig+0x1cc>)
 800474c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800474e:	4b09      	ldr	r3, [pc, #36]	; (8004774 <HAL_RCC_ClockConfig+0x1d0>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe fac6 	bl	8002ce4 <HAL_InitTick>

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40022000 	.word	0x40022000
 8004768:	40021000 	.word	0x40021000
 800476c:	080069f4 	.word	0x080069f4
 8004770:	20000220 	.word	0x20000220
 8004774:	20000224 	.word	0x20000224

08004778 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004778:	b490      	push	{r4, r7}
 800477a:	b08a      	sub	sp, #40	; 0x28
 800477c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800477e:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004780:	1d3c      	adds	r4, r7, #4
 8004782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004784:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004788:	f240 2301 	movw	r3, #513	; 0x201
 800478c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047a2:	4b22      	ldr	r3, [pc, #136]	; (800482c <HAL_RCC_GetSysClockFreq+0xb4>)
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d002      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0x40>
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d003      	beq.n	80047be <HAL_RCC_GetSysClockFreq+0x46>
 80047b6:	e02d      	b.n	8004814 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047ba:	623b      	str	r3, [r7, #32]
      break;
 80047bc:	e02d      	b.n	800481a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	0c9b      	lsrs	r3, r3, #18
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047ca:	4413      	add	r3, r2
 80047cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80047d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d013      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_RCC_GetSysClockFreq+0xb4>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	0c5b      	lsrs	r3, r3, #17
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80047ea:	4413      	add	r3, r2
 80047ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4a0e      	ldr	r2, [pc, #56]	; (8004830 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f6:	fb02 f203 	mul.w	r2, r2, r3
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	e004      	b.n	800480e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4a0b      	ldr	r2, [pc, #44]	; (8004834 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	623b      	str	r3, [r7, #32]
      break;
 8004812:	e002      	b.n	800481a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004816:	623b      	str	r3, [r7, #32]
      break;
 8004818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800481a:	6a3b      	ldr	r3, [r7, #32]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3728      	adds	r7, #40	; 0x28
 8004820:	46bd      	mov	sp, r7
 8004822:	bc90      	pop	{r4, r7}
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	08006544 	.word	0x08006544
 800482c:	40021000 	.word	0x40021000
 8004830:	007a1200 	.word	0x007a1200
 8004834:	003d0900 	.word	0x003d0900

08004838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800483c:	4b02      	ldr	r3, [pc, #8]	; (8004848 <HAL_RCC_GetHCLKFreq+0x10>)
 800483e:	681b      	ldr	r3, [r3, #0]
}
 8004840:	4618      	mov	r0, r3
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr
 8004848:	20000220 	.word	0x20000220

0800484c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004850:	f7ff fff2 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4903      	ldr	r1, [pc, #12]	; (8004870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004868:	4618      	mov	r0, r3
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	08006a04 	.word	0x08006a04

08004874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004878:	f7ff ffde 	bl	8004838 <HAL_RCC_GetHCLKFreq>
 800487c:	4602      	mov	r2, r0
 800487e:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	0adb      	lsrs	r3, r3, #11
 8004884:	f003 0307 	and.w	r3, r3, #7
 8004888:	4903      	ldr	r1, [pc, #12]	; (8004898 <HAL_RCC_GetPCLK2Freq+0x24>)
 800488a:	5ccb      	ldrb	r3, [r1, r3]
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40021000 	.word	0x40021000
 8004898:	08006a04 	.word	0x08006a04

0800489c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80048a4:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <RCC_Delay+0x34>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <RCC_Delay+0x38>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	0a5b      	lsrs	r3, r3, #9
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80048b8:	bf00      	nop
  }
  while (Delay --);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	1e5a      	subs	r2, r3, #1
 80048be:	60fa      	str	r2, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f9      	bne.n	80048b8 <RCC_Delay+0x1c>
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	20000220 	.word	0x20000220
 80048d4:	10624dd3 	.word	0x10624dd3

080048d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e076      	b.n	80049d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d108      	bne.n	8004904 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048fa:	d009      	beq.n	8004910 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	61da      	str	r2, [r3, #28]
 8004902:	e005      	b.n	8004910 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d106      	bne.n	8004930 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7fd fed0 	bl	80026d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004946:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	ea42 0103 	orr.w	r1, r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	0c1a      	lsrs	r2, r3, #16
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f002 0204 	and.w	r2, r2, #4
 80049b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d110      	bne.n	8004a1c <HAL_SPI_Receive_DMA+0x3c>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a02:	d10b      	bne.n	8004a1c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2204      	movs	r2, #4
 8004a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f8ac 	bl	8004b70 <HAL_SPI_TransmitReceive_DMA>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	e09f      	b.n	8004b5c <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_SPI_Receive_DMA+0x4a>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e098      	b.n	8004b5c <HAL_SPI_Receive_DMA+0x17c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d002      	beq.n	8004a44 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a42:	e086      	b.n	8004b52 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_SPI_Receive_DMA+0x70>
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d102      	bne.n	8004a56 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a54:	e07d      	b.n	8004b52 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2204      	movs	r2, #4
 8004a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	88fa      	ldrh	r2, [r7, #6]
 8004a6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	88fa      	ldrh	r2, [r7, #6]
 8004a74:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a96:	d10f      	bne.n	8004ab8 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ab6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abc:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <HAL_SPI_Receive_DMA+0x184>)
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac4:	4a28      	ldr	r2, [pc, #160]	; (8004b68 <HAL_SPI_Receive_DMA+0x188>)
 8004ac6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004acc:	4a27      	ldr	r2, [pc, #156]	; (8004b6c <HAL_SPI_Receive_DMA+0x18c>)
 8004ace:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004af0:	f7fe fb28 	bl	8003144 <HAL_DMA_Start_IT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00c      	beq.n	8004b14 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	f043 0210 	orr.w	r2, r3, #16
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004b12:	e01e      	b.n	8004b52 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d007      	beq.n	8004b32 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b30:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0220 	orr.w	r2, r2, #32
 8004b40:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	080050bd 	.word	0x080050bd
 8004b68:	08004f89 	.word	0x08004f89
 8004b6c:	080050f5 	.word	0x080050f5

08004b70 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e0e3      	b.n	8004d58 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b9e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004ba6:	7dbb      	ldrb	r3, [r7, #22]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d00d      	beq.n	8004bc8 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb2:	d106      	bne.n	8004bc2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004bbc:	7dbb      	ldrb	r3, [r7, #22]
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d002      	beq.n	8004bc8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bc6:	e0c2      	b.n	8004d4e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bde:	e0b6      	b.n	8004d4e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d003      	beq.n	8004bf4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2205      	movs	r2, #5
 8004bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	887a      	ldrh	r2, [r7, #2]
 8004c04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	887a      	ldrh	r2, [r7, #2]
 8004c0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	887a      	ldrh	r2, [r7, #2]
 8004c16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	887a      	ldrh	r2, [r7, #2]
 8004c1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d108      	bne.n	8004c48 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3a:	4a49      	ldr	r2, [pc, #292]	; (8004d60 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c42:	4a48      	ldr	r2, [pc, #288]	; (8004d64 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28
 8004c46:	e007      	b.n	8004c58 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4c:	4a46      	ldr	r2, [pc, #280]	; (8004d68 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c54:	4a45      	ldr	r2, [pc, #276]	; (8004d6c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5c:	4a44      	ldr	r2, [pc, #272]	; (8004d70 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004c5e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c64:	2200      	movs	r2, #0
 8004c66:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	4619      	mov	r1, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004c80:	f7fe fa60 	bl	8003144 <HAL_DMA_Start_IT>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	f043 0210 	orr.w	r2, r3, #16
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004ca2:	e054      	b.n	8004d4e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb8:	2200      	movs	r2, #0
 8004cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	4619      	mov	r1, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004cec:	f7fe fa2a 	bl	8003144 <HAL_DMA_Start_IT>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00c      	beq.n	8004d10 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	f043 0210 	orr.w	r2, r3, #16
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004d0e:	e01e      	b.n	8004d4e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d007      	beq.n	8004d2e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0220 	orr.w	r2, r2, #32
 8004d3c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0202 	orr.w	r2, r2, #2
 8004d4c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	080050bd 	.word	0x080050bd
 8004d64:	08004f89 	.word	0x08004f89
 8004d68:	080050d9 	.word	0x080050d9
 8004d6c:	0800502f 	.word	0x0800502f
 8004d70:	080050f5 	.word	0x080050f5

08004d74 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10f      	bne.n	8004db8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00a      	beq.n	8004db8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	099b      	lsrs	r3, r3, #6
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d004      	beq.n	8004db8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	4798      	blx	r3
    return;
 8004db6:	e0be      	b.n	8004f36 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <HAL_SPI_IRQHandler+0x66>
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	09db      	lsrs	r3, r3, #7
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	4798      	blx	r3
    return;
 8004dd8:	e0ad      	b.n	8004f36 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	095b      	lsrs	r3, r3, #5
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_SPI_IRQHandler+0x80>
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	099b      	lsrs	r3, r3, #6
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80a1 	beq.w	8004f36 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 809a 	beq.w	8004f36 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	099b      	lsrs	r3, r3, #6
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d023      	beq.n	8004e56 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d011      	beq.n	8004e3e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	f043 0204 	orr.w	r2, r3, #4
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e26:	2300      	movs	r3, #0
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	e00b      	b.n	8004e56 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	693b      	ldr	r3, [r7, #16]
        return;
 8004e54:	e06f      	b.n	8004f36 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d014      	beq.n	8004e8c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d04f      	beq.n	8004f34 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ea2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d104      	bne.n	8004ec0 <HAL_SPI_IRQHandler+0x14c>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d034      	beq.n	8004f2a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0203 	bic.w	r2, r2, #3
 8004ece:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d011      	beq.n	8004efc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004edc:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <HAL_SPI_IRQHandler+0x1c8>)
 8004ede:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fe f98d 	bl	8003204 <HAL_DMA_Abort_IT>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d016      	beq.n	8004f32 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f08:	4a0c      	ldr	r2, [pc, #48]	; (8004f3c <HAL_SPI_IRQHandler+0x1c8>)
 8004f0a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fe f977 	bl	8003204 <HAL_DMA_Abort_IT>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004f28:	e003      	b.n	8004f32 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f823 	bl	8004f76 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004f30:	e000      	b.n	8004f34 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004f32:	bf00      	nop
    return;
 8004f34:	bf00      	nop
  }
}
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	08005135 	.word	0x08005135

08004f40 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f96:	f7fd fee7 	bl	8002d68 <HAL_GetTick>
 8004f9a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d03b      	beq.n	8005022 <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0220 	bic.w	r2, r2, #32
 8004fb8:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10d      	bne.n	8004fde <SPI_DMAReceiveCplt+0x56>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fca:	d108      	bne.n	8004fde <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0203 	bic.w	r2, r2, #3
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	e007      	b.n	8004fee <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0201 	bic.w	r2, r2, #1
 8004fec:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	2164      	movs	r1, #100	; 0x64
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f93a 	bl	800526c <SPI_EndRxTransaction>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2220      	movs	r2, #32
 8005002:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff ffab 	bl	8004f76 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005020:	e002      	b.n	8005028 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7fc f9df 	bl	80013e6 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800503c:	f7fd fe94 	bl	8002d68 <HAL_GetTick>
 8005040:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b20      	cmp	r3, #32
 800504e:	d02f      	beq.n	80050b0 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0220 	bic.w	r2, r2, #32
 800505e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	2164      	movs	r1, #100	; 0x64
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f953 	bl	8005310 <SPI_EndRxTxTransaction>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0203 	bic.w	r2, r2, #3
 800508a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f7ff ff64 	bl	8004f76 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80050ae:	e002      	b.n	80050b6 <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f7ff ff45 	bl	8004f40 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff ff41 	bl	8004f52 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f7ff ff3c 	bl	8004f64 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 0203 	bic.w	r2, r2, #3
 8005110:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f043 0210 	orr.w	r2, r3, #16
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f7ff ff25 	bl	8004f76 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800512c:	bf00      	nop
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ff11 	bl	8004f76 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	4613      	mov	r3, r2
 800516a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800516c:	f7fd fdfc 	bl	8002d68 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	4413      	add	r3, r2
 800517a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800517c:	f7fd fdf4 	bl	8002d68 <HAL_GetTick>
 8005180:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005182:	4b39      	ldr	r3, [pc, #228]	; (8005268 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	015b      	lsls	r3, r3, #5
 8005188:	0d1b      	lsrs	r3, r3, #20
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	fb02 f303 	mul.w	r3, r2, r3
 8005190:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005192:	e054      	b.n	800523e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519a:	d050      	beq.n	800523e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800519c:	f7fd fde4 	bl	8002d68 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d902      	bls.n	80051b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d13d      	bne.n	800522e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ca:	d111      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d4:	d004      	beq.n	80051e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051de:	d107      	bne.n	80051f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051f8:	d10f      	bne.n	800521a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e017      	b.n	800525e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3b01      	subs	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	429a      	cmp	r2, r3
 800525a:	d19b      	bne.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000220 	.word	0x20000220

0800526c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005280:	d111      	bne.n	80052a6 <SPI_EndRxTransaction+0x3a>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800528a:	d004      	beq.n	8005296 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005294:	d107      	bne.n	80052a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ae:	d117      	bne.n	80052e0 <SPI_EndRxTransaction+0x74>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d112      	bne.n	80052e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2200      	movs	r2, #0
 80052c2:	2101      	movs	r1, #1
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff ff49 	bl	800515c <SPI_WaitFlagStateUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01a      	beq.n	8005306 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e013      	b.n	8005308 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2200      	movs	r2, #0
 80052e8:	2180      	movs	r1, #128	; 0x80
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f7ff ff36 	bl	800515c <SPI_WaitFlagStateUntilTimeout>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fa:	f043 0220 	orr.w	r2, r3, #32
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e000      	b.n	8005308 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	2180      	movs	r1, #128	; 0x80
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff ff18 	bl	800515c <SPI_WaitFlagStateUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	f043 0220 	orr.w	r2, r3, #32
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e000      	b.n	8005344 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e03f      	b.n	80053de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d106      	bne.n	8005378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fd fbc6 	bl	8002b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2224      	movs	r2, #36	; 0x24
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800538e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f905 	bl	80055a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695a      	ldr	r2, [r3, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68da      	ldr	r2, [r3, #12]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b08a      	sub	sp, #40	; 0x28
 80053ea:	af02      	add	r7, sp, #8
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	603b      	str	r3, [r7, #0]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b20      	cmp	r3, #32
 8005404:	d17c      	bne.n	8005500 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_UART_Transmit+0x2c>
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e075      	b.n	8005502 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_UART_Transmit+0x3e>
 8005420:	2302      	movs	r3, #2
 8005422:	e06e      	b.n	8005502 <HAL_UART_Transmit+0x11c>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2221      	movs	r2, #33	; 0x21
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800543a:	f7fd fc95 	bl	8002d68 <HAL_GetTick>
 800543e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	88fa      	ldrh	r2, [r7, #6]
 8005444:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	88fa      	ldrh	r2, [r7, #6]
 800544a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005454:	d108      	bne.n	8005468 <HAL_UART_Transmit+0x82>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	e003      	b.n	8005470 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005478:	e02a      	b.n	80054d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2200      	movs	r2, #0
 8005482:	2180      	movs	r1, #128	; 0x80
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f840 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e036      	b.n	8005502 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10b      	bne.n	80054b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	3302      	adds	r3, #2
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	e007      	b.n	80054c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	781a      	ldrb	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	3301      	adds	r3, #1
 80054c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d1cf      	bne.n	800547a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	9300      	str	r3, [sp, #0]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	2140      	movs	r1, #64	; 0x40
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f810 	bl	800550a <UART_WaitOnFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e006      	b.n	8005502 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054fc:	2300      	movs	r3, #0
 80054fe:	e000      	b.n	8005502 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005500:	2302      	movs	r3, #2
  }
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800551a:	e02c      	b.n	8005576 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	d028      	beq.n	8005576 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <UART_WaitOnFlagUntilTimeout+0x30>
 800552a:	f7fd fc1d 	bl	8002d68 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	429a      	cmp	r2, r3
 8005538:	d21d      	bcs.n	8005576 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005548:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0201 	bic.w	r2, r2, #1
 8005558:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e00f      	b.n	8005596 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4013      	ands	r3, r2
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	bf0c      	ite	eq
 8005586:	2301      	moveq	r3, #1
 8005588:	2300      	movne	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	429a      	cmp	r2, r3
 8005592:	d0c3      	beq.n	800551c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	689a      	ldr	r2, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055da:	f023 030c 	bic.w	r3, r3, #12
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6812      	ldr	r2, [r2, #0]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a2c      	ldr	r2, [pc, #176]	; (80056b4 <UART_SetConfig+0x114>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d103      	bne.n	8005610 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005608:	f7ff f934 	bl	8004874 <HAL_RCC_GetPCLK2Freq>
 800560c:	60f8      	str	r0, [r7, #12]
 800560e:	e002      	b.n	8005616 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005610:	f7ff f91c 	bl	800484c <HAL_RCC_GetPCLK1Freq>
 8005614:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009a      	lsls	r2, r3, #2
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	4a22      	ldr	r2, [pc, #136]	; (80056b8 <UART_SetConfig+0x118>)
 800562e:	fba2 2303 	umull	r2, r3, r2, r3
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	0119      	lsls	r1, r3, #4
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009a      	lsls	r2, r3, #2
 8005640:	441a      	add	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	fbb2 f2f3 	udiv	r2, r2, r3
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <UART_SetConfig+0x118>)
 800564e:	fba3 0302 	umull	r0, r3, r3, r2
 8005652:	095b      	lsrs	r3, r3, #5
 8005654:	2064      	movs	r0, #100	; 0x64
 8005656:	fb00 f303 	mul.w	r3, r0, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	3332      	adds	r3, #50	; 0x32
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <UART_SetConfig+0x118>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800566c:	4419      	add	r1, r3
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	4613      	mov	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	009a      	lsls	r2, r3, #2
 8005678:	441a      	add	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	fbb2 f2f3 	udiv	r2, r2, r3
 8005684:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <UART_SetConfig+0x118>)
 8005686:	fba3 0302 	umull	r0, r3, r3, r2
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	2064      	movs	r0, #100	; 0x64
 800568e:	fb00 f303 	mul.w	r3, r0, r3
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	3332      	adds	r3, #50	; 0x32
 8005698:	4a07      	ldr	r2, [pc, #28]	; (80056b8 <UART_SetConfig+0x118>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	f003 020f 	and.w	r2, r3, #15
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	440a      	add	r2, r1
 80056aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	40013800 	.word	0x40013800
 80056b8:	51eb851f 	.word	0x51eb851f

080056bc <__errno>:
 80056bc:	4b01      	ldr	r3, [pc, #4]	; (80056c4 <__errno+0x8>)
 80056be:	6818      	ldr	r0, [r3, #0]
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	2000022c 	.word	0x2000022c

080056c8 <__libc_init_array>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	2600      	movs	r6, #0
 80056cc:	4d0c      	ldr	r5, [pc, #48]	; (8005700 <__libc_init_array+0x38>)
 80056ce:	4c0d      	ldr	r4, [pc, #52]	; (8005704 <__libc_init_array+0x3c>)
 80056d0:	1b64      	subs	r4, r4, r5
 80056d2:	10a4      	asrs	r4, r4, #2
 80056d4:	42a6      	cmp	r6, r4
 80056d6:	d109      	bne.n	80056ec <__libc_init_array+0x24>
 80056d8:	f000 fc7e 	bl	8005fd8 <_init>
 80056dc:	2600      	movs	r6, #0
 80056de:	4d0a      	ldr	r5, [pc, #40]	; (8005708 <__libc_init_array+0x40>)
 80056e0:	4c0a      	ldr	r4, [pc, #40]	; (800570c <__libc_init_array+0x44>)
 80056e2:	1b64      	subs	r4, r4, r5
 80056e4:	10a4      	asrs	r4, r4, #2
 80056e6:	42a6      	cmp	r6, r4
 80056e8:	d105      	bne.n	80056f6 <__libc_init_array+0x2e>
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f0:	4798      	blx	r3
 80056f2:	3601      	adds	r6, #1
 80056f4:	e7ee      	b.n	80056d4 <__libc_init_array+0xc>
 80056f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fa:	4798      	blx	r3
 80056fc:	3601      	adds	r6, #1
 80056fe:	e7f2      	b.n	80056e6 <__libc_init_array+0x1e>
 8005700:	08006a40 	.word	0x08006a40
 8005704:	08006a40 	.word	0x08006a40
 8005708:	08006a40 	.word	0x08006a40
 800570c:	08006a44 	.word	0x08006a44

08005710 <memcmp>:
 8005710:	b530      	push	{r4, r5, lr}
 8005712:	2400      	movs	r4, #0
 8005714:	3901      	subs	r1, #1
 8005716:	42a2      	cmp	r2, r4
 8005718:	d101      	bne.n	800571e <memcmp+0xe>
 800571a:	2000      	movs	r0, #0
 800571c:	e005      	b.n	800572a <memcmp+0x1a>
 800571e:	5d03      	ldrb	r3, [r0, r4]
 8005720:	3401      	adds	r4, #1
 8005722:	5d0d      	ldrb	r5, [r1, r4]
 8005724:	42ab      	cmp	r3, r5
 8005726:	d0f6      	beq.n	8005716 <memcmp+0x6>
 8005728:	1b58      	subs	r0, r3, r5
 800572a:	bd30      	pop	{r4, r5, pc}

0800572c <memcpy>:
 800572c:	440a      	add	r2, r1
 800572e:	4291      	cmp	r1, r2
 8005730:	f100 33ff 	add.w	r3, r0, #4294967295
 8005734:	d100      	bne.n	8005738 <memcpy+0xc>
 8005736:	4770      	bx	lr
 8005738:	b510      	push	{r4, lr}
 800573a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800573e:	4291      	cmp	r1, r2
 8005740:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005744:	d1f9      	bne.n	800573a <memcpy+0xe>
 8005746:	bd10      	pop	{r4, pc}

08005748 <memset>:
 8005748:	4603      	mov	r3, r0
 800574a:	4402      	add	r2, r0
 800574c:	4293      	cmp	r3, r2
 800574e:	d100      	bne.n	8005752 <memset+0xa>
 8005750:	4770      	bx	lr
 8005752:	f803 1b01 	strb.w	r1, [r3], #1
 8005756:	e7f9      	b.n	800574c <memset+0x4>

08005758 <strncpy>:
 8005758:	4603      	mov	r3, r0
 800575a:	b510      	push	{r4, lr}
 800575c:	3901      	subs	r1, #1
 800575e:	b132      	cbz	r2, 800576e <strncpy+0x16>
 8005760:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005764:	3a01      	subs	r2, #1
 8005766:	f803 4b01 	strb.w	r4, [r3], #1
 800576a:	2c00      	cmp	r4, #0
 800576c:	d1f7      	bne.n	800575e <strncpy+0x6>
 800576e:	2100      	movs	r1, #0
 8005770:	441a      	add	r2, r3
 8005772:	4293      	cmp	r3, r2
 8005774:	d100      	bne.n	8005778 <strncpy+0x20>
 8005776:	bd10      	pop	{r4, pc}
 8005778:	f803 1b01 	strb.w	r1, [r3], #1
 800577c:	e7f9      	b.n	8005772 <strncpy+0x1a>
	...

08005780 <_vsiprintf_r>:
 8005780:	b500      	push	{lr}
 8005782:	b09b      	sub	sp, #108	; 0x6c
 8005784:	9100      	str	r1, [sp, #0]
 8005786:	9104      	str	r1, [sp, #16]
 8005788:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800578c:	9105      	str	r1, [sp, #20]
 800578e:	9102      	str	r1, [sp, #8]
 8005790:	4905      	ldr	r1, [pc, #20]	; (80057a8 <_vsiprintf_r+0x28>)
 8005792:	9103      	str	r1, [sp, #12]
 8005794:	4669      	mov	r1, sp
 8005796:	f000 f86f 	bl	8005878 <_svfiprintf_r>
 800579a:	2200      	movs	r2, #0
 800579c:	9b00      	ldr	r3, [sp, #0]
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	b01b      	add	sp, #108	; 0x6c
 80057a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80057a6:	bf00      	nop
 80057a8:	ffff0208 	.word	0xffff0208

080057ac <vsiprintf>:
 80057ac:	4613      	mov	r3, r2
 80057ae:	460a      	mov	r2, r1
 80057b0:	4601      	mov	r1, r0
 80057b2:	4802      	ldr	r0, [pc, #8]	; (80057bc <vsiprintf+0x10>)
 80057b4:	6800      	ldr	r0, [r0, #0]
 80057b6:	f7ff bfe3 	b.w	8005780 <_vsiprintf_r>
 80057ba:	bf00      	nop
 80057bc:	2000022c 	.word	0x2000022c

080057c0 <__ssputs_r>:
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	688e      	ldr	r6, [r1, #8]
 80057c6:	4682      	mov	sl, r0
 80057c8:	429e      	cmp	r6, r3
 80057ca:	460c      	mov	r4, r1
 80057cc:	4690      	mov	r8, r2
 80057ce:	461f      	mov	r7, r3
 80057d0:	d838      	bhi.n	8005844 <__ssputs_r+0x84>
 80057d2:	898a      	ldrh	r2, [r1, #12]
 80057d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057d8:	d032      	beq.n	8005840 <__ssputs_r+0x80>
 80057da:	6825      	ldr	r5, [r4, #0]
 80057dc:	6909      	ldr	r1, [r1, #16]
 80057de:	3301      	adds	r3, #1
 80057e0:	eba5 0901 	sub.w	r9, r5, r1
 80057e4:	6965      	ldr	r5, [r4, #20]
 80057e6:	444b      	add	r3, r9
 80057e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057f0:	106d      	asrs	r5, r5, #1
 80057f2:	429d      	cmp	r5, r3
 80057f4:	bf38      	it	cc
 80057f6:	461d      	movcc	r5, r3
 80057f8:	0553      	lsls	r3, r2, #21
 80057fa:	d531      	bpl.n	8005860 <__ssputs_r+0xa0>
 80057fc:	4629      	mov	r1, r5
 80057fe:	f000 fb45 	bl	8005e8c <_malloc_r>
 8005802:	4606      	mov	r6, r0
 8005804:	b950      	cbnz	r0, 800581c <__ssputs_r+0x5c>
 8005806:	230c      	movs	r3, #12
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	f8ca 3000 	str.w	r3, [sl]
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005816:	81a3      	strh	r3, [r4, #12]
 8005818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581c:	464a      	mov	r2, r9
 800581e:	6921      	ldr	r1, [r4, #16]
 8005820:	f7ff ff84 	bl	800572c <memcpy>
 8005824:	89a3      	ldrh	r3, [r4, #12]
 8005826:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800582a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	6126      	str	r6, [r4, #16]
 8005832:	444e      	add	r6, r9
 8005834:	6026      	str	r6, [r4, #0]
 8005836:	463e      	mov	r6, r7
 8005838:	6165      	str	r5, [r4, #20]
 800583a:	eba5 0509 	sub.w	r5, r5, r9
 800583e:	60a5      	str	r5, [r4, #8]
 8005840:	42be      	cmp	r6, r7
 8005842:	d900      	bls.n	8005846 <__ssputs_r+0x86>
 8005844:	463e      	mov	r6, r7
 8005846:	4632      	mov	r2, r6
 8005848:	4641      	mov	r1, r8
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	f000 fab8 	bl	8005dc0 <memmove>
 8005850:	68a3      	ldr	r3, [r4, #8]
 8005852:	6822      	ldr	r2, [r4, #0]
 8005854:	1b9b      	subs	r3, r3, r6
 8005856:	4432      	add	r2, r6
 8005858:	2000      	movs	r0, #0
 800585a:	60a3      	str	r3, [r4, #8]
 800585c:	6022      	str	r2, [r4, #0]
 800585e:	e7db      	b.n	8005818 <__ssputs_r+0x58>
 8005860:	462a      	mov	r2, r5
 8005862:	f000 fb6d 	bl	8005f40 <_realloc_r>
 8005866:	4606      	mov	r6, r0
 8005868:	2800      	cmp	r0, #0
 800586a:	d1e1      	bne.n	8005830 <__ssputs_r+0x70>
 800586c:	4650      	mov	r0, sl
 800586e:	6921      	ldr	r1, [r4, #16]
 8005870:	f000 fac0 	bl	8005df4 <_free_r>
 8005874:	e7c7      	b.n	8005806 <__ssputs_r+0x46>
	...

08005878 <_svfiprintf_r>:
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	4698      	mov	r8, r3
 800587e:	898b      	ldrh	r3, [r1, #12]
 8005880:	4607      	mov	r7, r0
 8005882:	061b      	lsls	r3, r3, #24
 8005884:	460d      	mov	r5, r1
 8005886:	4614      	mov	r4, r2
 8005888:	b09d      	sub	sp, #116	; 0x74
 800588a:	d50e      	bpl.n	80058aa <_svfiprintf_r+0x32>
 800588c:	690b      	ldr	r3, [r1, #16]
 800588e:	b963      	cbnz	r3, 80058aa <_svfiprintf_r+0x32>
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	f000 fafb 	bl	8005e8c <_malloc_r>
 8005896:	6028      	str	r0, [r5, #0]
 8005898:	6128      	str	r0, [r5, #16]
 800589a:	b920      	cbnz	r0, 80058a6 <_svfiprintf_r+0x2e>
 800589c:	230c      	movs	r3, #12
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
 80058a4:	e0d1      	b.n	8005a4a <_svfiprintf_r+0x1d2>
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	616b      	str	r3, [r5, #20]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9309      	str	r3, [sp, #36]	; 0x24
 80058ae:	2320      	movs	r3, #32
 80058b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058b4:	2330      	movs	r3, #48	; 0x30
 80058b6:	f04f 0901 	mov.w	r9, #1
 80058ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80058be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a64 <_svfiprintf_r+0x1ec>
 80058c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058c6:	4623      	mov	r3, r4
 80058c8:	469a      	mov	sl, r3
 80058ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ce:	b10a      	cbz	r2, 80058d4 <_svfiprintf_r+0x5c>
 80058d0:	2a25      	cmp	r2, #37	; 0x25
 80058d2:	d1f9      	bne.n	80058c8 <_svfiprintf_r+0x50>
 80058d4:	ebba 0b04 	subs.w	fp, sl, r4
 80058d8:	d00b      	beq.n	80058f2 <_svfiprintf_r+0x7a>
 80058da:	465b      	mov	r3, fp
 80058dc:	4622      	mov	r2, r4
 80058de:	4629      	mov	r1, r5
 80058e0:	4638      	mov	r0, r7
 80058e2:	f7ff ff6d 	bl	80057c0 <__ssputs_r>
 80058e6:	3001      	adds	r0, #1
 80058e8:	f000 80aa 	beq.w	8005a40 <_svfiprintf_r+0x1c8>
 80058ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ee:	445a      	add	r2, fp
 80058f0:	9209      	str	r2, [sp, #36]	; 0x24
 80058f2:	f89a 3000 	ldrb.w	r3, [sl]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80a2 	beq.w	8005a40 <_svfiprintf_r+0x1c8>
 80058fc:	2300      	movs	r3, #0
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005906:	f10a 0a01 	add.w	sl, sl, #1
 800590a:	9304      	str	r3, [sp, #16]
 800590c:	9307      	str	r3, [sp, #28]
 800590e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005912:	931a      	str	r3, [sp, #104]	; 0x68
 8005914:	4654      	mov	r4, sl
 8005916:	2205      	movs	r2, #5
 8005918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800591c:	4851      	ldr	r0, [pc, #324]	; (8005a64 <_svfiprintf_r+0x1ec>)
 800591e:	f000 fa41 	bl	8005da4 <memchr>
 8005922:	9a04      	ldr	r2, [sp, #16]
 8005924:	b9d8      	cbnz	r0, 800595e <_svfiprintf_r+0xe6>
 8005926:	06d0      	lsls	r0, r2, #27
 8005928:	bf44      	itt	mi
 800592a:	2320      	movmi	r3, #32
 800592c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005930:	0711      	lsls	r1, r2, #28
 8005932:	bf44      	itt	mi
 8005934:	232b      	movmi	r3, #43	; 0x2b
 8005936:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800593a:	f89a 3000 	ldrb.w	r3, [sl]
 800593e:	2b2a      	cmp	r3, #42	; 0x2a
 8005940:	d015      	beq.n	800596e <_svfiprintf_r+0xf6>
 8005942:	4654      	mov	r4, sl
 8005944:	2000      	movs	r0, #0
 8005946:	f04f 0c0a 	mov.w	ip, #10
 800594a:	9a07      	ldr	r2, [sp, #28]
 800594c:	4621      	mov	r1, r4
 800594e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005952:	3b30      	subs	r3, #48	; 0x30
 8005954:	2b09      	cmp	r3, #9
 8005956:	d94e      	bls.n	80059f6 <_svfiprintf_r+0x17e>
 8005958:	b1b0      	cbz	r0, 8005988 <_svfiprintf_r+0x110>
 800595a:	9207      	str	r2, [sp, #28]
 800595c:	e014      	b.n	8005988 <_svfiprintf_r+0x110>
 800595e:	eba0 0308 	sub.w	r3, r0, r8
 8005962:	fa09 f303 	lsl.w	r3, r9, r3
 8005966:	4313      	orrs	r3, r2
 8005968:	46a2      	mov	sl, r4
 800596a:	9304      	str	r3, [sp, #16]
 800596c:	e7d2      	b.n	8005914 <_svfiprintf_r+0x9c>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	1d19      	adds	r1, r3, #4
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	9103      	str	r1, [sp, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	bfbb      	ittet	lt
 800597a:	425b      	neglt	r3, r3
 800597c:	f042 0202 	orrlt.w	r2, r2, #2
 8005980:	9307      	strge	r3, [sp, #28]
 8005982:	9307      	strlt	r3, [sp, #28]
 8005984:	bfb8      	it	lt
 8005986:	9204      	strlt	r2, [sp, #16]
 8005988:	7823      	ldrb	r3, [r4, #0]
 800598a:	2b2e      	cmp	r3, #46	; 0x2e
 800598c:	d10c      	bne.n	80059a8 <_svfiprintf_r+0x130>
 800598e:	7863      	ldrb	r3, [r4, #1]
 8005990:	2b2a      	cmp	r3, #42	; 0x2a
 8005992:	d135      	bne.n	8005a00 <_svfiprintf_r+0x188>
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	3402      	adds	r4, #2
 8005998:	1d1a      	adds	r2, r3, #4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	9203      	str	r2, [sp, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfb8      	it	lt
 80059a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80059a6:	9305      	str	r3, [sp, #20]
 80059a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a74 <_svfiprintf_r+0x1fc>
 80059ac:	2203      	movs	r2, #3
 80059ae:	4650      	mov	r0, sl
 80059b0:	7821      	ldrb	r1, [r4, #0]
 80059b2:	f000 f9f7 	bl	8005da4 <memchr>
 80059b6:	b140      	cbz	r0, 80059ca <_svfiprintf_r+0x152>
 80059b8:	2340      	movs	r3, #64	; 0x40
 80059ba:	eba0 000a 	sub.w	r0, r0, sl
 80059be:	fa03 f000 	lsl.w	r0, r3, r0
 80059c2:	9b04      	ldr	r3, [sp, #16]
 80059c4:	3401      	adds	r4, #1
 80059c6:	4303      	orrs	r3, r0
 80059c8:	9304      	str	r3, [sp, #16]
 80059ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059ce:	2206      	movs	r2, #6
 80059d0:	4825      	ldr	r0, [pc, #148]	; (8005a68 <_svfiprintf_r+0x1f0>)
 80059d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059d6:	f000 f9e5 	bl	8005da4 <memchr>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d038      	beq.n	8005a50 <_svfiprintf_r+0x1d8>
 80059de:	4b23      	ldr	r3, [pc, #140]	; (8005a6c <_svfiprintf_r+0x1f4>)
 80059e0:	bb1b      	cbnz	r3, 8005a2a <_svfiprintf_r+0x1b2>
 80059e2:	9b03      	ldr	r3, [sp, #12]
 80059e4:	3307      	adds	r3, #7
 80059e6:	f023 0307 	bic.w	r3, r3, #7
 80059ea:	3308      	adds	r3, #8
 80059ec:	9303      	str	r3, [sp, #12]
 80059ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059f0:	4433      	add	r3, r6
 80059f2:	9309      	str	r3, [sp, #36]	; 0x24
 80059f4:	e767      	b.n	80058c6 <_svfiprintf_r+0x4e>
 80059f6:	460c      	mov	r4, r1
 80059f8:	2001      	movs	r0, #1
 80059fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80059fe:	e7a5      	b.n	800594c <_svfiprintf_r+0xd4>
 8005a00:	2300      	movs	r3, #0
 8005a02:	f04f 0c0a 	mov.w	ip, #10
 8005a06:	4619      	mov	r1, r3
 8005a08:	3401      	adds	r4, #1
 8005a0a:	9305      	str	r3, [sp, #20]
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a12:	3a30      	subs	r2, #48	; 0x30
 8005a14:	2a09      	cmp	r2, #9
 8005a16:	d903      	bls.n	8005a20 <_svfiprintf_r+0x1a8>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0c5      	beq.n	80059a8 <_svfiprintf_r+0x130>
 8005a1c:	9105      	str	r1, [sp, #20]
 8005a1e:	e7c3      	b.n	80059a8 <_svfiprintf_r+0x130>
 8005a20:	4604      	mov	r4, r0
 8005a22:	2301      	movs	r3, #1
 8005a24:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a28:	e7f0      	b.n	8005a0c <_svfiprintf_r+0x194>
 8005a2a:	ab03      	add	r3, sp, #12
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	462a      	mov	r2, r5
 8005a30:	4638      	mov	r0, r7
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <_svfiprintf_r+0x1f8>)
 8005a34:	a904      	add	r1, sp, #16
 8005a36:	f3af 8000 	nop.w
 8005a3a:	1c42      	adds	r2, r0, #1
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	d1d6      	bne.n	80059ee <_svfiprintf_r+0x176>
 8005a40:	89ab      	ldrh	r3, [r5, #12]
 8005a42:	065b      	lsls	r3, r3, #25
 8005a44:	f53f af2c 	bmi.w	80058a0 <_svfiprintf_r+0x28>
 8005a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a4a:	b01d      	add	sp, #116	; 0x74
 8005a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a50:	ab03      	add	r3, sp, #12
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	462a      	mov	r2, r5
 8005a56:	4638      	mov	r0, r7
 8005a58:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <_svfiprintf_r+0x1f8>)
 8005a5a:	a904      	add	r1, sp, #16
 8005a5c:	f000 f87c 	bl	8005b58 <_printf_i>
 8005a60:	e7eb      	b.n	8005a3a <_svfiprintf_r+0x1c2>
 8005a62:	bf00      	nop
 8005a64:	08006a0c 	.word	0x08006a0c
 8005a68:	08006a16 	.word	0x08006a16
 8005a6c:	00000000 	.word	0x00000000
 8005a70:	080057c1 	.word	0x080057c1
 8005a74:	08006a12 	.word	0x08006a12

08005a78 <_printf_common>:
 8005a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a7c:	4616      	mov	r6, r2
 8005a7e:	4699      	mov	r9, r3
 8005a80:	688a      	ldr	r2, [r1, #8]
 8005a82:	690b      	ldr	r3, [r1, #16]
 8005a84:	4607      	mov	r7, r0
 8005a86:	4293      	cmp	r3, r2
 8005a88:	bfb8      	it	lt
 8005a8a:	4613      	movlt	r3, r2
 8005a8c:	6033      	str	r3, [r6, #0]
 8005a8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a92:	460c      	mov	r4, r1
 8005a94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a98:	b10a      	cbz	r2, 8005a9e <_printf_common+0x26>
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	6033      	str	r3, [r6, #0]
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	0699      	lsls	r1, r3, #26
 8005aa2:	bf42      	ittt	mi
 8005aa4:	6833      	ldrmi	r3, [r6, #0]
 8005aa6:	3302      	addmi	r3, #2
 8005aa8:	6033      	strmi	r3, [r6, #0]
 8005aaa:	6825      	ldr	r5, [r4, #0]
 8005aac:	f015 0506 	ands.w	r5, r5, #6
 8005ab0:	d106      	bne.n	8005ac0 <_printf_common+0x48>
 8005ab2:	f104 0a19 	add.w	sl, r4, #25
 8005ab6:	68e3      	ldr	r3, [r4, #12]
 8005ab8:	6832      	ldr	r2, [r6, #0]
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	42ab      	cmp	r3, r5
 8005abe:	dc28      	bgt.n	8005b12 <_printf_common+0x9a>
 8005ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ac4:	1e13      	subs	r3, r2, #0
 8005ac6:	6822      	ldr	r2, [r4, #0]
 8005ac8:	bf18      	it	ne
 8005aca:	2301      	movne	r3, #1
 8005acc:	0692      	lsls	r2, r2, #26
 8005ace:	d42d      	bmi.n	8005b2c <_printf_common+0xb4>
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ad8:	47c0      	blx	r8
 8005ada:	3001      	adds	r0, #1
 8005adc:	d020      	beq.n	8005b20 <_printf_common+0xa8>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	68e5      	ldr	r5, [r4, #12]
 8005ae2:	f003 0306 	and.w	r3, r3, #6
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	bf18      	it	ne
 8005aea:	2500      	movne	r5, #0
 8005aec:	6832      	ldr	r2, [r6, #0]
 8005aee:	f04f 0600 	mov.w	r6, #0
 8005af2:	68a3      	ldr	r3, [r4, #8]
 8005af4:	bf08      	it	eq
 8005af6:	1aad      	subeq	r5, r5, r2
 8005af8:	6922      	ldr	r2, [r4, #16]
 8005afa:	bf08      	it	eq
 8005afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b00:	4293      	cmp	r3, r2
 8005b02:	bfc4      	itt	gt
 8005b04:	1a9b      	subgt	r3, r3, r2
 8005b06:	18ed      	addgt	r5, r5, r3
 8005b08:	341a      	adds	r4, #26
 8005b0a:	42b5      	cmp	r5, r6
 8005b0c:	d11a      	bne.n	8005b44 <_printf_common+0xcc>
 8005b0e:	2000      	movs	r0, #0
 8005b10:	e008      	b.n	8005b24 <_printf_common+0xac>
 8005b12:	2301      	movs	r3, #1
 8005b14:	4652      	mov	r2, sl
 8005b16:	4649      	mov	r1, r9
 8005b18:	4638      	mov	r0, r7
 8005b1a:	47c0      	blx	r8
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	d103      	bne.n	8005b28 <_printf_common+0xb0>
 8005b20:	f04f 30ff 	mov.w	r0, #4294967295
 8005b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b28:	3501      	adds	r5, #1
 8005b2a:	e7c4      	b.n	8005ab6 <_printf_common+0x3e>
 8005b2c:	2030      	movs	r0, #48	; 0x30
 8005b2e:	18e1      	adds	r1, r4, r3
 8005b30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b3a:	4422      	add	r2, r4
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b42:	e7c5      	b.n	8005ad0 <_printf_common+0x58>
 8005b44:	2301      	movs	r3, #1
 8005b46:	4622      	mov	r2, r4
 8005b48:	4649      	mov	r1, r9
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	47c0      	blx	r8
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d0e6      	beq.n	8005b20 <_printf_common+0xa8>
 8005b52:	3601      	adds	r6, #1
 8005b54:	e7d9      	b.n	8005b0a <_printf_common+0x92>
	...

08005b58 <_printf_i>:
 8005b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	7e27      	ldrb	r7, [r4, #24]
 8005b60:	4691      	mov	r9, r2
 8005b62:	2f78      	cmp	r7, #120	; 0x78
 8005b64:	4680      	mov	r8, r0
 8005b66:	469a      	mov	sl, r3
 8005b68:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b6e:	d807      	bhi.n	8005b80 <_printf_i+0x28>
 8005b70:	2f62      	cmp	r7, #98	; 0x62
 8005b72:	d80a      	bhi.n	8005b8a <_printf_i+0x32>
 8005b74:	2f00      	cmp	r7, #0
 8005b76:	f000 80d9 	beq.w	8005d2c <_printf_i+0x1d4>
 8005b7a:	2f58      	cmp	r7, #88	; 0x58
 8005b7c:	f000 80a4 	beq.w	8005cc8 <_printf_i+0x170>
 8005b80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b88:	e03a      	b.n	8005c00 <_printf_i+0xa8>
 8005b8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b8e:	2b15      	cmp	r3, #21
 8005b90:	d8f6      	bhi.n	8005b80 <_printf_i+0x28>
 8005b92:	a001      	add	r0, pc, #4	; (adr r0, 8005b98 <_printf_i+0x40>)
 8005b94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b98:	08005bf1 	.word	0x08005bf1
 8005b9c:	08005c05 	.word	0x08005c05
 8005ba0:	08005b81 	.word	0x08005b81
 8005ba4:	08005b81 	.word	0x08005b81
 8005ba8:	08005b81 	.word	0x08005b81
 8005bac:	08005b81 	.word	0x08005b81
 8005bb0:	08005c05 	.word	0x08005c05
 8005bb4:	08005b81 	.word	0x08005b81
 8005bb8:	08005b81 	.word	0x08005b81
 8005bbc:	08005b81 	.word	0x08005b81
 8005bc0:	08005b81 	.word	0x08005b81
 8005bc4:	08005d13 	.word	0x08005d13
 8005bc8:	08005c35 	.word	0x08005c35
 8005bcc:	08005cf5 	.word	0x08005cf5
 8005bd0:	08005b81 	.word	0x08005b81
 8005bd4:	08005b81 	.word	0x08005b81
 8005bd8:	08005d35 	.word	0x08005d35
 8005bdc:	08005b81 	.word	0x08005b81
 8005be0:	08005c35 	.word	0x08005c35
 8005be4:	08005b81 	.word	0x08005b81
 8005be8:	08005b81 	.word	0x08005b81
 8005bec:	08005cfd 	.word	0x08005cfd
 8005bf0:	680b      	ldr	r3, [r1, #0]
 8005bf2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bf6:	1d1a      	adds	r2, r3, #4
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	600a      	str	r2, [r1, #0]
 8005bfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0a4      	b.n	8005d4e <_printf_i+0x1f6>
 8005c04:	6825      	ldr	r5, [r4, #0]
 8005c06:	6808      	ldr	r0, [r1, #0]
 8005c08:	062e      	lsls	r6, r5, #24
 8005c0a:	f100 0304 	add.w	r3, r0, #4
 8005c0e:	d50a      	bpl.n	8005c26 <_printf_i+0xce>
 8005c10:	6805      	ldr	r5, [r0, #0]
 8005c12:	600b      	str	r3, [r1, #0]
 8005c14:	2d00      	cmp	r5, #0
 8005c16:	da03      	bge.n	8005c20 <_printf_i+0xc8>
 8005c18:	232d      	movs	r3, #45	; 0x2d
 8005c1a:	426d      	negs	r5, r5
 8005c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c20:	230a      	movs	r3, #10
 8005c22:	485e      	ldr	r0, [pc, #376]	; (8005d9c <_printf_i+0x244>)
 8005c24:	e019      	b.n	8005c5a <_printf_i+0x102>
 8005c26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c2a:	6805      	ldr	r5, [r0, #0]
 8005c2c:	600b      	str	r3, [r1, #0]
 8005c2e:	bf18      	it	ne
 8005c30:	b22d      	sxthne	r5, r5
 8005c32:	e7ef      	b.n	8005c14 <_printf_i+0xbc>
 8005c34:	680b      	ldr	r3, [r1, #0]
 8005c36:	6825      	ldr	r5, [r4, #0]
 8005c38:	1d18      	adds	r0, r3, #4
 8005c3a:	6008      	str	r0, [r1, #0]
 8005c3c:	0628      	lsls	r0, r5, #24
 8005c3e:	d501      	bpl.n	8005c44 <_printf_i+0xec>
 8005c40:	681d      	ldr	r5, [r3, #0]
 8005c42:	e002      	b.n	8005c4a <_printf_i+0xf2>
 8005c44:	0669      	lsls	r1, r5, #25
 8005c46:	d5fb      	bpl.n	8005c40 <_printf_i+0xe8>
 8005c48:	881d      	ldrh	r5, [r3, #0]
 8005c4a:	2f6f      	cmp	r7, #111	; 0x6f
 8005c4c:	bf0c      	ite	eq
 8005c4e:	2308      	moveq	r3, #8
 8005c50:	230a      	movne	r3, #10
 8005c52:	4852      	ldr	r0, [pc, #328]	; (8005d9c <_printf_i+0x244>)
 8005c54:	2100      	movs	r1, #0
 8005c56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c5a:	6866      	ldr	r6, [r4, #4]
 8005c5c:	2e00      	cmp	r6, #0
 8005c5e:	bfa8      	it	ge
 8005c60:	6821      	ldrge	r1, [r4, #0]
 8005c62:	60a6      	str	r6, [r4, #8]
 8005c64:	bfa4      	itt	ge
 8005c66:	f021 0104 	bicge.w	r1, r1, #4
 8005c6a:	6021      	strge	r1, [r4, #0]
 8005c6c:	b90d      	cbnz	r5, 8005c72 <_printf_i+0x11a>
 8005c6e:	2e00      	cmp	r6, #0
 8005c70:	d04d      	beq.n	8005d0e <_printf_i+0x1b6>
 8005c72:	4616      	mov	r6, r2
 8005c74:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c78:	fb03 5711 	mls	r7, r3, r1, r5
 8005c7c:	5dc7      	ldrb	r7, [r0, r7]
 8005c7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c82:	462f      	mov	r7, r5
 8005c84:	42bb      	cmp	r3, r7
 8005c86:	460d      	mov	r5, r1
 8005c88:	d9f4      	bls.n	8005c74 <_printf_i+0x11c>
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d10b      	bne.n	8005ca6 <_printf_i+0x14e>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	07df      	lsls	r7, r3, #31
 8005c92:	d508      	bpl.n	8005ca6 <_printf_i+0x14e>
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	6861      	ldr	r1, [r4, #4]
 8005c98:	4299      	cmp	r1, r3
 8005c9a:	bfde      	ittt	le
 8005c9c:	2330      	movle	r3, #48	; 0x30
 8005c9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ca2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ca6:	1b92      	subs	r2, r2, r6
 8005ca8:	6122      	str	r2, [r4, #16]
 8005caa:	464b      	mov	r3, r9
 8005cac:	4621      	mov	r1, r4
 8005cae:	4640      	mov	r0, r8
 8005cb0:	f8cd a000 	str.w	sl, [sp]
 8005cb4:	aa03      	add	r2, sp, #12
 8005cb6:	f7ff fedf 	bl	8005a78 <_printf_common>
 8005cba:	3001      	adds	r0, #1
 8005cbc:	d14c      	bne.n	8005d58 <_printf_i+0x200>
 8005cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005cc2:	b004      	add	sp, #16
 8005cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc8:	4834      	ldr	r0, [pc, #208]	; (8005d9c <_printf_i+0x244>)
 8005cca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cce:	680e      	ldr	r6, [r1, #0]
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005cd6:	061f      	lsls	r7, r3, #24
 8005cd8:	600e      	str	r6, [r1, #0]
 8005cda:	d514      	bpl.n	8005d06 <_printf_i+0x1ae>
 8005cdc:	07d9      	lsls	r1, r3, #31
 8005cde:	bf44      	itt	mi
 8005ce0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ce4:	6023      	strmi	r3, [r4, #0]
 8005ce6:	b91d      	cbnz	r5, 8005cf0 <_printf_i+0x198>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	f023 0320 	bic.w	r3, r3, #32
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	e7af      	b.n	8005c54 <_printf_i+0xfc>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	f043 0320 	orr.w	r3, r3, #32
 8005cfa:	6023      	str	r3, [r4, #0]
 8005cfc:	2378      	movs	r3, #120	; 0x78
 8005cfe:	4828      	ldr	r0, [pc, #160]	; (8005da0 <_printf_i+0x248>)
 8005d00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d04:	e7e3      	b.n	8005cce <_printf_i+0x176>
 8005d06:	065e      	lsls	r6, r3, #25
 8005d08:	bf48      	it	mi
 8005d0a:	b2ad      	uxthmi	r5, r5
 8005d0c:	e7e6      	b.n	8005cdc <_printf_i+0x184>
 8005d0e:	4616      	mov	r6, r2
 8005d10:	e7bb      	b.n	8005c8a <_printf_i+0x132>
 8005d12:	680b      	ldr	r3, [r1, #0]
 8005d14:	6826      	ldr	r6, [r4, #0]
 8005d16:	1d1d      	adds	r5, r3, #4
 8005d18:	6960      	ldr	r0, [r4, #20]
 8005d1a:	600d      	str	r5, [r1, #0]
 8005d1c:	0635      	lsls	r5, r6, #24
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	d501      	bpl.n	8005d26 <_printf_i+0x1ce>
 8005d22:	6018      	str	r0, [r3, #0]
 8005d24:	e002      	b.n	8005d2c <_printf_i+0x1d4>
 8005d26:	0671      	lsls	r1, r6, #25
 8005d28:	d5fb      	bpl.n	8005d22 <_printf_i+0x1ca>
 8005d2a:	8018      	strh	r0, [r3, #0]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4616      	mov	r6, r2
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	e7ba      	b.n	8005caa <_printf_i+0x152>
 8005d34:	680b      	ldr	r3, [r1, #0]
 8005d36:	1d1a      	adds	r2, r3, #4
 8005d38:	600a      	str	r2, [r1, #0]
 8005d3a:	681e      	ldr	r6, [r3, #0]
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	4630      	mov	r0, r6
 8005d40:	6862      	ldr	r2, [r4, #4]
 8005d42:	f000 f82f 	bl	8005da4 <memchr>
 8005d46:	b108      	cbz	r0, 8005d4c <_printf_i+0x1f4>
 8005d48:	1b80      	subs	r0, r0, r6
 8005d4a:	6060      	str	r0, [r4, #4]
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	2300      	movs	r3, #0
 8005d52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d56:	e7a8      	b.n	8005caa <_printf_i+0x152>
 8005d58:	4632      	mov	r2, r6
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	6923      	ldr	r3, [r4, #16]
 8005d60:	47d0      	blx	sl
 8005d62:	3001      	adds	r0, #1
 8005d64:	d0ab      	beq.n	8005cbe <_printf_i+0x166>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	079b      	lsls	r3, r3, #30
 8005d6a:	d413      	bmi.n	8005d94 <_printf_i+0x23c>
 8005d6c:	68e0      	ldr	r0, [r4, #12]
 8005d6e:	9b03      	ldr	r3, [sp, #12]
 8005d70:	4298      	cmp	r0, r3
 8005d72:	bfb8      	it	lt
 8005d74:	4618      	movlt	r0, r3
 8005d76:	e7a4      	b.n	8005cc2 <_printf_i+0x16a>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4632      	mov	r2, r6
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	4640      	mov	r0, r8
 8005d80:	47d0      	blx	sl
 8005d82:	3001      	adds	r0, #1
 8005d84:	d09b      	beq.n	8005cbe <_printf_i+0x166>
 8005d86:	3501      	adds	r5, #1
 8005d88:	68e3      	ldr	r3, [r4, #12]
 8005d8a:	9903      	ldr	r1, [sp, #12]
 8005d8c:	1a5b      	subs	r3, r3, r1
 8005d8e:	42ab      	cmp	r3, r5
 8005d90:	dcf2      	bgt.n	8005d78 <_printf_i+0x220>
 8005d92:	e7eb      	b.n	8005d6c <_printf_i+0x214>
 8005d94:	2500      	movs	r5, #0
 8005d96:	f104 0619 	add.w	r6, r4, #25
 8005d9a:	e7f5      	b.n	8005d88 <_printf_i+0x230>
 8005d9c:	08006a1d 	.word	0x08006a1d
 8005da0:	08006a2e 	.word	0x08006a2e

08005da4 <memchr>:
 8005da4:	4603      	mov	r3, r0
 8005da6:	b510      	push	{r4, lr}
 8005da8:	b2c9      	uxtb	r1, r1
 8005daa:	4402      	add	r2, r0
 8005dac:	4293      	cmp	r3, r2
 8005dae:	4618      	mov	r0, r3
 8005db0:	d101      	bne.n	8005db6 <memchr+0x12>
 8005db2:	2000      	movs	r0, #0
 8005db4:	e003      	b.n	8005dbe <memchr+0x1a>
 8005db6:	7804      	ldrb	r4, [r0, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	428c      	cmp	r4, r1
 8005dbc:	d1f6      	bne.n	8005dac <memchr+0x8>
 8005dbe:	bd10      	pop	{r4, pc}

08005dc0 <memmove>:
 8005dc0:	4288      	cmp	r0, r1
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	eb01 0402 	add.w	r4, r1, r2
 8005dc8:	d902      	bls.n	8005dd0 <memmove+0x10>
 8005dca:	4284      	cmp	r4, r0
 8005dcc:	4623      	mov	r3, r4
 8005dce:	d807      	bhi.n	8005de0 <memmove+0x20>
 8005dd0:	1e43      	subs	r3, r0, #1
 8005dd2:	42a1      	cmp	r1, r4
 8005dd4:	d008      	beq.n	8005de8 <memmove+0x28>
 8005dd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005dda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dde:	e7f8      	b.n	8005dd2 <memmove+0x12>
 8005de0:	4601      	mov	r1, r0
 8005de2:	4402      	add	r2, r0
 8005de4:	428a      	cmp	r2, r1
 8005de6:	d100      	bne.n	8005dea <memmove+0x2a>
 8005de8:	bd10      	pop	{r4, pc}
 8005dea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005df2:	e7f7      	b.n	8005de4 <memmove+0x24>

08005df4 <_free_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	4605      	mov	r5, r0
 8005df8:	2900      	cmp	r1, #0
 8005dfa:	d043      	beq.n	8005e84 <_free_r+0x90>
 8005dfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e00:	1f0c      	subs	r4, r1, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	bfb8      	it	lt
 8005e06:	18e4      	addlt	r4, r4, r3
 8005e08:	f000 f8d0 	bl	8005fac <__malloc_lock>
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <_free_r+0x94>)
 8005e0e:	6813      	ldr	r3, [r2, #0]
 8005e10:	4610      	mov	r0, r2
 8005e12:	b933      	cbnz	r3, 8005e22 <_free_r+0x2e>
 8005e14:	6063      	str	r3, [r4, #4]
 8005e16:	6014      	str	r4, [r2, #0]
 8005e18:	4628      	mov	r0, r5
 8005e1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e1e:	f000 b8cb 	b.w	8005fb8 <__malloc_unlock>
 8005e22:	42a3      	cmp	r3, r4
 8005e24:	d90a      	bls.n	8005e3c <_free_r+0x48>
 8005e26:	6821      	ldr	r1, [r4, #0]
 8005e28:	1862      	adds	r2, r4, r1
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	bf01      	itttt	eq
 8005e2e:	681a      	ldreq	r2, [r3, #0]
 8005e30:	685b      	ldreq	r3, [r3, #4]
 8005e32:	1852      	addeq	r2, r2, r1
 8005e34:	6022      	streq	r2, [r4, #0]
 8005e36:	6063      	str	r3, [r4, #4]
 8005e38:	6004      	str	r4, [r0, #0]
 8005e3a:	e7ed      	b.n	8005e18 <_free_r+0x24>
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	b10b      	cbz	r3, 8005e46 <_free_r+0x52>
 8005e42:	42a3      	cmp	r3, r4
 8005e44:	d9fa      	bls.n	8005e3c <_free_r+0x48>
 8005e46:	6811      	ldr	r1, [r2, #0]
 8005e48:	1850      	adds	r0, r2, r1
 8005e4a:	42a0      	cmp	r0, r4
 8005e4c:	d10b      	bne.n	8005e66 <_free_r+0x72>
 8005e4e:	6820      	ldr	r0, [r4, #0]
 8005e50:	4401      	add	r1, r0
 8005e52:	1850      	adds	r0, r2, r1
 8005e54:	4283      	cmp	r3, r0
 8005e56:	6011      	str	r1, [r2, #0]
 8005e58:	d1de      	bne.n	8005e18 <_free_r+0x24>
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	4401      	add	r1, r0
 8005e60:	6011      	str	r1, [r2, #0]
 8005e62:	6053      	str	r3, [r2, #4]
 8005e64:	e7d8      	b.n	8005e18 <_free_r+0x24>
 8005e66:	d902      	bls.n	8005e6e <_free_r+0x7a>
 8005e68:	230c      	movs	r3, #12
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	e7d4      	b.n	8005e18 <_free_r+0x24>
 8005e6e:	6820      	ldr	r0, [r4, #0]
 8005e70:	1821      	adds	r1, r4, r0
 8005e72:	428b      	cmp	r3, r1
 8005e74:	bf01      	itttt	eq
 8005e76:	6819      	ldreq	r1, [r3, #0]
 8005e78:	685b      	ldreq	r3, [r3, #4]
 8005e7a:	1809      	addeq	r1, r1, r0
 8005e7c:	6021      	streq	r1, [r4, #0]
 8005e7e:	6063      	str	r3, [r4, #4]
 8005e80:	6054      	str	r4, [r2, #4]
 8005e82:	e7c9      	b.n	8005e18 <_free_r+0x24>
 8005e84:	bd38      	pop	{r3, r4, r5, pc}
 8005e86:	bf00      	nop
 8005e88:	20000384 	.word	0x20000384

08005e8c <_malloc_r>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	1ccd      	adds	r5, r1, #3
 8005e90:	f025 0503 	bic.w	r5, r5, #3
 8005e94:	3508      	adds	r5, #8
 8005e96:	2d0c      	cmp	r5, #12
 8005e98:	bf38      	it	cc
 8005e9a:	250c      	movcc	r5, #12
 8005e9c:	2d00      	cmp	r5, #0
 8005e9e:	4606      	mov	r6, r0
 8005ea0:	db01      	blt.n	8005ea6 <_malloc_r+0x1a>
 8005ea2:	42a9      	cmp	r1, r5
 8005ea4:	d903      	bls.n	8005eae <_malloc_r+0x22>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	6033      	str	r3, [r6, #0]
 8005eaa:	2000      	movs	r0, #0
 8005eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eae:	f000 f87d 	bl	8005fac <__malloc_lock>
 8005eb2:	4921      	ldr	r1, [pc, #132]	; (8005f38 <_malloc_r+0xac>)
 8005eb4:	680a      	ldr	r2, [r1, #0]
 8005eb6:	4614      	mov	r4, r2
 8005eb8:	b99c      	cbnz	r4, 8005ee2 <_malloc_r+0x56>
 8005eba:	4f20      	ldr	r7, [pc, #128]	; (8005f3c <_malloc_r+0xb0>)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	b923      	cbnz	r3, 8005eca <_malloc_r+0x3e>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f000 f862 	bl	8005f8c <_sbrk_r>
 8005ec8:	6038      	str	r0, [r7, #0]
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f000 f85d 	bl	8005f8c <_sbrk_r>
 8005ed2:	1c43      	adds	r3, r0, #1
 8005ed4:	d123      	bne.n	8005f1e <_malloc_r+0x92>
 8005ed6:	230c      	movs	r3, #12
 8005ed8:	4630      	mov	r0, r6
 8005eda:	6033      	str	r3, [r6, #0]
 8005edc:	f000 f86c 	bl	8005fb8 <__malloc_unlock>
 8005ee0:	e7e3      	b.n	8005eaa <_malloc_r+0x1e>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	1b5b      	subs	r3, r3, r5
 8005ee6:	d417      	bmi.n	8005f18 <_malloc_r+0x8c>
 8005ee8:	2b0b      	cmp	r3, #11
 8005eea:	d903      	bls.n	8005ef4 <_malloc_r+0x68>
 8005eec:	6023      	str	r3, [r4, #0]
 8005eee:	441c      	add	r4, r3
 8005ef0:	6025      	str	r5, [r4, #0]
 8005ef2:	e004      	b.n	8005efe <_malloc_r+0x72>
 8005ef4:	6863      	ldr	r3, [r4, #4]
 8005ef6:	42a2      	cmp	r2, r4
 8005ef8:	bf0c      	ite	eq
 8005efa:	600b      	streq	r3, [r1, #0]
 8005efc:	6053      	strne	r3, [r2, #4]
 8005efe:	4630      	mov	r0, r6
 8005f00:	f000 f85a 	bl	8005fb8 <__malloc_unlock>
 8005f04:	f104 000b 	add.w	r0, r4, #11
 8005f08:	1d23      	adds	r3, r4, #4
 8005f0a:	f020 0007 	bic.w	r0, r0, #7
 8005f0e:	1ac2      	subs	r2, r0, r3
 8005f10:	d0cc      	beq.n	8005eac <_malloc_r+0x20>
 8005f12:	1a1b      	subs	r3, r3, r0
 8005f14:	50a3      	str	r3, [r4, r2]
 8005f16:	e7c9      	b.n	8005eac <_malloc_r+0x20>
 8005f18:	4622      	mov	r2, r4
 8005f1a:	6864      	ldr	r4, [r4, #4]
 8005f1c:	e7cc      	b.n	8005eb8 <_malloc_r+0x2c>
 8005f1e:	1cc4      	adds	r4, r0, #3
 8005f20:	f024 0403 	bic.w	r4, r4, #3
 8005f24:	42a0      	cmp	r0, r4
 8005f26:	d0e3      	beq.n	8005ef0 <_malloc_r+0x64>
 8005f28:	1a21      	subs	r1, r4, r0
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	f000 f82e 	bl	8005f8c <_sbrk_r>
 8005f30:	3001      	adds	r0, #1
 8005f32:	d1dd      	bne.n	8005ef0 <_malloc_r+0x64>
 8005f34:	e7cf      	b.n	8005ed6 <_malloc_r+0x4a>
 8005f36:	bf00      	nop
 8005f38:	20000384 	.word	0x20000384
 8005f3c:	20000388 	.word	0x20000388

08005f40 <_realloc_r>:
 8005f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f42:	4607      	mov	r7, r0
 8005f44:	4614      	mov	r4, r2
 8005f46:	460e      	mov	r6, r1
 8005f48:	b921      	cbnz	r1, 8005f54 <_realloc_r+0x14>
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f50:	f7ff bf9c 	b.w	8005e8c <_malloc_r>
 8005f54:	b922      	cbnz	r2, 8005f60 <_realloc_r+0x20>
 8005f56:	f7ff ff4d 	bl	8005df4 <_free_r>
 8005f5a:	4625      	mov	r5, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f60:	f000 f830 	bl	8005fc4 <_malloc_usable_size_r>
 8005f64:	42a0      	cmp	r0, r4
 8005f66:	d20f      	bcs.n	8005f88 <_realloc_r+0x48>
 8005f68:	4621      	mov	r1, r4
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	f7ff ff8e 	bl	8005e8c <_malloc_r>
 8005f70:	4605      	mov	r5, r0
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d0f2      	beq.n	8005f5c <_realloc_r+0x1c>
 8005f76:	4631      	mov	r1, r6
 8005f78:	4622      	mov	r2, r4
 8005f7a:	f7ff fbd7 	bl	800572c <memcpy>
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4638      	mov	r0, r7
 8005f82:	f7ff ff37 	bl	8005df4 <_free_r>
 8005f86:	e7e9      	b.n	8005f5c <_realloc_r+0x1c>
 8005f88:	4635      	mov	r5, r6
 8005f8a:	e7e7      	b.n	8005f5c <_realloc_r+0x1c>

08005f8c <_sbrk_r>:
 8005f8c:	b538      	push	{r3, r4, r5, lr}
 8005f8e:	2300      	movs	r3, #0
 8005f90:	4d05      	ldr	r5, [pc, #20]	; (8005fa8 <_sbrk_r+0x1c>)
 8005f92:	4604      	mov	r4, r0
 8005f94:	4608      	mov	r0, r1
 8005f96:	602b      	str	r3, [r5, #0]
 8005f98:	f7fc fd4e 	bl	8002a38 <_sbrk>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_sbrk_r+0x1a>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_sbrk_r+0x1a>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	200011d0 	.word	0x200011d0

08005fac <__malloc_lock>:
 8005fac:	4801      	ldr	r0, [pc, #4]	; (8005fb4 <__malloc_lock+0x8>)
 8005fae:	f000 b811 	b.w	8005fd4 <__retarget_lock_acquire_recursive>
 8005fb2:	bf00      	nop
 8005fb4:	200011d8 	.word	0x200011d8

08005fb8 <__malloc_unlock>:
 8005fb8:	4801      	ldr	r0, [pc, #4]	; (8005fc0 <__malloc_unlock+0x8>)
 8005fba:	f000 b80c 	b.w	8005fd6 <__retarget_lock_release_recursive>
 8005fbe:	bf00      	nop
 8005fc0:	200011d8 	.word	0x200011d8

08005fc4 <_malloc_usable_size_r>:
 8005fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc8:	1f18      	subs	r0, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bfbc      	itt	lt
 8005fce:	580b      	ldrlt	r3, [r1, r0]
 8005fd0:	18c0      	addlt	r0, r0, r3
 8005fd2:	4770      	bx	lr

08005fd4 <__retarget_lock_acquire_recursive>:
 8005fd4:	4770      	bx	lr

08005fd6 <__retarget_lock_release_recursive>:
 8005fd6:	4770      	bx	lr

08005fd8 <_init>:
 8005fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fda:	bf00      	nop
 8005fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fde:	bc08      	pop	{r3}
 8005fe0:	469e      	mov	lr, r3
 8005fe2:	4770      	bx	lr

08005fe4 <_fini>:
 8005fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe6:	bf00      	nop
 8005fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fea:	bc08      	pop	{r3}
 8005fec:	469e      	mov	lr, r3
 8005fee:	4770      	bx	lr
