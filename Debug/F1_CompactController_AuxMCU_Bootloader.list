
F1_CompactController_AuxMCU_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  08004b10  08004b10  00014b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005098  08005098  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005098  08005098  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005098  08005098  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080050a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e68  20000078  08005114  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee0  08005114  00021ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131d3  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316f  00000000  00000000  00033270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000363e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00037230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc6d  00000000  00000000  00037f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f67  00000000  00000000  00053bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009802f  00000000  00000000  00066b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000feb6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc0  00000000  00000000  000febc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	00000000 	.word	0x00000000
 8000204:	08004af8 	.word	0x08004af8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000007c 	.word	0x2000007c
 8000220:	08004af8 	.word	0x08004af8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <crc_ccitt_byte>:

/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
static inline unsigned short crc_ccitt_byte(uint16_t crc, const uint8_t c)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	80fb      	strh	r3, [r7, #6]
 8000240:	4613      	mov	r3, r2
 8000242:	717b      	strb	r3, [r7, #5]
	return (crc >> 8) ^ crc_ccitt_table[(crc ^ c) & 0xff];
 8000244:	88fb      	ldrh	r3, [r7, #6]
 8000246:	0a1b      	lsrs	r3, r3, #8
 8000248:	b29a      	uxth	r2, r3
 800024a:	88f9      	ldrh	r1, [r7, #6]
 800024c:	797b      	ldrb	r3, [r7, #5]
 800024e:	404b      	eors	r3, r1
 8000250:	b2db      	uxtb	r3, r3
 8000252:	4905      	ldr	r1, [pc, #20]	; (8000268 <crc_ccitt_byte+0x34>)
 8000254:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000258:	4053      	eors	r3, r2
 800025a:	b29b      	uxth	r3, r3
}
 800025c:	4618      	mov	r0, r3
 800025e:	370c      	adds	r7, #12
 8000260:	46bd      	mov	sp, r7
 8000262:	bc80      	pop	{r7}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	08004d28 	.word	0x08004d28

0800026c <crc16>:
unsigned short crc16(unsigned char *data_p, unsigned short length)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	807b      	strh	r3, [r7, #2]
	unsigned int crc = 0x0000;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
	while (length--)
 800027c:	e00a      	b.n	8000294 <crc16+0x28>
		crc = crc_ccitt_byte(crc, *data_p++);
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	b298      	uxth	r0, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	607a      	str	r2, [r7, #4]
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	4619      	mov	r1, r3
 800028c:	f7ff ffd2 	bl	8000234 <crc_ccitt_byte>
 8000290:	4603      	mov	r3, r0
 8000292:	60fb      	str	r3, [r7, #12]
	while (length--)
 8000294:	887b      	ldrh	r3, [r7, #2]
 8000296:	1e5a      	subs	r2, r3, #1
 8000298:	807a      	strh	r2, [r7, #2]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1ef      	bne.n	800027e <crc16+0x12>
	return (crc>>8) | (crc<<8);;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	0a1b      	lsrs	r3, r3, #8
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	b29b      	uxth	r3, r3
 80002a8:	021b      	lsls	r3, r3, #8
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4313      	orrs	r3, r2
 80002ae:	b29b      	uxth	r3, r3
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3710      	adds	r7, #16
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_DMA_Init+0x58>)
 80002c0:	695b      	ldr	r3, [r3, #20]
 80002c2:	4a13      	ldr	r2, [pc, #76]	; (8000310 <MX_DMA_Init+0x58>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6153      	str	r3, [r2, #20]
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_DMA_Init+0x58>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f003 0301 	and.w	r3, r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
 80002d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2100      	movs	r1, #0
 80002da:	200c      	movs	r0, #12
 80002dc:	f001 fbbf 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80002e0:	200c      	movs	r0, #12
 80002e2:	f001 fbd8 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2100      	movs	r1, #0
 80002ea:	200d      	movs	r0, #13
 80002ec:	f001 fbb7 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80002f0:	200d      	movs	r0, #13
 80002f2:	f001 fbd0 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	200e      	movs	r0, #14
 80002fc:	f001 fbaf 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000300:	200e      	movs	r0, #14
 8000302:	f001 fbc8 	bl	8001a96 <HAL_NVIC_EnableIRQ>

}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <FLASH_If_Init>:
 * @brief  Unlocks Flash for write access
 * @param  None
 * @retval None
 */
void FLASH_If_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	/* Unlock the Program memory */
	HAL_FLASH_Unlock();
 8000318:	f002 f85a 	bl	80023d0 <HAL_FLASH_Unlock>

	/* Clear all FLASH flags */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPERR);
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <FLASH_If_Init+0x18>)
 800031e:	2234      	movs	r2, #52	; 0x34
 8000320:	60da      	str	r2, [r3, #12]
	/* Unlock the Program memory */
	HAL_FLASH_Lock();
 8000322:	f002 f87b 	bl	800241c <HAL_FLASH_Lock>
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40022000 	.word	0x40022000

08000330 <FLASH_If_Erase>:
 * @param  start: start of user flash area
 * @retval FLASHIF_OK : user flash area successfully erased
 *         FLASHIF_ERASEKO : error occurred
 */
uint32_t FLASH_If_Erase(uint32_t start,uint32_t length)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	; 0x28
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	uint32_t NbrOfPages = 0;
 800033a:	2300      	movs	r3, #0
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PageError = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef status = HAL_OK;
 8000342:	2300      	movs	r3, #0
 8000344:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000348:	f002 f842 	bl	80023d0 <HAL_FLASH_Unlock>

	/* Get the sector where start the user flash area */
	NbrOfPages = length/FLASH_PAGE_SIZE;
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	0adb      	lsrs	r3, r3, #11
 8000350:	627b      	str	r3, [r7, #36]	; 0x24

	pEraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000352:	2300      	movs	r3, #0
 8000354:	60fb      	str	r3, [r7, #12]
	pEraseInit.PageAddress = start;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	617b      	str	r3, [r7, #20]
	//pEraseInit.Banks = FLASH_BANK_1;
	pEraseInit.NbPages = NbrOfPages;
 800035a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800035c:	61bb      	str	r3, [r7, #24]
	status = HAL_FLASHEx_Erase(&pEraseInit, &PageError);
 800035e:	f107 021c 	add.w	r2, r7, #28
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	4611      	mov	r1, r2
 8000368:	4618      	mov	r0, r3
 800036a:	f002 f8fd 	bl	8002568 <HAL_FLASHEx_Erase>
 800036e:	4603      	mov	r3, r0
 8000370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000374:	f002 f852 	bl	800241c <HAL_FLASH_Lock>

	if (status != HAL_OK)
 8000378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <FLASH_If_Erase+0x54>
	{
		/* Error occurred while page erase */
		return FLASHIF_ERASEKO;
 8000380:	2301      	movs	r3, #1
 8000382:	e000      	b.n	8000386 <FLASH_If_Erase+0x56>
	}

	return FLASHIF_OK;
 8000384:	2300      	movs	r3, #0
}
 8000386:	4618      	mov	r0, r3
 8000388:	3728      	adds	r7, #40	; 0x28
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	4b43      	ldr	r3, [pc, #268]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a42      	ldr	r2, [pc, #264]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b40      	ldr	r3, [pc, #256]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0310 	and.w	r3, r3, #16
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003bc:	4b3d      	ldr	r3, [pc, #244]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a3c      	ldr	r2, [pc, #240]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b3a      	ldr	r3, [pc, #232]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b37      	ldr	r3, [pc, #220]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a36      	ldr	r2, [pc, #216]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b34      	ldr	r3, [pc, #208]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b31      	ldr	r3, [pc, #196]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a30      	ldr	r2, [pc, #192]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b2e      	ldr	r3, [pc, #184]	; (80004b4 <MX_GPIO_Init+0x124>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f640 110c 	movw	r1, #2316	; 0x90c
 800040a:	482b      	ldr	r0, [pc, #172]	; (80004b8 <MX_GPIO_Init+0x128>)
 800040c:	f002 fae8 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT_LED1_Pin|INT_LED2_Pin, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000416:	4829      	ldr	r0, [pc, #164]	; (80004bc <MX_GPIO_Init+0x12c>)
 8000418:	f002 fae2 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000422:	4827      	ldr	r0, [pc, #156]	; (80004c0 <MX_GPIO_Init+0x130>)
 8000424:	f002 fadc 	bl	80029e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin;
 8000428:	f640 130c 	movw	r3, #2316	; 0x90c
 800042c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
 8000434:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	2302      	movs	r3, #2
 8000438:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	4619      	mov	r1, r3
 8000440:	481d      	ldr	r0, [pc, #116]	; (80004b8 <MX_GPIO_Init+0x128>)
 8000442:	f002 f939 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_MODE_SEL_Pin;
 8000446:	2320      	movs	r3, #32
 8000448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800044a:	4b1e      	ldr	r3, [pc, #120]	; (80004c4 <MX_GPIO_Init+0x134>)
 800044c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STM_MODE_SEL_GPIO_Port, &GPIO_InitStruct);
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4619      	mov	r1, r3
 8000458:	4818      	ldr	r0, [pc, #96]	; (80004bc <MX_GPIO_Init+0x12c>)
 800045a:	f002 f92d 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INT_LED1_Pin|INT_LED2_Pin;
 800045e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2302      	movs	r3, #2
 800046e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000470:	f107 0310 	add.w	r3, r7, #16
 8000474:	4619      	mov	r1, r3
 8000476:	4811      	ldr	r0, [pc, #68]	; (80004bc <MX_GPIO_Init+0x12c>)
 8000478:	f002 f91e 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 800047c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2302      	movs	r3, #2
 800048c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	480a      	ldr	r0, [pc, #40]	; (80004c0 <MX_GPIO_Init+0x130>)
 8000496:	f002 f90f 	bl	80026b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2100      	movs	r1, #0
 800049e:	2017      	movs	r0, #23
 80004a0:	f001 fadd 	bl	8001a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80004a4:	2017      	movs	r0, #23
 80004a6:	f001 faf6 	bl	8001a96 <HAL_NVIC_EnableIRQ>

}
 80004aa:	bf00      	nop
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010800 	.word	0x40010800
 80004bc:	40011000 	.word	0x40011000
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	10310000 	.word	0x10310000

080004c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004cc:	4b12      	ldr	r3, [pc, #72]	; (8000518 <MX_I2C1_Init+0x50>)
 80004ce:	4a13      	ldr	r2, [pc, #76]	; (800051c <MX_I2C1_Init+0x54>)
 80004d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_I2C1_Init+0x50>)
 80004d4:	4a12      	ldr	r2, [pc, #72]	; (8000520 <MX_I2C1_Init+0x58>)
 80004d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004d8:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <MX_I2C1_Init+0x50>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_I2C1_Init+0x50>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_I2C1_Init+0x50>)
 80004e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ec:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <MX_I2C1_Init+0x50>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_I2C1_Init+0x50>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <MX_I2C1_Init+0x50>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_I2C1_Init+0x50>)
 8000500:	2200      	movs	r2, #0
 8000502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <MX_I2C1_Init+0x50>)
 8000506:	f002 fab5 	bl	8002a74 <HAL_I2C_Init>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000510:	f000 f900 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000514:	bf00      	nop
 8000516:	bd80      	pop	{r7, pc}
 8000518:	200000b0 	.word	0x200000b0
 800051c:	40005400 	.word	0x40005400
 8000520:	00061a80 	.word	0x00061a80

08000524 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a15      	ldr	r2, [pc, #84]	; (8000594 <HAL_I2C_MspInit+0x70>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d123      	bne.n	800058c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <HAL_I2C_MspInit+0x74>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800055c:	23c0      	movs	r3, #192	; 0xc0
 800055e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000560:	2312      	movs	r3, #18
 8000562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <HAL_I2C_MspInit+0x78>)
 8000570:	f002 f8a2 	bl	80026b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000576:	69db      	ldr	r3, [r3, #28]
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_I2C_MspInit+0x74>)
 800057a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800057e:	61d3      	str	r3, [r2, #28]
 8000580:	4b05      	ldr	r3, [pc, #20]	; (8000598 <HAL_I2C_MspInit+0x74>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40005400 	.word	0x40005400
 8000598:	40021000 	.word	0x40021000
 800059c:	40010c00 	.word	0x40010c00

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f001 f922 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f822 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f7ff fef0 	bl	8000390 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005b0:	f7ff ff8a 	bl	80004c8 <MX_I2C1_Init>
  MX_DMA_Init();
 80005b4:	f7ff fe80 	bl	80002b8 <MX_DMA_Init>
  MX_SPI1_Init();
 80005b8:	f000 fe54 	bl	8001264 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80005bc:	f001 f812 	bl	80015e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  comms_set_mode();
 80005c0:	f000 f85c 	bl	800067c <comms_set_mode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dbprintf("Rota Compact Controller Auxiliary MCU Bootloader");
 80005c4:	4807      	ldr	r0, [pc, #28]	; (80005e4 <main+0x44>)
 80005c6:	f001 f8d9 	bl	800177c <dbprintf>
  gRunMode = RT_RunMode_BL;
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <main+0x48>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(g_comms_mode == COMMS_MODE_PDIO){
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <main+0x4c>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d102      	bne.n	80005de <main+0x3e>
	  		rt_get_io_values();
 80005d8:	f000 fe04 	bl	80011e4 <rt_get_io_values>
 80005dc:	e7f8      	b.n	80005d0 <main+0x30>
		}else{
			rt_bus_proto_bl_dt();
 80005de:	f000 fc91 	bl	8000f04 <rt_bus_proto_bl_dt>
	  if(g_comms_mode == COMMS_MODE_PDIO){
 80005e2:	e7f5      	b.n	80005d0 <main+0x30>
 80005e4:	08004b10 	.word	0x08004b10
 80005e8:	20000094 	.word	0x20000094
 80005ec:	20000096 	.word	0x20000096

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b090      	sub	sp, #64	; 0x40
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2228      	movs	r2, #40	; 0x28
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fe46 	bl	8004290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000612:	2301      	movs	r3, #1
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800062e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0318 	add.w	r3, r7, #24
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fb5f 	bl	8002cfc <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000644:	f000 f866 	bl	8000714 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2101      	movs	r1, #1
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fdca 	bl	80031fc <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800066e:	f000 f851 	bl	8000714 <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3740      	adds	r7, #64	; 0x40
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <comms_set_mode>:

/* USER CODE BEGIN 4 */

void comms_set_mode()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	SPI_DMA_Reset();
 8000680:	f000 fb0a 	bl	8000c98 <SPI_DMA_Reset>
	if (STM_MODE_SEL_GPIO_Port->IDR & STM_MODE_SEL_Pin){
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <comms_set_mode+0x4c>)
 8000686:	689b      	ldr	r3, [r3, #8]
 8000688:	f003 0320 	and.w	r3, r3, #32
 800068c:	2b00      	cmp	r3, #0
 800068e:	d00c      	beq.n	80006aa <comms_set_mode+0x2e>
		g_comms_mode = COMMS_MODE_CONF;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <comms_set_mode+0x50>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
		dbprintf("Conf Mode");
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <comms_set_mode+0x54>)
 8000698:	f001 f870 	bl	800177c <dbprintf>
		ERR_LED1_On();
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a2:	4809      	ldr	r0, [pc, #36]	; (80006c8 <comms_set_mode+0x4c>)
 80006a4:	f002 f99c 	bl	80029e0 <HAL_GPIO_WritePin>
	}else{
		g_comms_mode = COMMS_MODE_PDIO;
		dbprintf("PDIO Mode");
		ERR_LED1_Off();
	}
}
 80006a8:	e00b      	b.n	80006c2 <comms_set_mode+0x46>
		g_comms_mode = COMMS_MODE_PDIO;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <comms_set_mode+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
		dbprintf("PDIO Mode");
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <comms_set_mode+0x58>)
 80006b2:	f001 f863 	bl	800177c <dbprintf>
		ERR_LED1_Off();
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <comms_set_mode+0x4c>)
 80006be:	f002 f98f 	bl	80029e0 <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40011000 	.word	0x40011000
 80006cc:	20000096 	.word	0x20000096
 80006d0:	08004b44 	.word	0x08004b44
 80006d4:	08004b50 	.word	0x08004b50

080006d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
	comms_set_mode();
 80006e2:	f7ff ffcb 	bl	800067c <comms_set_mode>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	dbprintf("%s",__func__);
 80006f8:	4904      	ldr	r1, [pc, #16]	; (800070c <HAL_SPI_TxRxCpltCallback+0x1c>)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <HAL_SPI_TxRxCpltCallback+0x20>)
 80006fc:	f001 f83e 	bl	800177c <dbprintf>
	SPI_DMA_Reset();
 8000700:	f000 faca 	bl	8000c98 <SPI_DMA_Reset>
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	08004f28 	.word	0x08004f28
 8000710:	08004b5c 	.word	0x08004b5c

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000724:	f3bf 8f4f 	dsb	sy
}
 8000728:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <__NVIC_SystemReset+0x24>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000732:	4904      	ldr	r1, [pc, #16]	; (8000744 <__NVIC_SystemReset+0x24>)
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <__NVIC_SystemReset+0x28>)
 8000736:	4313      	orrs	r3, r2
 8000738:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800073a:	f3bf 8f4f 	dsb	sy
}
 800073e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <__NVIC_SystemReset+0x20>
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	05fa0004 	.word	0x05fa0004

0800074c <rt_bus_proto_frame_pack>:

/*============================================================================*/
/* Implementation of functions                                                */
/*============================================================================*/
void rt_bus_proto_frame_pack(tRT_Command_Packet sRT_Command_Packet, uint16_t *datalength)
{
 800074c:	b084      	sub	sp, #16
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	f107 0c10 	add.w	ip, r7, #16
 8000758:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint16_t cCRC = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	80fb      	strh	r3, [r7, #6]

	sRT_Command_Packet.stx = PRT_STX;
 8000760:	2301      	movs	r3, #1
 8000762:	743b      	strb	r3, [r7, #16]
	sRT_Command_Packet.address = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	827b      	strh	r3, [r7, #18]
	sRT_Command_Packet.len = (*datalength)+sizeof(sRT_Command_Packet.cmd);
 8000768:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	b29b      	uxth	r3, r3
 8000772:	82bb      	strh	r3, [r7, #20]

	cCRC =  crc16(&sRT_Command_Packet.address, (*datalength)+5);
 8000774:	f8d7 381c 	ldr.w	r3, [r7, #2076]	; 0x81c
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	3305      	adds	r3, #5
 800077c:	b29a      	uxth	r2, r3
 800077e:	f107 0312 	add.w	r3, r7, #18
 8000782:	4611      	mov	r1, r2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fd71 	bl	800026c <crc16>
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
	sRT_Command_Packet.crc = cCRC;
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	f8a7 3818 	strh.w	r3, [r7, #2072]	; 0x818
	sRT_Command_Packet.etx = PRT_ETX;
 8000794:	2303      	movs	r3, #3
 8000796:	f887 381a 	strb.w	r3, [r7, #2074]	; 0x81a

	int offset = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.stx,sizeof(sRT_Command_Packet.stx));
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	4a22      	ldr	r2, [pc, #136]	; (800082c <rt_bus_proto_frame_pack+0xe0>)
 80007a2:	4413      	add	r3, r2
 80007a4:	7c3a      	ldrb	r2, [r7, #16]
 80007a6:	701a      	strb	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.stx);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.address,sizeof(sRT_Command_Packet.address));
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	4a1e      	ldr	r2, [pc, #120]	; (800082c <rt_bus_proto_frame_pack+0xe0>)
 80007b2:	4413      	add	r3, r2
 80007b4:	8a7a      	ldrh	r2, [r7, #18]
 80007b6:	801a      	strh	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.address);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	3302      	adds	r3, #2
 80007bc:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.len,sizeof(sRT_Command_Packet.len));
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	4a1a      	ldr	r2, [pc, #104]	; (800082c <rt_bus_proto_frame_pack+0xe0>)
 80007c2:	4413      	add	r3, r2
 80007c4:	8aba      	ldrh	r2, [r7, #20]
 80007c6:	801a      	strh	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.len);
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	3302      	adds	r3, #2
 80007cc:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.cmd,sizeof(sRT_Command_Packet.cmd));
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	4a16      	ldr	r2, [pc, #88]	; (800082c <rt_bus_proto_frame_pack+0xe0>)
 80007d2:	4413      	add	r3, r2
 80007d4:	7dba      	ldrb	r2, [r7, #22]
 80007d6:	701a      	strb	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.cmd);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.data[0],(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd)));
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	4a12      	ldr	r2, [pc, #72]	; (800082c <rt_bus_proto_frame_pack+0xe0>)
 80007e2:	4413      	add	r3, r2
 80007e4:	8aba      	ldrh	r2, [r7, #20]
 80007e6:	3a01      	subs	r2, #1
 80007e8:	f107 0117 	add.w	r1, r7, #23
 80007ec:	4618      	mov	r0, r3
 80007ee:	f003 fd41 	bl	8004274 <memcpy>
	offset +=(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd));
 80007f2:	8abb      	ldrh	r3, [r7, #20]
 80007f4:	461a      	mov	r2, r3
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	4413      	add	r3, r2
 80007fa:	3b01      	subs	r3, #1
 80007fc:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.crc,sizeof(sRT_Command_Packet.crc));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <rt_bus_proto_frame_pack+0xe0>)
 8000802:	4413      	add	r3, r2
 8000804:	f8b7 2818 	ldrh.w	r2, [r7, #2072]	; 0x818
 8000808:	801a      	strh	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.crc);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	3302      	adds	r3, #2
 800080e:	603b      	str	r3, [r7, #0]
	memcpy(&gSPI_Tx_Buf[offset],&sRT_Command_Packet.etx,sizeof(sRT_Command_Packet.etx));
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	4a06      	ldr	r2, [pc, #24]	; (800082c <rt_bus_proto_frame_pack+0xe0>)
 8000814:	4413      	add	r3, r2
 8000816:	f897 281a 	ldrb.w	r2, [r7, #2074]	; 0x81a
 800081a:	701a      	strb	r2, [r3, #0]
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000826:	b004      	add	sp, #16
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000124 	.word	0x20000124

08000830 <rt_bus_proto_pack_parser>:

tRT_Command_Packet rt_bus_proto_pack_parser(uint8_t *data){
 8000830:	b580      	push	{r7, lr}
 8000832:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8000836:	af00      	add	r7, sp, #0
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	6018      	str	r0, [r3, #0]
 800083c:	463b      	mov	r3, r7
 800083e:	6019      	str	r1, [r3, #0]

	tRT_Command_Packet sRT_Command_Packet;
	int offset = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 8000846:	463b      	mov	r3, r7
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	781a      	ldrb	r2, [r3, #0]
	memcpy(&sRT_Command_Packet.stx,&data[0],sizeof(sRT_Command_Packet.stx));
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	701a      	strb	r2, [r3, #0]
	offset +=sizeof(sRT_Command_Packet.stx);
 8000852:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000856:	3301      	adds	r3, #1
 8000858:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.address,&data[offset],sizeof(sRT_Command_Packet.address));
 800085c:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000860:	463a      	mov	r2, r7
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	4413      	add	r3, r2
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	b29a      	uxth	r2, r3
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	805a      	strh	r2, [r3, #2]
	offset +=sizeof(sRT_Command_Packet.address);
 8000870:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000874:	3302      	adds	r3, #2
 8000876:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.len,&data[offset],sizeof(sRT_Command_Packet.len));
 800087a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800087e:	463a      	mov	r2, r7
 8000880:	6812      	ldr	r2, [r2, #0]
 8000882:	4413      	add	r3, r2
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	b29a      	uxth	r2, r3
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	809a      	strh	r2, [r3, #4]
	offset +=sizeof(sRT_Command_Packet.len);
 800088e:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000892:	3302      	adds	r3, #2
 8000894:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.cmd,&data[offset],sizeof(sRT_Command_Packet.cmd));
 8000898:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800089c:	463a      	mov	r2, r7
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	719a      	strb	r2, [r3, #6]
	offset +=sizeof(sRT_Command_Packet.cmd);
 80008aa:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80008ae:	3301      	adds	r3, #1
 80008b0:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.data,&data[offset],(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd)));
 80008b4:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80008b8:	463a      	mov	r2, r7
 80008ba:	6812      	ldr	r2, [r2, #0]
 80008bc:	18d1      	adds	r1, r2, r3
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	889b      	ldrh	r3, [r3, #4]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	3307      	adds	r3, #7
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 fcd1 	bl	8004274 <memcpy>
	offset +=(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd));
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	889b      	ldrh	r3, [r3, #4]
 80008d8:	461a      	mov	r2, r3
 80008da:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80008de:	4413      	add	r3, r2
 80008e0:	3b01      	subs	r3, #1
 80008e2:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.crc,&data[offset],sizeof(sRT_Command_Packet.crc));
 80008e6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80008ea:	463a      	mov	r2, r7
 80008ec:	6812      	ldr	r2, [r2, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	f107 0308 	add.w	r3, r7, #8
 80008f8:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
	offset +=sizeof(sRT_Command_Packet.crc);
 80008fc:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000900:	3302      	adds	r3, #2
 8000902:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
	memcpy(&sRT_Command_Packet.etx,&data[offset],sizeof(sRT_Command_Packet.etx));
 8000906:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800090a:	463a      	mov	r2, r7
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	4413      	add	r3, r2
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	f883 280a 	strb.w	r2, [r3, #2058]	; 0x80a
	return sRT_Command_Packet;
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	f640 030c 	movw	r3, #2060	; 0x80c
 800092a:	461a      	mov	r2, r3
 800092c:	f003 fca2 	bl	8004274 <memcpy>
}
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	6818      	ldr	r0, [r3, #0]
 8000934:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <rt_bus_cmd_ping_handler>:

uint32_t rt_bus_cmd_ping_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	460b      	mov	r3, r1
 800094a:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 800094c:	490b      	ldr	r1, [pc, #44]	; (800097c <rt_bus_cmd_ping_handler+0x40>)
 800094e:	480c      	ldr	r0, [pc, #48]	; (8000980 <rt_bus_cmd_ping_handler+0x44>)
 8000950:	f000 ff14 	bl	800177c <dbprintf>
	if (rxLen != 1)
 8000954:	897b      	ldrh	r3, [r7, #10]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d001      	beq.n	800095e <rt_bus_cmd_ping_handler+0x22>
	{
		return RT_PROTO_FrameError;
 800095a:	2301      	movs	r3, #1
 800095c:	e009      	b.n	8000972 <rt_bus_cmd_ping_handler+0x36>
	}

	txData[0] = rxData[0] + 1;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	701a      	strb	r2, [r3, #0]
	*txLen = 1;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	2201      	movs	r2, #1
 800096e:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08004f7c 	.word	0x08004f7c
 8000980:	08004b60 	.word	0x08004b60

08000984 <rt_bus_cmd_reset>:

uint32_t rt_bus_cmd_reset (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	460b      	mov	r3, r1
 8000992:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 8000994:	4902      	ldr	r1, [pc, #8]	; (80009a0 <rt_bus_cmd_reset+0x1c>)
 8000996:	4803      	ldr	r0, [pc, #12]	; (80009a4 <rt_bus_cmd_reset+0x20>)
 8000998:	f000 fef0 	bl	800177c <dbprintf>
	/*iapMailbox[0] = 0;
	iapMailbox[1] = 0;*/
	NVIC_SystemReset();
 800099c:	f7ff fec0 	bl	8000720 <__NVIC_SystemReset>
 80009a0:	08004f94 	.word	0x08004f94
 80009a4:	08004b60 	.word	0x08004b60

080009a8 <rt_bus_cmd_get_runmode_handler>:
	return RT_PROTO_OK;
}


uint32_t rt_bus_cmd_get_runmode_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	460b      	mov	r3, r1
 80009b6:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 80009b8:	4909      	ldr	r1, [pc, #36]	; (80009e0 <rt_bus_cmd_get_runmode_handler+0x38>)
 80009ba:	480a      	ldr	r0, [pc, #40]	; (80009e4 <rt_bus_cmd_get_runmode_handler+0x3c>)
 80009bc:	f000 fede 	bl	800177c <dbprintf>
	txData[0] = gRunMode;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <rt_bus_cmd_get_runmode_handler+0x40>)
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	701a      	strb	r2, [r3, #0]
	(*txLen) = (*txLen)+1;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	3301      	adds	r3, #1
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	801a      	strh	r2, [r3, #0]
	return RT_PROTO_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	08004fa8 	.word	0x08004fa8
 80009e4:	08004b60 	.word	0x08004b60
 80009e8:	20000094 	.word	0x20000094

080009ec <get_mem_type>:
 *txLen = length;
	return RT_PROTO_OK;
}*/

uint32_t get_mem_type(uint32_t address)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	if ((address >= FLASH_START_ADDRESS) & (address<=FLASH_END_ADDRESS))
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f06f 4278 	mvn.w	r2, #4160749568	; 0xf8000000
 80009fa:	4293      	cmp	r3, r2
 80009fc:	bf8c      	ite	hi
 80009fe:	2301      	movhi	r3, #1
 8000a00:	2300      	movls	r3, #0
 8000a02:	b2da      	uxtb	r2, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4913      	ldr	r1, [pc, #76]	; (8000a54 <get_mem_type+0x68>)
 8000a08:	428b      	cmp	r3, r1
 8000a0a:	bf94      	ite	ls
 8000a0c:	2301      	movls	r3, #1
 8000a0e:	2300      	movhi	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	4013      	ands	r3, r2
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <get_mem_type+0x32>
	return MEM_TYPE_FLASH;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e015      	b.n	8000a4a <get_mem_type+0x5e>
	else if ((address >= RAM_START_ADDRESS) & (address <= RAM_END_ADDRESS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8000a24:	4293      	cmp	r3, r2
 8000a26:	bf8c      	ite	hi
 8000a28:	2301      	movhi	r3, #1
 8000a2a:	2300      	movls	r3, #0
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4909      	ldr	r1, [pc, #36]	; (8000a58 <get_mem_type+0x6c>)
 8000a32:	428b      	cmp	r3, r1
 8000a34:	bf94      	ite	ls
 8000a36:	2301      	movls	r3, #1
 8000a38:	2300      	movhi	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <get_mem_type+0x5c>
	return MEM_TYPE_RAM;
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <get_mem_type+0x5e>
	else
	return MEM_TYPE_UNK;
 8000a48:	2303      	movs	r3, #3
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	08040000 	.word	0x08040000
 8000a58:	2000c000 	.word	0x2000c000

08000a5c <rt_bus_cmd_bl_stay>:

uint32_t rt_bus_cmd_bl_stay (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	607a      	str	r2, [r7, #4]
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 8000a6c:	4905      	ldr	r1, [pc, #20]	; (8000a84 <rt_bus_cmd_bl_stay+0x28>)
 8000a6e:	4806      	ldr	r0, [pc, #24]	; (8000a88 <rt_bus_cmd_bl_stay+0x2c>)
 8000a70:	f000 fe84 	bl	800177c <dbprintf>
	gStayInBootloader = 1;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <rt_bus_cmd_bl_stay+0x30>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
	return RT_PROTO_OK;
 8000a7a:	2300      	movs	r3, #0
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08004fc8 	.word	0x08004fc8
 8000a88:	08004b60 	.word	0x08004b60
 8000a8c:	20000095 	.word	0x20000095

08000a90 <rt_bus_cmd_bl_write_handler>:

uint32_t rt_bus_cmd_bl_write_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	; 0x38
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 8000aa0:	492d      	ldr	r1, [pc, #180]	; (8000b58 <rt_bus_cmd_bl_write_handler+0xc8>)
 8000aa2:	482e      	ldr	r0, [pc, #184]	; (8000b5c <rt_bus_cmd_bl_write_handler+0xcc>)
 8000aa4:	f000 fe6a 	bl	800177c <dbprintf>
	uint32_t writeaddress;
	uint32_t mtype;
	uint8_t decBuffer[16];
	uint8_t *iv;
	uint8_t *data;
	if (rxLen != 1060)
 8000aa8:	897b      	ldrh	r3, [r7, #10]
 8000aaa:	f240 4224 	movw	r2, #1060	; 0x424
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d001      	beq.n	8000ab6 <rt_bus_cmd_bl_write_handler+0x26>
		return RT_PROTO_DataError;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	e04c      	b.n	8000b50 <rt_bus_cmd_bl_write_handler+0xc0>
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]

	memcpy(&writeaddress,&rxData[0],4);
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
	// Addr       IV      [ Magic     Data ]
	//  4         16      [  4        1024 ]
	//				      [ Encrypted      ]
	// 0..3      4..19	  [ 20..23	..    1060 ]

	iv = &rxData[4];
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3304      	adds	r3, #4
 8000ac0:	637b      	str	r3, [r7, #52]	; 0x34
	data = &rxData[20];
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	3314      	adds	r3, #20
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30

	//AES_CBC_decrypt_buffer(decBuffer,data,16,AES_KEY,iv);
	if (memcmp("ROTA",&decBuffer[0],4) != 0){
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2204      	movs	r2, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4823      	ldr	r0, [pc, #140]	; (8000b60 <rt_bus_cmd_bl_write_handler+0xd0>)
 8000ad2:	f003 fbc1 	bl	8004258 <memcmp>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <rt_bus_cmd_bl_write_handler+0x50>
		return RT_PROTO_DataError;
 8000adc:	2302      	movs	r3, #2
 8000ade:	e037      	b.n	8000b50 <rt_bus_cmd_bl_write_handler+0xc0>
	}
	if (memcmp("ROTA",&decBuffer[12],4) != 0){
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	330c      	adds	r3, #12
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481d      	ldr	r0, [pc, #116]	; (8000b60 <rt_bus_cmd_bl_write_handler+0xd0>)
 8000aec:	f003 fbb4 	bl	8004258 <memcmp>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <rt_bus_cmd_bl_write_handler+0x6a>
		return RT_PROTO_DataError;
 8000af6:	2302      	movs	r3, #2
 8000af8:	e02a      	b.n	8000b50 <rt_bus_cmd_bl_write_handler+0xc0>
	}

	//AES_CBC_decrypt_buffer(flashBuffer,data,1040,AES_KEY,iv);
	mtype = get_mem_type(writeaddress);
 8000afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff75 	bl	80009ec <get_mem_type>
 8000b02:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (mtype == MEM_TYPE_FLASH)
 8000b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d10f      	bne.n	8000b2a <rt_bus_cmd_bl_write_handler+0x9a>
	{
		//FLASH_If_Init();
		uint32_t ret = 0;/*FLASH_If_Write(writeaddress,(uint32_t *)&flashBuffer[16],1024/4);*/
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (ret == HAL_OK){
 8000b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d105      	bne.n	8000b20 <rt_bus_cmd_bl_write_handler+0x90>
			dbprintf("Writing firmware to 0x%08X...",writeaddress);
 8000b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	4812      	ldr	r0, [pc, #72]	; (8000b64 <rt_bus_cmd_bl_write_handler+0xd4>)
 8000b1a:	f000 fe2f 	bl	800177c <dbprintf>
 8000b1e:	e016      	b.n	8000b4e <rt_bus_cmd_bl_write_handler+0xbe>
		}else{
			dbprintf("Write error!!!");
 8000b20:	4811      	ldr	r0, [pc, #68]	; (8000b68 <rt_bus_cmd_bl_write_handler+0xd8>)
 8000b22:	f000 fe2b 	bl	800177c <dbprintf>
			return RT_PROTO_ExcError;
 8000b26:	2304      	movs	r3, #4
 8000b28:	e012      	b.n	8000b50 <rt_bus_cmd_bl_write_handler+0xc0>
		}
	}
	else if (mtype == MEM_TYPE_RAM)
 8000b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d109      	bne.n	8000b44 <rt_bus_cmd_bl_write_handler+0xb4>
	{
		memcpy((uint8_t *)writeaddress,&rxData[4],1024);
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	4618      	mov	r0, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3304      	adds	r3, #4
 8000b38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f003 fb99 	bl	8004274 <memcpy>
 8000b42:	e004      	b.n	8000b4e <rt_bus_cmd_bl_write_handler+0xbe>
	}
	else
	{
		dbprintf("RT_PROTO_DataError");
 8000b44:	4809      	ldr	r0, [pc, #36]	; (8000b6c <rt_bus_cmd_bl_write_handler+0xdc>)
 8000b46:	f000 fe19 	bl	800177c <dbprintf>
		return RT_PROTO_DataError;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	e000      	b.n	8000b50 <rt_bus_cmd_bl_write_handler+0xc0>
	}

	return RT_PROTO_OK;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08004fdc 	.word	0x08004fdc
 8000b5c:	08004b60 	.word	0x08004b60
 8000b60:	08004b64 	.word	0x08004b64
 8000b64:	08004b6c 	.word	0x08004b6c
 8000b68:	08004b8c 	.word	0x08004b8c
 8000b6c:	08004b9c 	.word	0x08004b9c

08000b70 <rt_bus_cmd_bl_erase_handler>:

uint32_t rt_bus_cmd_bl_erase_handler (uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 8000b80:	4932      	ldr	r1, [pc, #200]	; (8000c4c <rt_bus_cmd_bl_erase_handler+0xdc>)
 8000b82:	4833      	ldr	r0, [pc, #204]	; (8000c50 <rt_bus_cmd_bl_erase_handler+0xe0>)
 8000b84:	f000 fdfa 	bl	800177c <dbprintf>
	uint32_t eraseaddress;
	uint32_t eraseLen;
	uint32_t mtype = MEM_TYPE_UNK;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	61fb      	str	r3, [r7, #28]

	if (rxLen != 0x08)
 8000b8c:	897b      	ldrh	r3, [r7, #10]
 8000b8e:	2b08      	cmp	r3, #8
 8000b90:	d001      	beq.n	8000b96 <rt_bus_cmd_bl_erase_handler+0x26>
		return RT_PROTO_DataError;
 8000b92:	2302      	movs	r3, #2
 8000b94:	e056      	b.n	8000c44 <rt_bus_cmd_bl_erase_handler+0xd4>
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]


	memcpy(&eraseaddress,&rxData[0],4);
 8000b9a:	61bb      	str	r3, [r7, #24]
	memcpy(&eraseLen,&rxData[4],4);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3304      	adds	r3, #4
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	617b      	str	r3, [r7, #20]

	dbprintf("Erasing flash... Start Address : %08X, Size: %d\n\r",eraseaddress,eraseLen);
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482a      	ldr	r0, [pc, #168]	; (8000c54 <rt_bus_cmd_bl_erase_handler+0xe4>)
 8000bac:	f000 fde6 	bl	800177c <dbprintf>


	if (eraseaddress % FLASH_PAGE_SIZE){
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <rt_bus_cmd_bl_erase_handler+0x5a>
		dbprintf("%s_%d",__func__,__LINE__);
 8000bba:	f240 121d 	movw	r2, #285	; 0x11d
 8000bbe:	4923      	ldr	r1, [pc, #140]	; (8000c4c <rt_bus_cmd_bl_erase_handler+0xdc>)
 8000bc0:	4825      	ldr	r0, [pc, #148]	; (8000c58 <rt_bus_cmd_bl_erase_handler+0xe8>)
 8000bc2:	f000 fddb 	bl	800177c <dbprintf>
		return RT_PROTO_DataError;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	e03c      	b.n	8000c44 <rt_bus_cmd_bl_erase_handler+0xd4>
	}
	if (eraseLen % FLASH_PAGE_SIZE){
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d007      	beq.n	8000be4 <rt_bus_cmd_bl_erase_handler+0x74>
		dbprintf("%s_%d",__func__,__LINE__);
 8000bd4:	f240 1221 	movw	r2, #289	; 0x121
 8000bd8:	491c      	ldr	r1, [pc, #112]	; (8000c4c <rt_bus_cmd_bl_erase_handler+0xdc>)
 8000bda:	481f      	ldr	r0, [pc, #124]	; (8000c58 <rt_bus_cmd_bl_erase_handler+0xe8>)
 8000bdc:	f000 fdce 	bl	800177c <dbprintf>
		return RT_PROTO_DataError;
 8000be0:	2302      	movs	r3, #2
 8000be2:	e02f      	b.n	8000c44 <rt_bus_cmd_bl_erase_handler+0xd4>
	}

	mtype = get_mem_type(eraseaddress);
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff00 	bl	80009ec <get_mem_type>
 8000bec:	61f8      	str	r0, [r7, #28]

	if (mtype == MEM_TYPE_FLASH)
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d116      	bne.n	8000c22 <rt_bus_cmd_bl_erase_handler+0xb2>
	{
		dbprintf("MEM_TYPE_FLASH");
 8000bf4:	4819      	ldr	r0, [pc, #100]	; (8000c5c <rt_bus_cmd_bl_erase_handler+0xec>)
 8000bf6:	f000 fdc1 	bl	800177c <dbprintf>
		FLASH_If_Init();
 8000bfa:	f7ff fb8b 	bl	8000314 <FLASH_If_Init>
		if (FLASH_If_Erase(eraseaddress,eraseLen) != HAL_OK){
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fb93 	bl	8000330 <FLASH_If_Erase>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d004      	beq.n	8000c1a <rt_bus_cmd_bl_erase_handler+0xaa>
			dbprintf("RT_PROTO_ExcError");
 8000c10:	4813      	ldr	r0, [pc, #76]	; (8000c60 <rt_bus_cmd_bl_erase_handler+0xf0>)
 8000c12:	f000 fdb3 	bl	800177c <dbprintf>
			return RT_PROTO_ExcError;
 8000c16:	2304      	movs	r3, #4
 8000c18:	e014      	b.n	8000c44 <rt_bus_cmd_bl_erase_handler+0xd4>
		}
		dbprintf("Erased flash");
 8000c1a:	4812      	ldr	r0, [pc, #72]	; (8000c64 <rt_bus_cmd_bl_erase_handler+0xf4>)
 8000c1c:	f000 fdae 	bl	800177c <dbprintf>
 8000c20:	e00f      	b.n	8000c42 <rt_bus_cmd_bl_erase_handler+0xd2>
	}
	else if (mtype == MEM_TYPE_RAM)
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d10a      	bne.n	8000c3e <rt_bus_cmd_bl_erase_handler+0xce>
	{
		dbprintf("MEM_TYPE_RAM");
 8000c28:	480f      	ldr	r0, [pc, #60]	; (8000c68 <rt_bus_cmd_bl_erase_handler+0xf8>)
 8000c2a:	f000 fda7 	bl	800177c <dbprintf>
		memset((unsigned char *)eraseaddress,0,eraseLen);
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	4618      	mov	r0, r3
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	461a      	mov	r2, r3
 8000c36:	2100      	movs	r1, #0
 8000c38:	f003 fb2a 	bl	8004290 <memset>
 8000c3c:	e001      	b.n	8000c42 <rt_bus_cmd_bl_erase_handler+0xd2>
	}
	else
	{
		return RT_PROTO_DataError;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e000      	b.n	8000c44 <rt_bus_cmd_bl_erase_handler+0xd4>
	}

	return RT_PROTO_OK;
 8000c42:	2300      	movs	r3, #0
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	08004ff8 	.word	0x08004ff8
 8000c50:	08004b60 	.word	0x08004b60
 8000c54:	08004bb0 	.word	0x08004bb0
 8000c58:	08004be4 	.word	0x08004be4
 8000c5c:	08004bec 	.word	0x08004bec
 8000c60:	08004bfc 	.word	0x08004bfc
 8000c64:	08004c10 	.word	0x08004c10
 8000c68:	08004c20 	.word	0x08004c20

08000c6c <rt_bus_cmd_prepare_response_handler>:

uint32_t rt_bus_cmd_prepare_response_handler(uint8_t *rxData,uint16_t rxLen,uint8_t *txData,uint16_t *txLen)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	817b      	strh	r3, [r7, #10]
	dbprintf("%s",__func__);
 8000c7c:	4904      	ldr	r1, [pc, #16]	; (8000c90 <rt_bus_cmd_prepare_response_handler+0x24>)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <rt_bus_cmd_prepare_response_handler+0x28>)
 8000c80:	f000 fd7c 	bl	800177c <dbprintf>
	return RT_PROTO_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	08005014 	.word	0x08005014
 8000c94:	08004b60 	.word	0x08004b60

08000c98 <SPI_DMA_Reset>:

void SPI_DMA_Reset(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	HAL_SPI_DMAStop(&hspi1);
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <SPI_DMA_Reset+0x2c>)
 8000c9e:	f002 fdcd 	bl	800383c <HAL_SPI_DMAStop>
	HAL_SPI_TransmitReceive_DMA(&hspi1,gSPI_Tx_Buf, gSPI_Rx_Buf, SPI_RX_BUF_SIZE);
 8000ca2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <SPI_DMA_Reset+0x30>)
 8000ca8:	4908      	ldr	r1, [pc, #32]	; (8000ccc <SPI_DMA_Reset+0x34>)
 8000caa:	4806      	ldr	r0, [pc, #24]	; (8000cc4 <SPI_DMA_Reset+0x2c>)
 8000cac:	f002 fcc4 	bl	8003638 <HAL_SPI_TransmitReceive_DMA>
	prevDMACnt = SPI_RX_BUF_SIZE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <SPI_DMA_Reset+0x38>)
 8000cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cb6:	801a      	strh	r2, [r3, #0]
	rxFrameSize = 0;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SPI_DMA_Reset+0x3c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20001d40 	.word	0x20001d40
 8000cc8:	20001540 	.word	0x20001540
 8000ccc:	20000124 	.word	0x20000124
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000098 	.word	0x20000098

08000cd8 <rt_bus_proto_bl_process>:

void rt_bus_proto_bl_process(tRT_Command_Packet sRT_Command_Packet )
{
 8000cd8:	b084      	sub	sp, #16
 8000cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cde:	f5ad 6d01 	sub.w	sp, sp, #2064	; 0x810
 8000ce2:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8000ce6:	446f      	add	r7, sp
 8000ce8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000cec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t pSize = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	817b      	strh	r3, [r7, #10]
	uint16_t addr = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	813b      	strh	r3, [r7, #8]
	uint16_t cCRC = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	807b      	strh	r3, [r7, #2]
	uint16_t txSize = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	803b      	strh	r3, [r7, #0]
	uint32_t ret;
	if (isFrameReady)
 8000d00:	4b6f      	ldr	r3, [pc, #444]	; (8000ec0 <rt_bus_proto_bl_process+0x1e8>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 80be 	beq.w	8000e86 <rt_bus_proto_bl_process+0x1ae>
	{
		cCRC = crc16(&sRT_Command_Packet.address, (sizeof(sRT_Command_Packet.address)+sizeof(sRT_Command_Packet.len)+sRT_Command_Packet.len));
 8000d0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff faa8 	bl	800026c <crc16>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	807b      	strh	r3, [r7, #2]
		if(memcmp(&sRT_Command_Packet.crc,&cCRC,2) == 0){
 8000d20:	1cb9      	adds	r1, r7, #2
 8000d22:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000d26:	2202      	movs	r2, #2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f003 fa95 	bl	8004258 <memcmp>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d166      	bne.n	8000e02 <rt_bus_proto_bl_process+0x12a>
			for (int i=0;i<gCommandCount ;i++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	e05e      	b.n	8000df8 <rt_bus_proto_bl_process+0x120>
			{
				if (commands[i].cmd == sRT_Command_Packet.cmd)
 8000d3a:	4a62      	ldr	r2, [pc, #392]	; (8000ec4 <rt_bus_proto_bl_process+0x1ec>)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000d42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d153      	bne.n	8000df2 <rt_bus_proto_bl_process+0x11a>
				{
					txSize = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	803b      	strh	r3, [r7, #0]
					gFrameCount++;
 8000d4e:	4b5e      	ldr	r3, [pc, #376]	; (8000ec8 <rt_bus_proto_bl_process+0x1f0>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3301      	adds	r3, #1
 8000d54:	4a5c      	ldr	r2, [pc, #368]	; (8000ec8 <rt_bus_proto_bl_process+0x1f0>)
 8000d56:	6013      	str	r3, [r2, #0]
					ret = commands[i].handler(&sRT_Command_Packet.data[0],(sRT_Command_Packet.len-sizeof(sRT_Command_Packet.cmd)),&gRT_Command_Packet.data[1],&txSize);
 8000d58:	4a5a      	ldr	r2, [pc, #360]	; (8000ec4 <rt_bus_proto_bl_process+0x1ec>)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4413      	add	r3, r2
 8000d60:	685c      	ldr	r4, [r3, #4]
 8000d62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d64:	3b01      	subs	r3, #1
 8000d66:	b299      	uxth	r1, r3
 8000d68:	463b      	mov	r3, r7
 8000d6a:	f107 002f 	add.w	r0, r7, #47	; 0x2f
 8000d6e:	4a57      	ldr	r2, [pc, #348]	; (8000ecc <rt_bus_proto_bl_process+0x1f4>)
 8000d70:	47a0      	blx	r4
 8000d72:	6078      	str	r0, [r7, #4]
					if(commands[i].cmd != CMD_Prepare_Response){
 8000d74:	4a53      	ldr	r2, [pc, #332]	; (8000ec4 <rt_bus_proto_bl_process+0x1ec>)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000d7c:	2b09      	cmp	r3, #9
 8000d7e:	d07c      	beq.n	8000e7a <rt_bus_proto_bl_process+0x1a2>
						gRT_Command_Packet.cmd = commands[i].cmd;
 8000d80:	4a50      	ldr	r2, [pc, #320]	; (8000ec4 <rt_bus_proto_bl_process+0x1ec>)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000d88:	4b51      	ldr	r3, [pc, #324]	; (8000ed0 <rt_bus_proto_bl_process+0x1f8>)
 8000d8a:	719a      	strb	r2, [r3, #6]
						if (ret == RT_PROTO_OK)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d107      	bne.n	8000da2 <rt_bus_proto_bl_process+0xca>
						{
							gRT_Command_Packet.data[0]= PRT_ACK;
 8000d92:	4b4f      	ldr	r3, [pc, #316]	; (8000ed0 <rt_bus_proto_bl_process+0x1f8>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	71da      	strb	r2, [r3, #7]
							txSize ++;
 8000d98:	883b      	ldrh	r3, [r7, #0]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	803b      	strh	r3, [r7, #0]
 8000da0:	e008      	b.n	8000db4 <rt_bus_proto_bl_process+0xdc>
						}
						else
						{
							gRT_Command_Packet.data[0]= PRT_NCK;
 8000da2:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <rt_bus_proto_bl_process+0x1f8>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	71da      	strb	r2, [r3, #7]
							gRT_Command_Packet.data[1]= ret;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	4b48      	ldr	r3, [pc, #288]	; (8000ed0 <rt_bus_proto_bl_process+0x1f8>)
 8000dae:	721a      	strb	r2, [r3, #8]
							txSize = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	803b      	strh	r3, [r7, #0]
						}
						rt_bus_proto_frame_pack(gRT_Command_Packet/*commands[i].cmd*/,&txSize);
 8000db4:	4b46      	ldr	r3, [pc, #280]	; (8000ed0 <rt_bus_proto_bl_process+0x1f8>)
 8000db6:	463a      	mov	r2, r7
 8000db8:	f8cd 27fc 	str.w	r2, [sp, #2044]	; 0x7fc
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	f04f 0800 	mov.w	r8, #0
 8000dc2:	4690      	mov	r8, r2
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	4616      	mov	r6, r2
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	2500      	movs	r5, #0
 8000dce:	4615      	mov	r5, r2
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	2400      	movs	r4, #0
 8000dd4:	4614      	mov	r4, r2
 8000dd6:	4668      	mov	r0, sp
 8000dd8:	3310      	adds	r3, #16
 8000dda:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8000dde:	4619      	mov	r1, r3
 8000de0:	f003 fa48 	bl	8004274 <memcpy>
 8000de4:	4640      	mov	r0, r8
 8000de6:	4631      	mov	r1, r6
 8000de8:	462a      	mov	r2, r5
 8000dea:	4623      	mov	r3, r4
 8000dec:	f7ff fcae 	bl	800074c <rt_bus_proto_frame_pack>
					}
					break;
 8000df0:	e043      	b.n	8000e7a <rt_bus_proto_bl_process+0x1a2>
			for (int i=0;i<gCommandCount ;i++)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	2207      	movs	r2, #7
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	db9c      	blt.n	8000d3a <rt_bus_proto_bl_process+0x62>
 8000e00:	e03c      	b.n	8000e7c <rt_bus_proto_bl_process+0x1a4>
				}
			}
		}else{
			dbprintf("CRC ERROR: Calculated: %04X Received: %04X",cCRC,sRT_Command_Packet.crc);
 8000e02:	887b      	ldrh	r3, [r7, #2]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	; 0x830
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4831      	ldr	r0, [pc, #196]	; (8000ed4 <rt_bus_proto_bl_process+0x1fc>)
 8000e0e:	f000 fcb5 	bl	800177c <dbprintf>
			dbprintf("********************************************************");
 8000e12:	4831      	ldr	r0, [pc, #196]	; (8000ed8 <rt_bus_proto_bl_process+0x200>)
 8000e14:	f000 fcb2 	bl	800177c <dbprintf>
			dbprintf("STX :%02X",sRT_Command_Packet.stx);
 8000e18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	482f      	ldr	r0, [pc, #188]	; (8000edc <rt_bus_proto_bl_process+0x204>)
 8000e20:	f000 fcac 	bl	800177c <dbprintf>
			dbprintf("ADDR :%04X",sRT_Command_Packet.address);
 8000e24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e26:	4619      	mov	r1, r3
 8000e28:	482d      	ldr	r0, [pc, #180]	; (8000ee0 <rt_bus_proto_bl_process+0x208>)
 8000e2a:	f000 fca7 	bl	800177c <dbprintf>
			dbprintf("LEN :%04X",sRT_Command_Packet.len);
 8000e2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	482c      	ldr	r0, [pc, #176]	; (8000ee4 <rt_bus_proto_bl_process+0x20c>)
 8000e34:	f000 fca2 	bl	800177c <dbprintf>
			dbprintf("CMD :%02X",sRT_Command_Packet.cmd);
 8000e38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	482a      	ldr	r0, [pc, #168]	; (8000ee8 <rt_bus_proto_bl_process+0x210>)
 8000e40:	f000 fc9c 	bl	800177c <dbprintf>
			dbprintf("Data :%02X %02X %02X",sRT_Command_Packet.data[0],sRT_Command_Packet.data[1],sRT_Command_Packet.data[2]);
 8000e44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e4e:	461a      	mov	r2, r3
 8000e50:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000e54:	4825      	ldr	r0, [pc, #148]	; (8000eec <rt_bus_proto_bl_process+0x214>)
 8000e56:	f000 fc91 	bl	800177c <dbprintf>
			dbprintf("CRC :%04X",sRT_Command_Packet.crc);
 8000e5a:	f8b7 3830 	ldrh.w	r3, [r7, #2096]	; 0x830
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4823      	ldr	r0, [pc, #140]	; (8000ef0 <rt_bus_proto_bl_process+0x218>)
 8000e62:	f000 fc8b 	bl	800177c <dbprintf>
			dbprintf("ETX :%02X",sRT_Command_Packet.etx);
 8000e66:	f897 3832 	ldrb.w	r3, [r7, #2098]	; 0x832
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4821      	ldr	r0, [pc, #132]	; (8000ef4 <rt_bus_proto_bl_process+0x21c>)
 8000e6e:	f000 fc85 	bl	800177c <dbprintf>
			dbprintf("********************************************************");
 8000e72:	4819      	ldr	r0, [pc, #100]	; (8000ed8 <rt_bus_proto_bl_process+0x200>)
 8000e74:	f000 fc82 	bl	800177c <dbprintf>
 8000e78:	e000      	b.n	8000e7c <rt_bus_proto_bl_process+0x1a4>
					break;
 8000e7a:	bf00      	nop
		}
		SPI_DMA_Reset();
 8000e7c:	f7ff ff0c 	bl	8000c98 <SPI_DMA_Reset>
		isFrameReady = 0;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <rt_bus_proto_bl_process+0x1e8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
	}
	if (rxFrameSize)
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <rt_bus_proto_bl_process+0x220>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d011      	beq.n	8000eb2 <rt_bus_proto_bl_process+0x1da>
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8e:	b672      	cpsid	i
}
 8000e90:	bf00      	nop
	{
		__disable_irq();
		//dbprintf("lastRxTime: %d now: %d",lastRxTime,HAL_GetTick());
		if (HAL_GetTick() > (lastRxTime + 2000))
 8000e92:	f000 fd03 	bl	800189c <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <rt_bus_proto_bl_process+0x224>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d904      	bls.n	8000eae <rt_bus_proto_bl_process+0x1d6>
		{
			dbprintf("Timeout resetting...");
 8000ea4:	4816      	ldr	r0, [pc, #88]	; (8000f00 <rt_bus_proto_bl_process+0x228>)
 8000ea6:	f000 fc69 	bl	800177c <dbprintf>
			SPI_DMA_Reset();
 8000eaa:	f7ff fef5 	bl	8000c98 <SPI_DMA_Reset>
  __ASM volatile ("cpsie i" : : : "memory");
 8000eae:	b662      	cpsie	i
}
 8000eb0:	bf00      	nop
		}
		__enable_irq();
	}
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4770      	bx	lr
 8000ec0:	20000097 	.word	0x20000097
 8000ec4:	08004f44 	.word	0x08004f44
 8000ec8:	200000a0 	.word	0x200000a0
 8000ecc:	20000d3c 	.word	0x20000d3c
 8000ed0:	20000d34 	.word	0x20000d34
 8000ed4:	08004c30 	.word	0x08004c30
 8000ed8:	08004c5c 	.word	0x08004c5c
 8000edc:	08004c98 	.word	0x08004c98
 8000ee0:	08004ca4 	.word	0x08004ca4
 8000ee4:	08004cb0 	.word	0x08004cb0
 8000ee8:	08004cbc 	.word	0x08004cbc
 8000eec:	08004cc8 	.word	0x08004cc8
 8000ef0:	08004ce0 	.word	0x08004ce0
 8000ef4:	08004cec 	.word	0x08004cec
 8000ef8:	20000098 	.word	0x20000098
 8000efc:	2000009c 	.word	0x2000009c
 8000f00:	08004cf8 	.word	0x08004cf8

08000f04 <rt_bus_proto_bl_dt>:

void rt_bus_proto_bl_dt(void)
{
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	f5ad 5dc1 	sub.w	sp, sp, #6176	; 0x1820
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8000f10:	446f      	add	r7, sp
	uint16_t currentDMACnt = hspi1.hdmarx->Instance->CNDTR;
 8000f12:	4bae      	ldr	r3, [pc, #696]	; (80011cc <rt_bus_proto_bl_dt+0x2c8>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f1e:	f102 0206 	add.w	r2, r2, #6
 8000f22:	8013      	strh	r3, [r2, #0]
	uint16_t size=0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f2a:	f102 0204 	add.w	r2, r2, #4
 8000f2e:	8013      	strh	r3, [r2, #0]
	uint16_t start = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f36:	f102 0202 	add.w	r2, r2, #2
 8000f3a:	8013      	strh	r3, [r2, #0]
	tRT_Command_Packet sRT_Command_Packet;
	//
	//	if(currentDMACnt !=prevDMACnt){
	//		dbprintf("currentDMACnt: %d",currentDMACnt);
	//	}
	if (prevDMACnt > currentDMACnt)
 8000f3c:	4ba4      	ldr	r3, [pc, #656]	; (80011d0 <rt_bus_proto_bl_dt+0x2cc>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f44:	f102 0206 	add.w	r2, r2, #6
 8000f48:	8812      	ldrh	r2, [r2, #0]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d26d      	bcs.n	800102a <rt_bus_proto_bl_dt+0x126>
	{
		lastRxTime = HAL_GetTick();
 8000f4e:	f000 fca5 	bl	800189c <HAL_GetTick>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a9f      	ldr	r2, [pc, #636]	; (80011d4 <rt_bus_proto_bl_dt+0x2d0>)
 8000f56:	6013      	str	r3, [r2, #0]
		size = prevDMACnt - currentDMACnt;
 8000f58:	4b9d      	ldr	r3, [pc, #628]	; (80011d0 <rt_bus_proto_bl_dt+0x2cc>)
 8000f5a:	881a      	ldrh	r2, [r3, #0]
 8000f5c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f60:	f103 0306 	add.w	r3, r3, #6
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000f6c:	f102 0204 	add.w	r2, r2, #4
 8000f70:	8013      	strh	r3, [r2, #0]
		if (size > SPI_RX_BUF_SIZE)
 8000f72:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f76:	f103 0304 	add.w	r3, r3, #4
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f80:	f200 8119 	bhi.w	80011b6 <rt_bus_proto_bl_dt+0x2b2>
			return;

		if(size < 9)
 8000f84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000f88:	f103 0304 	add.w	r3, r3, #4
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	2b08      	cmp	r3, #8
 8000f90:	f240 8113 	bls.w	80011ba <rt_bus_proto_bl_dt+0x2b6>
			return;
		start = (SPI_RX_BUF_SIZE - prevDMACnt);
 8000f94:	4b8e      	ldr	r3, [pc, #568]	; (80011d0 <rt_bus_proto_bl_dt+0x2cc>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000f9c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000fa0:	f102 0202 	add.w	r2, r2, #2
 8000fa4:	8013      	strh	r3, [r2, #0]

		if (rxFrameSize + size < SPI_RX_BUF_SIZE)
 8000fa6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000faa:	f103 0304 	add.w	r3, r3, #4
 8000fae:	881a      	ldrh	r2, [r3, #0]
 8000fb0:	4b89      	ldr	r3, [pc, #548]	; (80011d8 <rt_bus_proto_bl_dt+0x2d4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fba:	d22e      	bcs.n	800101a <rt_bus_proto_bl_dt+0x116>
		{
			sRT_Command_Packet = rt_bus_proto_pack_parser(&gSPI_Rx_Buf[start]);
 8000fbc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000fc0:	f103 0302 	add.w	r3, r3, #2
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	4a85      	ldr	r2, [pc, #532]	; (80011dc <rt_bus_proto_bl_dt+0x2d8>)
 8000fc8:	441a      	add	r2, r3
 8000fca:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fc2d 	bl	8000830 <rt_bus_proto_pack_parser>
			rxFrameSize += size;
 8000fd6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8000fda:	f103 0304 	add.w	r3, r3, #4
 8000fde:	881a      	ldrh	r2, [r3, #0]
 8000fe0:	4b7d      	ldr	r3, [pc, #500]	; (80011d8 <rt_bus_proto_bl_dt+0x2d4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a7c      	ldr	r2, [pc, #496]	; (80011d8 <rt_bus_proto_bl_dt+0x2d4>)
 8000fe8:	6013      	str	r3, [r2, #0]
			if(sRT_Command_Packet.len < size){
 8000fea:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8000fee:	889b      	ldrh	r3, [r3, #4]
 8000ff0:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000ff4:	f102 0204 	add.w	r2, r2, #4
 8000ff8:	8812      	ldrh	r2, [r2, #0]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d90d      	bls.n	800101a <rt_bus_proto_bl_dt+0x116>
				if(sRT_Command_Packet.stx == PRT_STX && sRT_Command_Packet.etx==PRT_ETX)
 8000ffe:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d108      	bne.n	800101a <rt_bus_proto_bl_dt+0x116>
 8001008:	f607 0314 	addw	r3, r7, #2068	; 0x814
 800100c:	f893 380a 	ldrb.w	r3, [r3, #2058]	; 0x80a
 8001010:	2b03      	cmp	r3, #3
 8001012:	d102      	bne.n	800101a <rt_bus_proto_bl_dt+0x116>
					isFrameReady = 0x01;
 8001014:	4b72      	ldr	r3, [pc, #456]	; (80011e0 <rt_bus_proto_bl_dt+0x2dc>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
			}
		}
		prevDMACnt = currentDMACnt;
 800101a:	4a6d      	ldr	r2, [pc, #436]	; (80011d0 <rt_bus_proto_bl_dt+0x2cc>)
 800101c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001020:	f103 0306 	add.w	r3, r3, #6
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	8013      	strh	r3, [r2, #0]
 8001028:	e0b6      	b.n	8001198 <rt_bus_proto_bl_dt+0x294>

	}
	else if (prevDMACnt < currentDMACnt)
 800102a:	4b69      	ldr	r3, [pc, #420]	; (80011d0 <rt_bus_proto_bl_dt+0x2cc>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001032:	f102 0206 	add.w	r2, r2, #6
 8001036:	8812      	ldrh	r2, [r2, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	f240 80ad 	bls.w	8001198 <rt_bus_proto_bl_dt+0x294>
	{

		lastRxTime = HAL_GetTick();
 800103e:	f000 fc2d 	bl	800189c <HAL_GetTick>
 8001042:	4603      	mov	r3, r0
 8001044:	4a63      	ldr	r2, [pc, #396]	; (80011d4 <rt_bus_proto_bl_dt+0x2d0>)
 8001046:	6013      	str	r3, [r2, #0]
		size = prevDMACnt;
 8001048:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <rt_bus_proto_bl_dt+0x2cc>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001050:	f102 0204 	add.w	r2, r2, #4
 8001054:	8013      	strh	r3, [r2, #0]
		if (size > SPI_RX_BUF_SIZE)
 8001056:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800105a:	f103 0304 	add.w	r3, r3, #4
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001064:	f200 80ab 	bhi.w	80011be <rt_bus_proto_bl_dt+0x2ba>
			return;
		start = (SPI_RX_BUF_SIZE - prevDMACnt);
 8001068:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <rt_bus_proto_bl_dt+0x2cc>)
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001070:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001074:	f102 0202 	add.w	r2, r2, #2
 8001078:	8013      	strh	r3, [r2, #0]

		if (rxFrameSize + size < SPI_RX_BUF_SIZE)
 800107a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800107e:	f103 0304 	add.w	r3, r3, #4
 8001082:	881a      	ldrh	r2, [r3, #0]
 8001084:	4b54      	ldr	r3, [pc, #336]	; (80011d8 <rt_bus_proto_bl_dt+0x2d4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4413      	add	r3, r2
 800108a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800108e:	d223      	bcs.n	80010d8 <rt_bus_proto_bl_dt+0x1d4>
		{
			sRT_Command_Packet = rt_bus_proto_pack_parser(&gSPI_Rx_Buf[start]);
 8001090:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001094:	f103 0302 	add.w	r3, r3, #2
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	4a50      	ldr	r2, [pc, #320]	; (80011dc <rt_bus_proto_bl_dt+0x2d8>)
 800109c:	441a      	add	r2, r3
 800109e:	f607 0414 	addw	r4, r7, #2068	; 0x814
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	3b08      	subs	r3, #8
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fbc0 	bl	8000830 <rt_bus_proto_pack_parser>
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	3b08      	subs	r3, #8
 80010b6:	4620      	mov	r0, r4
 80010b8:	4619      	mov	r1, r3
 80010ba:	f640 030c 	movw	r3, #2060	; 0x80c
 80010be:	461a      	mov	r2, r3
 80010c0:	f003 f8d8 	bl	8004274 <memcpy>
			rxFrameSize += size;
 80010c4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010c8:	f103 0304 	add.w	r3, r3, #4
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	4b42      	ldr	r3, [pc, #264]	; (80011d8 <rt_bus_proto_bl_dt+0x2d4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4413      	add	r3, r2
 80010d4:	4a40      	ldr	r2, [pc, #256]	; (80011d8 <rt_bus_proto_bl_dt+0x2d4>)
 80010d6:	6013      	str	r3, [r2, #0]
		}
		size = SPI_RX_BUF_SIZE - currentDMACnt;
 80010d8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80010dc:	f103 0306 	add.w	r3, r3, #6
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80010e6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80010ea:	f102 0204 	add.w	r2, r2, #4
 80010ee:	8013      	strh	r3, [r2, #0]
		start = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80010f6:	f102 0202 	add.w	r2, r2, #2
 80010fa:	8013      	strh	r3, [r2, #0]


		if (rxFrameSize + size < SPI_RX_BUF_SIZE)
 80010fc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001100:	f103 0304 	add.w	r3, r3, #4
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <rt_bus_proto_bl_dt+0x2d4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001110:	d23b      	bcs.n	800118a <rt_bus_proto_bl_dt+0x286>
		{
			sRT_Command_Packet = rt_bus_proto_pack_parser(&gSPI_Rx_Buf[start]);
 8001112:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001116:	f103 0302 	add.w	r3, r3, #2
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <rt_bus_proto_bl_dt+0x2d8>)
 800111e:	441a      	add	r2, r3
 8001120:	f607 0414 	addw	r4, r7, #2068	; 0x814
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	3b08      	subs	r3, #8
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fb7f 	bl	8000830 <rt_bus_proto_pack_parser>
 8001132:	f107 0308 	add.w	r3, r7, #8
 8001136:	3b08      	subs	r3, #8
 8001138:	4620      	mov	r0, r4
 800113a:	4619      	mov	r1, r3
 800113c:	f640 030c 	movw	r3, #2060	; 0x80c
 8001140:	461a      	mov	r2, r3
 8001142:	f003 f897 	bl	8004274 <memcpy>
			rxFrameSize += size;
 8001146:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800114a:	f103 0304 	add.w	r3, r3, #4
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <rt_bus_proto_bl_dt+0x2d4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <rt_bus_proto_bl_dt+0x2d4>)
 8001158:	6013      	str	r3, [r2, #0]
			if(sRT_Command_Packet.len < size){
 800115a:	f607 0314 	addw	r3, r7, #2068	; 0x814
 800115e:	889b      	ldrh	r3, [r3, #4]
 8001160:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8001164:	f102 0204 	add.w	r2, r2, #4
 8001168:	8812      	ldrh	r2, [r2, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d90d      	bls.n	800118a <rt_bus_proto_bl_dt+0x286>
				if(sRT_Command_Packet.stx == PRT_STX && sRT_Command_Packet.etx==PRT_ETX)
 800116e:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d108      	bne.n	800118a <rt_bus_proto_bl_dt+0x286>
 8001178:	f607 0314 	addw	r3, r7, #2068	; 0x814
 800117c:	f893 380a 	ldrb.w	r3, [r3, #2058]	; 0x80a
 8001180:	2b03      	cmp	r3, #3
 8001182:	d102      	bne.n	800118a <rt_bus_proto_bl_dt+0x286>
					isFrameReady = 0x01;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <rt_bus_proto_bl_dt+0x2dc>)
 8001186:	2201      	movs	r2, #1
 8001188:	701a      	strb	r2, [r3, #0]
			}

		}
		prevDMACnt = currentDMACnt;
 800118a:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <rt_bus_proto_bl_dt+0x2cc>)
 800118c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001190:	f103 0306 	add.w	r3, r3, #6
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	8013      	strh	r3, [r2, #0]
	}
	rt_bus_proto_bl_process(sRT_Command_Packet);
 8001198:	f607 0414 	addw	r4, r7, #2068	; 0x814
 800119c:	4668      	mov	r0, sp
 800119e:	f104 0310 	add.w	r3, r4, #16
 80011a2:	f240 72fc 	movw	r2, #2044	; 0x7fc
 80011a6:	4619      	mov	r1, r3
 80011a8:	f003 f864 	bl	8004274 <memcpy>
 80011ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011b0:	f7ff fd92 	bl	8000cd8 <rt_bus_proto_bl_process>
 80011b4:	e004      	b.n	80011c0 <rt_bus_proto_bl_dt+0x2bc>
			return;
 80011b6:	bf00      	nop
 80011b8:	e002      	b.n	80011c0 <rt_bus_proto_bl_dt+0x2bc>
			return;
 80011ba:	bf00      	nop
 80011bc:	e000      	b.n	80011c0 <rt_bus_proto_bl_dt+0x2bc>
			return;
 80011be:	bf00      	nop
}
 80011c0:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20001d40 	.word	0x20001d40
 80011d0:	20000000 	.word	0x20000000
 80011d4:	2000009c 	.word	0x2000009c
 80011d8:	20000098 	.word	0x20000098
 80011dc:	20001540 	.word	0x20001540
 80011e0:	20000097 	.word	0x20000097

080011e4 <rt_get_io_values>:



void rt_get_io_values(void){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	//dbprintf("gSPI_Tx_Buf: %02X%02X%02X%02X sizeof(tPDO): %d",gSPI_Tx_Buf[4],gSPI_Tx_Buf[5],gSPI_Tx_Buf[6],gSPI_Tx_Buf[7],sizeof(tPDO));
	uint16_t currentDMACnt = hspi1.hdmarx->Instance->CNDTR;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <rt_get_io_values+0x64>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	80fb      	strh	r3, [r7, #6]
	if((prevDMACnt-currentDMACnt) > 0 && (prevDMACnt-currentDMACnt) != 13){
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <rt_get_io_values+0x68>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b00      	cmp	r3, #0
		//dbprintf("diff : %d",(prevDMACnt-currentDMACnt));
	}
	if((prevDMACnt-currentDMACnt) >= (sizeof(tPDI)+1)){
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <rt_get_io_values+0x68>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b08      	cmp	r3, #8
 800120c:	d918      	bls.n	8001240 <rt_get_io_values+0x5c>
		//lastRxTime = HAL_GetTick();
		HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin,0);
 800120e:	2200      	movs	r2, #0
 8001210:	2104      	movs	r1, #4
 8001212:	480f      	ldr	r0, [pc, #60]	; (8001250 <rt_get_io_values+0x6c>)
 8001214:	f001 fbe4 	bl	80029e0 <HAL_GPIO_WritePin>
		memcpy(&g_PDI,&gSPI_Rx_Buf[1],sizeof(tPDI));
 8001218:	2208      	movs	r2, #8
 800121a:	490e      	ldr	r1, [pc, #56]	; (8001254 <rt_get_io_values+0x70>)
 800121c:	480e      	ldr	r0, [pc, #56]	; (8001258 <rt_get_io_values+0x74>)
 800121e:	f003 f829 	bl	8004274 <memcpy>
		//io_update();
		/*g_PDO.ssi = ssi_read();
		memcpy(&gSPI_Tx_Buf[4],&g_PDO.ssi,4);*/
		memcpy(&gSPI_Tx_Buf[0],&g_PDO,8);
 8001222:	2208      	movs	r2, #8
 8001224:	490d      	ldr	r1, [pc, #52]	; (800125c <rt_get_io_values+0x78>)
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <rt_get_io_values+0x7c>)
 8001228:	f003 f824 	bl	8004274 <memcpy>
		//dbprintf("SSI RAW: %08X  Din: %08X",g_PDO.ssi,g_PDO.din);

		prevDMACnt = currentDMACnt;
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <rt_get_io_values+0x68>)
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	8013      	strh	r3, [r2, #0]
		SPI_DMA_Reset();
 8001232:	f7ff fd31 	bl	8000c98 <SPI_DMA_Reset>
		HAL_GPIO_WritePin(TP1_GPIO_Port, TP1_Pin,1);
 8001236:	2201      	movs	r2, #1
 8001238:	2104      	movs	r1, #4
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <rt_get_io_values+0x6c>)
 800123c:	f001 fbd0 	bl	80029e0 <HAL_GPIO_WritePin>
		{
			dbprintf("Timeout resetting  size: %d...",(prevDMACnt-currentDMACnt));
			SPI_DMA_Reset();
		}
	}*/
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20001d40 	.word	0x20001d40
 800124c:	20000000 	.word	0x20000000
 8001250:	40010800 	.word	0x40010800
 8001254:	20001541 	.word	0x20001541
 8001258:	20000114 	.word	0x20000114
 800125c:	20000104 	.word	0x20000104
 8001260:	20000124 	.word	0x20000124

08001264 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_SPI1_Init+0x60>)
 800126a:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <MX_SPI1_Init+0x64>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_SPI1_Init+0x60>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_SPI1_Init+0x60>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_SPI1_Init+0x60>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_SPI1_Init+0x60>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_SPI1_Init+0x60>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MX_SPI1_Init+0x60>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_SPI1_Init+0x60>)
 8001294:	2208      	movs	r2, #8
 8001296:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_SPI1_Init+0x60>)
 800129a:	2200      	movs	r2, #0
 800129c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_SPI1_Init+0x60>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_SPI1_Init+0x60>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_SPI1_Init+0x60>)
 80012ac:	220a      	movs	r2, #10
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_SPI1_Init+0x60>)
 80012b2:	f002 f93d 	bl	8003530 <HAL_SPI_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 80012bc:	f7ff fa2a 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20001d40 	.word	0x20001d40
 80012c8:	40013000 	.word	0x40013000

080012cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a47      	ldr	r2, [pc, #284]	; (8001404 <HAL_SPI_MspInit+0x138>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	f040 8086 	bne.w	80013fa <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ee:	4b46      	ldr	r3, [pc, #280]	; (8001408 <HAL_SPI_MspInit+0x13c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a45      	ldr	r2, [pc, #276]	; (8001408 <HAL_SPI_MspInit+0x13c>)
 80012f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b43      	ldr	r3, [pc, #268]	; (8001408 <HAL_SPI_MspInit+0x13c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b40      	ldr	r3, [pc, #256]	; (8001408 <HAL_SPI_MspInit+0x13c>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <HAL_SPI_MspInit+0x13c>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6193      	str	r3, [r2, #24]
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <HAL_SPI_MspInit+0x13c>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800131e:	23b0      	movs	r3, #176	; 0xb0
 8001320:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0310 	add.w	r3, r7, #16
 800132e:	4619      	mov	r1, r3
 8001330:	4836      	ldr	r0, [pc, #216]	; (800140c <HAL_SPI_MspInit+0x140>)
 8001332:	f001 f9c1 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001336:	2340      	movs	r3, #64	; 0x40
 8001338:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2302      	movs	r3, #2
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	4830      	ldr	r0, [pc, #192]	; (800140c <HAL_SPI_MspInit+0x140>)
 800134a:	f001 f9b5 	bl	80026b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800134e:	4b30      	ldr	r3, [pc, #192]	; (8001410 <HAL_SPI_MspInit+0x144>)
 8001350:	4a30      	ldr	r2, [pc, #192]	; (8001414 <HAL_SPI_MspInit+0x148>)
 8001352:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001354:	4b2e      	ldr	r3, [pc, #184]	; (8001410 <HAL_SPI_MspInit+0x144>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800135a:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_SPI_MspInit+0x144>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001360:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_SPI_MspInit+0x144>)
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001366:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_SPI_MspInit+0x144>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800136c:	4b28      	ldr	r3, [pc, #160]	; (8001410 <HAL_SPI_MspInit+0x144>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001372:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_SPI_MspInit+0x144>)
 8001374:	2220      	movs	r2, #32
 8001376:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <HAL_SPI_MspInit+0x144>)
 800137a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001380:	4823      	ldr	r0, [pc, #140]	; (8001410 <HAL_SPI_MspInit+0x144>)
 8001382:	f000 fba3 	bl	8001acc <HAL_DMA_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800138c:	f7ff f9c2 	bl	8000714 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a1f      	ldr	r2, [pc, #124]	; (8001410 <HAL_SPI_MspInit+0x144>)
 8001394:	64da      	str	r2, [r3, #76]	; 0x4c
 8001396:	4a1e      	ldr	r2, [pc, #120]	; (8001410 <HAL_SPI_MspInit+0x144>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800139c:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_SPI_MspInit+0x150>)
 80013a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013a4:	2210      	movs	r2, #16
 80013a6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013c8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80013cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013ce:	4812      	ldr	r0, [pc, #72]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013d0:	f000 fb7c 	bl	8001acc <HAL_DMA_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80013da:	f7ff f99b 	bl	8000714 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a0d      	ldr	r2, [pc, #52]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013e2:	649a      	str	r2, [r3, #72]	; 0x48
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <HAL_SPI_MspInit+0x14c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2023      	movs	r0, #35	; 0x23
 80013f0:	f000 fb35 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80013f4:	2023      	movs	r0, #35	; 0x23
 80013f6:	f000 fb4e 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40013000 	.word	0x40013000
 8001408:	40021000 	.word	0x40021000
 800140c:	40010800 	.word	0x40010800
 8001410:	20001d98 	.word	0x20001d98
 8001414:	4002001c 	.word	0x4002001c
 8001418:	20001ddc 	.word	0x20001ddc
 800141c:	40020030 	.word	0x40020030

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_MspInit+0x5c>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_MspInit+0x5c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_MspInit+0x5c>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	; (800147c <HAL_MspInit+0x5c>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_MspInit+0x5c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_MspInit+0x5c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_MspInit+0x60>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_MspInit+0x60>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>
	...

0800148c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  dbprintf("%s",__func__);
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <HardFault_Handler+0x30>)
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <HardFault_Handler+0x34>)
 8001496:	f000 f971 	bl	800177c <dbprintf>
  uint16_t hardFaultCounter =0;
 800149a:	2300      	movs	r3, #0
 800149c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  if(hardFaultCounter++ ==4000){
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	80fa      	strh	r2, [r7, #6]
 80014a4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80014a8:	d1f9      	bne.n	800149e <HardFault_Handler+0x12>
		  ERR_LED1_Toggle();
 80014aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <HardFault_Handler+0x38>)
 80014b0:	f001 faae 	bl	8002a10 <HAL_GPIO_TogglePin>
		  hardFaultCounter = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	80fb      	strh	r3, [r7, #6]
	  if(hardFaultCounter++ ==4000){
 80014b8:	e7f1      	b.n	800149e <HardFault_Handler+0x12>
 80014ba:	bf00      	nop
 80014bc:	08005038 	.word	0x08005038
 80014c0:	08004d10 	.word	0x08004d10
 80014c4:	40011000 	.word	0x40011000

080014c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <MemManage_Handler+0x4>

080014ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler+0x4>

080014d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <UsageFault_Handler+0x4>

080014da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001502:	f000 f9b9 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <DMA1_Channel2_IRQHandler+0x10>)
 8001512:	f000 fcf3 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20001d98 	.word	0x20001d98

08001520 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <DMA1_Channel3_IRQHandler+0x10>)
 8001526:	f000 fce9 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20001ddc 	.word	0x20001ddc

08001534 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA1_Channel4_IRQHandler+0x10>)
 800153a:	f000 fcdf 	bl	8001efc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20001e20 	.word	0x20001e20

08001548 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800154c:	2020      	movs	r0, #32
 800154e:	f001 fa79 	bl	8002a44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <SPI1_IRQHandler+0x10>)
 800155e:	f002 f9ad 	bl	80038bc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20001d40 	.word	0x20001d40

0800156c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001574:	4a14      	ldr	r2, [pc, #80]	; (80015c8 <_sbrk+0x5c>)
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_sbrk+0x60>)
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <_sbrk+0x64>)
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <_sbrk+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	d207      	bcs.n	80015ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800159c:	f002 fe32 	bl	8004204 <__errno>
 80015a0:	4603      	mov	r3, r0
 80015a2:	220c      	movs	r2, #12
 80015a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	e009      	b.n	80015c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <_sbrk+0x64>)
 80015bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015be:	68fb      	ldr	r3, [r7, #12]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000c000 	.word	0x2000c000
 80015cc:	00000400 	.word	0x00000400
 80015d0:	200000a4 	.word	0x200000a4
 80015d4:	20001ee0 	.word	0x20001ee0

080015d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_USART1_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80015f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 800161c:	f002 fc3a 	bl	8003e94 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f7ff f875 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20001e64 	.word	0x20001e64
 8001634:	40013800 	.word	0x40013800

08001638 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0310 	add.w	r3, r7, #16
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a2f      	ldr	r2, [pc, #188]	; (8001710 <HAL_UART_MspInit+0xd8>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d157      	bne.n	8001708 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001658:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_UART_MspInit+0xdc>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a2d      	ldr	r2, [pc, #180]	; (8001714 <HAL_UART_MspInit+0xdc>)
 800165e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_UART_MspInit+0xdc>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_UART_MspInit+0xdc>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a27      	ldr	r2, [pc, #156]	; (8001714 <HAL_UART_MspInit+0xdc>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_UART_MspInit+0xdc>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 8001688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800168c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168e:	2302      	movs	r3, #2
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	4619      	mov	r1, r3
 800169c:	481e      	ldr	r0, [pc, #120]	; (8001718 <HAL_UART_MspInit+0xe0>)
 800169e:	f001 f80b 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DBG_RX_Pin;
 80016a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	4818      	ldr	r0, [pc, #96]	; (8001718 <HAL_UART_MspInit+0xe0>)
 80016b8:	f000 fffe 	bl	80026b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016be:	4a18      	ldr	r2, [pc, #96]	; (8001720 <HAL_UART_MspInit+0xe8>)
 80016c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016c4:	2210      	movs	r2, #16
 80016c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <HAL_UART_MspInit+0xe4>)
 80016ee:	f000 f9ed 	bl	8001acc <HAL_DMA_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80016f8:	f7ff f80c 	bl	8000714 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_UART_MspInit+0xe4>)
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
 8001702:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_UART_MspInit+0xe4>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001708:	bf00      	nop
 800170a:	3720      	adds	r7, #32
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40013800 	.word	0x40013800
 8001714:	40021000 	.word	0x40021000
 8001718:	40010800 	.word	0x40010800
 800171c:	20001e20 	.word	0x20001e20
 8001720:	40020044 	.word	0x40020044

08001724 <vprintln>:
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    }
}

void vprintln(const char *fmt, va_list argp)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b0b4      	sub	sp, #208	; 0xd0
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4618      	mov	r0, r3
 8001738:	f002 fdc8 	bl	80042cc <vsiprintf>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	dd14      	ble.n	800176c <vprintln+0x48>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fd6c 	bl	8000224 <strlen>
 800174c:	4603      	mov	r3, r0
 800174e:	b29a      	uxth	r2, r3
 8001750:	f107 0108 	add.w	r1, r7, #8
 8001754:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <vprintln+0x50>)
 800175a:	f002 fbe8 	bl	8003f2e <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r",2, 0xffffff);
 800175e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001762:	2202      	movs	r2, #2
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <vprintln+0x54>)
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <vprintln+0x50>)
 8001768:	f002 fbe1 	bl	8003f2e <HAL_UART_Transmit>
    }
}
 800176c:	bf00      	nop
 800176e:	37d0      	adds	r7, #208	; 0xd0
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20001e64 	.word	0x20001e64
 8001778:	08004d14 	.word	0x08004d14

0800177c <dbprintf>:

void dbprintf(const char *fmt, ...)
{
 800177c:	b40f      	push	{r0, r1, r2, r3}
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	607b      	str	r3, [r7, #4]
    vprintln((const char *)fmt, argp);
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	6938      	ldr	r0, [r7, #16]
 800178e:	f7ff ffc9 	bl	8001724 <vprintln>
    va_end(argp);
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800179c:	b004      	add	sp, #16
 800179e:	4770      	bx	lr

080017a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	; (80017d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	; (80017dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	; (80017e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017c6:	f7ff ff07 	bl	80015d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ca:	f002 fd21 	bl	8004210 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ce:	f7fe fee7 	bl	80005a0 <main>
  bx lr
 80017d2:	4770      	bx	lr
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80017dc:	080050a0 	.word	0x080050a0
  ldr r2, =_sbss
 80017e0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017e4:	20001ee0 	.word	0x20001ee0

080017e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_2_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x28>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f923 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fe0a 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f93b 	bl	8001ab2 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f903 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000004 	.word	0x20000004
 8001870:	2000000c 	.word	0x2000000c
 8001874:	20000008 	.word	0x20000008

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_IncTick+0x20>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	2000000c 	.word	0x2000000c
 8001898:	20001ea8 	.word	0x20001ea8

0800189c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	20001ea8 	.word	0x20001ea8

080018b0 <__NVIC_SetPriorityGrouping>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4906      	ldr	r1, [pc, #24]	; (8001948 <__NVIC_EnableIRQ+0x34>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff90 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff2d 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff42 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff90 	bl	80019a0 <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5f 	bl	800194c <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff35 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e059      	b.n	8001b96 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_DMA_Init+0xd4>)
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d80f      	bhi.n	8001b0e <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	4b2b      	ldr	r3, [pc, #172]	; (8001ba4 <HAL_DMA_Init+0xd8>)
 8001af6:	4413      	add	r3, r2
 8001af8:	4a2b      	ldr	r2, [pc, #172]	; (8001ba8 <HAL_DMA_Init+0xdc>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	009a      	lsls	r2, r3, #2
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a28      	ldr	r2, [pc, #160]	; (8001bac <HAL_DMA_Init+0xe0>)
 8001b0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b0c:	e00e      	b.n	8001b2c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_DMA_Init+0xe4>)
 8001b16:	4413      	add	r3, r2
 8001b18:	4a23      	ldr	r2, [pc, #140]	; (8001ba8 <HAL_DMA_Init+0xdc>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	009a      	lsls	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <HAL_DMA_Init+0xe8>)
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40020407 	.word	0x40020407
 8001ba4:	bffdfff8 	.word	0xbffdfff8
 8001ba8:	cccccccd 	.word	0xcccccccd
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	bffdfbf8 	.word	0xbffdfbf8
 8001bb4:	40020400 	.word	0x40020400

08001bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_DMA_Start_IT+0x20>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e04a      	b.n	8001c6e <HAL_DMA_Start_IT+0xb6>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d13a      	bne.n	8001c60 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2202      	movs	r2, #2
 8001bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fbb0 	bl	8002374 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 020e 	orr.w	r2, r2, #14
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e00f      	b.n	8001c4e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0204 	bic.w	r2, r2, #4
 8001c3c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 020a 	orr.w	r2, r2, #10
 8001c4c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e005      	b.n	8001c6c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d008      	beq.n	8001c9e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2204      	movs	r2, #4
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e020      	b.n	8001ce0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 020e 	bic.w	r2, r2, #14
 8001cac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 0201 	bic.w	r2, r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d005      	beq.n	8001d0e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e0d6      	b.n	8001ebc <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 020e 	bic.w	r2, r2, #14
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b64      	ldr	r3, [pc, #400]	; (8001ec8 <HAL_DMA_Abort_IT+0x1dc>)
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d958      	bls.n	8001dec <HAL_DMA_Abort_IT+0x100>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a63      	ldr	r2, [pc, #396]	; (8001ecc <HAL_DMA_Abort_IT+0x1e0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d04f      	beq.n	8001de4 <HAL_DMA_Abort_IT+0xf8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a61      	ldr	r2, [pc, #388]	; (8001ed0 <HAL_DMA_Abort_IT+0x1e4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d048      	beq.n	8001de0 <HAL_DMA_Abort_IT+0xf4>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a60      	ldr	r2, [pc, #384]	; (8001ed4 <HAL_DMA_Abort_IT+0x1e8>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d040      	beq.n	8001dda <HAL_DMA_Abort_IT+0xee>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a5e      	ldr	r2, [pc, #376]	; (8001ed8 <HAL_DMA_Abort_IT+0x1ec>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d038      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0xe8>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a5d      	ldr	r2, [pc, #372]	; (8001edc <HAL_DMA_Abort_IT+0x1f0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d030      	beq.n	8001dce <HAL_DMA_Abort_IT+0xe2>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a5b      	ldr	r2, [pc, #364]	; (8001ee0 <HAL_DMA_Abort_IT+0x1f4>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d028      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0xdc>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a53      	ldr	r2, [pc, #332]	; (8001ec8 <HAL_DMA_Abort_IT+0x1dc>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d020      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0xd6>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <HAL_DMA_Abort_IT+0x1f8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d019      	beq.n	8001dbe <HAL_DMA_Abort_IT+0xd2>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a56      	ldr	r2, [pc, #344]	; (8001ee8 <HAL_DMA_Abort_IT+0x1fc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d012      	beq.n	8001dba <HAL_DMA_Abort_IT+0xce>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a54      	ldr	r2, [pc, #336]	; (8001eec <HAL_DMA_Abort_IT+0x200>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00a      	beq.n	8001db4 <HAL_DMA_Abort_IT+0xc8>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a53      	ldr	r2, [pc, #332]	; (8001ef0 <HAL_DMA_Abort_IT+0x204>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d102      	bne.n	8001dae <HAL_DMA_Abort_IT+0xc2>
 8001da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dac:	e01b      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001db2:	e018      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db8:	e015      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001dba:	2310      	movs	r3, #16
 8001dbc:	e013      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e011      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001dc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dc6:	e00e      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001dc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001dcc:	e00b      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dd2:	e008      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd8:	e005      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dde:	e002      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001de0:	2310      	movs	r3, #16
 8001de2:	e000      	b.n	8001de6 <HAL_DMA_Abort_IT+0xfa>
 8001de4:	2301      	movs	r3, #1
 8001de6:	4a43      	ldr	r2, [pc, #268]	; (8001ef4 <HAL_DMA_Abort_IT+0x208>)
 8001de8:	6053      	str	r3, [r2, #4]
 8001dea:	e057      	b.n	8001e9c <HAL_DMA_Abort_IT+0x1b0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a36      	ldr	r2, [pc, #216]	; (8001ecc <HAL_DMA_Abort_IT+0x1e0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d04f      	beq.n	8001e96 <HAL_DMA_Abort_IT+0x1aa>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_DMA_Abort_IT+0x1e4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d048      	beq.n	8001e92 <HAL_DMA_Abort_IT+0x1a6>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a33      	ldr	r2, [pc, #204]	; (8001ed4 <HAL_DMA_Abort_IT+0x1e8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d040      	beq.n	8001e8c <HAL_DMA_Abort_IT+0x1a0>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a32      	ldr	r2, [pc, #200]	; (8001ed8 <HAL_DMA_Abort_IT+0x1ec>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d038      	beq.n	8001e86 <HAL_DMA_Abort_IT+0x19a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a30      	ldr	r2, [pc, #192]	; (8001edc <HAL_DMA_Abort_IT+0x1f0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d030      	beq.n	8001e80 <HAL_DMA_Abort_IT+0x194>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a2f      	ldr	r2, [pc, #188]	; (8001ee0 <HAL_DMA_Abort_IT+0x1f4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d028      	beq.n	8001e7a <HAL_DMA_Abort_IT+0x18e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a26      	ldr	r2, [pc, #152]	; (8001ec8 <HAL_DMA_Abort_IT+0x1dc>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d020      	beq.n	8001e74 <HAL_DMA_Abort_IT+0x188>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <HAL_DMA_Abort_IT+0x1f8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d019      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x184>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <HAL_DMA_Abort_IT+0x1fc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d012      	beq.n	8001e6c <HAL_DMA_Abort_IT+0x180>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a28      	ldr	r2, [pc, #160]	; (8001eec <HAL_DMA_Abort_IT+0x200>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d00a      	beq.n	8001e66 <HAL_DMA_Abort_IT+0x17a>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <HAL_DMA_Abort_IT+0x204>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d102      	bne.n	8001e60 <HAL_DMA_Abort_IT+0x174>
 8001e5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e5e:	e01b      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e64:	e018      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e6a:	e015      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e6c:	2310      	movs	r3, #16
 8001e6e:	e013      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e011      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e78:	e00e      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e7a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e7e:	e00b      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e84:	e008      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	e005      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e90:	e002      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e92:	2310      	movs	r3, #16
 8001e94:	e000      	b.n	8001e98 <HAL_DMA_Abort_IT+0x1ac>
 8001e96:	2301      	movs	r3, #1
 8001e98:	4a17      	ldr	r2, [pc, #92]	; (8001ef8 <HAL_DMA_Abort_IT+0x20c>)
 8001e9a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
    } 
  }
  return status;
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40020080 	.word	0x40020080
 8001ecc:	40020008 	.word	0x40020008
 8001ed0:	4002001c 	.word	0x4002001c
 8001ed4:	40020030 	.word	0x40020030
 8001ed8:	40020044 	.word	0x40020044
 8001edc:	40020058 	.word	0x40020058
 8001ee0:	4002006c 	.word	0x4002006c
 8001ee4:	40020408 	.word	0x40020408
 8001ee8:	4002041c 	.word	0x4002041c
 8001eec:	40020430 	.word	0x40020430
 8001ef0:	40020444 	.word	0x40020444
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020000 	.word	0x40020000

08001efc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2204      	movs	r2, #4
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80d6 	beq.w	80020d2 <HAL_DMA_IRQHandler+0x1d6>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80d0 	beq.w	80020d2 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0204 	bic.w	r2, r2, #4
 8001f4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b9b      	ldr	r3, [pc, #620]	; (80021c4 <HAL_DMA_IRQHandler+0x2c8>)
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d958      	bls.n	800200e <HAL_DMA_IRQHandler+0x112>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a99      	ldr	r2, [pc, #612]	; (80021c8 <HAL_DMA_IRQHandler+0x2cc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d04f      	beq.n	8002006 <HAL_DMA_IRQHandler+0x10a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a98      	ldr	r2, [pc, #608]	; (80021cc <HAL_DMA_IRQHandler+0x2d0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d048      	beq.n	8002002 <HAL_DMA_IRQHandler+0x106>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a96      	ldr	r2, [pc, #600]	; (80021d0 <HAL_DMA_IRQHandler+0x2d4>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d040      	beq.n	8001ffc <HAL_DMA_IRQHandler+0x100>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a95      	ldr	r2, [pc, #596]	; (80021d4 <HAL_DMA_IRQHandler+0x2d8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d038      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xfa>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a93      	ldr	r2, [pc, #588]	; (80021d8 <HAL_DMA_IRQHandler+0x2dc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d030      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0xf4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a92      	ldr	r2, [pc, #584]	; (80021dc <HAL_DMA_IRQHandler+0x2e0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d028      	beq.n	8001fea <HAL_DMA_IRQHandler+0xee>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a89      	ldr	r2, [pc, #548]	; (80021c4 <HAL_DMA_IRQHandler+0x2c8>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d020      	beq.n	8001fe4 <HAL_DMA_IRQHandler+0xe8>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a8e      	ldr	r2, [pc, #568]	; (80021e0 <HAL_DMA_IRQHandler+0x2e4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d019      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0xe4>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a8c      	ldr	r2, [pc, #560]	; (80021e4 <HAL_DMA_IRQHandler+0x2e8>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d012      	beq.n	8001fdc <HAL_DMA_IRQHandler+0xe0>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8b      	ldr	r2, [pc, #556]	; (80021e8 <HAL_DMA_IRQHandler+0x2ec>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00a      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0xda>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a89      	ldr	r2, [pc, #548]	; (80021ec <HAL_DMA_IRQHandler+0x2f0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d102      	bne.n	8001fd0 <HAL_DMA_IRQHandler+0xd4>
 8001fca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fce:	e01b      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001fd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001fd4:	e018      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fda:	e015      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001fdc:	2340      	movs	r3, #64	; 0x40
 8001fde:	e013      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001fe0:	2304      	movs	r3, #4
 8001fe2:	e011      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001fe4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fe8:	e00e      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001fea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fee:	e00b      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001ff4:	e008      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001ff6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ffa:	e005      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8001ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002000:	e002      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8002002:	2340      	movs	r3, #64	; 0x40
 8002004:	e000      	b.n	8002008 <HAL_DMA_IRQHandler+0x10c>
 8002006:	2304      	movs	r3, #4
 8002008:	4a79      	ldr	r2, [pc, #484]	; (80021f0 <HAL_DMA_IRQHandler+0x2f4>)
 800200a:	6053      	str	r3, [r2, #4]
 800200c:	e057      	b.n	80020be <HAL_DMA_IRQHandler+0x1c2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6d      	ldr	r2, [pc, #436]	; (80021c8 <HAL_DMA_IRQHandler+0x2cc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d04f      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x1bc>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6b      	ldr	r2, [pc, #428]	; (80021cc <HAL_DMA_IRQHandler+0x2d0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d048      	beq.n	80020b4 <HAL_DMA_IRQHandler+0x1b8>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6a      	ldr	r2, [pc, #424]	; (80021d0 <HAL_DMA_IRQHandler+0x2d4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d040      	beq.n	80020ae <HAL_DMA_IRQHandler+0x1b2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a68      	ldr	r2, [pc, #416]	; (80021d4 <HAL_DMA_IRQHandler+0x2d8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d038      	beq.n	80020a8 <HAL_DMA_IRQHandler+0x1ac>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <HAL_DMA_IRQHandler+0x2dc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d030      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x1a6>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_DMA_IRQHandler+0x2e0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d028      	beq.n	800209c <HAL_DMA_IRQHandler+0x1a0>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <HAL_DMA_IRQHandler+0x2c8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d020      	beq.n	8002096 <HAL_DMA_IRQHandler+0x19a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a61      	ldr	r2, [pc, #388]	; (80021e0 <HAL_DMA_IRQHandler+0x2e4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d019      	beq.n	8002092 <HAL_DMA_IRQHandler+0x196>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a60      	ldr	r2, [pc, #384]	; (80021e4 <HAL_DMA_IRQHandler+0x2e8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d012      	beq.n	800208e <HAL_DMA_IRQHandler+0x192>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a5e      	ldr	r2, [pc, #376]	; (80021e8 <HAL_DMA_IRQHandler+0x2ec>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00a      	beq.n	8002088 <HAL_DMA_IRQHandler+0x18c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a5d      	ldr	r2, [pc, #372]	; (80021ec <HAL_DMA_IRQHandler+0x2f0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d102      	bne.n	8002082 <HAL_DMA_IRQHandler+0x186>
 800207c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002080:	e01b      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 8002082:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002086:	e018      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 8002088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800208c:	e015      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 800208e:	2340      	movs	r3, #64	; 0x40
 8002090:	e013      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 8002092:	2304      	movs	r3, #4
 8002094:	e011      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 8002096:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800209a:	e00e      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 800209c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020a0:	e00b      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 80020a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020a6:	e008      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 80020a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ac:	e005      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 80020ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b2:	e002      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 80020b4:	2340      	movs	r3, #64	; 0x40
 80020b6:	e000      	b.n	80020ba <HAL_DMA_IRQHandler+0x1be>
 80020b8:	2304      	movs	r3, #4
 80020ba:	4a4e      	ldr	r2, [pc, #312]	; (80021f4 <HAL_DMA_IRQHandler+0x2f8>)
 80020bc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8136 	beq.w	8002334 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80020d0:	e130      	b.n	8002334 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2202      	movs	r2, #2
 80020d8:	409a      	lsls	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 80f8 	beq.w	80022d4 <HAL_DMA_IRQHandler+0x3d8>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 80f2 	beq.w	80022d4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10b      	bne.n	8002116 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 020a 	bic.w	r2, r2, #10
 800210c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <HAL_DMA_IRQHandler+0x2c8>)
 800211e:	429a      	cmp	r2, r3
 8002120:	d973      	bls.n	800220a <HAL_DMA_IRQHandler+0x30e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <HAL_DMA_IRQHandler+0x2cc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d06a      	beq.n	8002202 <HAL_DMA_IRQHandler+0x306>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a26      	ldr	r2, [pc, #152]	; (80021cc <HAL_DMA_IRQHandler+0x2d0>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d063      	beq.n	80021fe <HAL_DMA_IRQHandler+0x302>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a25      	ldr	r2, [pc, #148]	; (80021d0 <HAL_DMA_IRQHandler+0x2d4>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d05b      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2fc>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <HAL_DMA_IRQHandler+0x2d8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d038      	beq.n	80021bc <HAL_DMA_IRQHandler+0x2c0>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <HAL_DMA_IRQHandler+0x2dc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d030      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x2ba>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a20      	ldr	r2, [pc, #128]	; (80021dc <HAL_DMA_IRQHandler+0x2e0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d028      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x2b4>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <HAL_DMA_IRQHandler+0x2c8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d020      	beq.n	80021aa <HAL_DMA_IRQHandler+0x2ae>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <HAL_DMA_IRQHandler+0x2e4>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d019      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x2aa>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <HAL_DMA_IRQHandler+0x2e8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d012      	beq.n	80021a2 <HAL_DMA_IRQHandler+0x2a6>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_DMA_IRQHandler+0x2ec>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00a      	beq.n	800219c <HAL_DMA_IRQHandler+0x2a0>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <HAL_DMA_IRQHandler+0x2f0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d102      	bne.n	8002196 <HAL_DMA_IRQHandler+0x29a>
 8002190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002194:	e036      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 8002196:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800219a:	e033      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 800219c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a0:	e030      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 80021a2:	2320      	movs	r3, #32
 80021a4:	e02e      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e02c      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 80021aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ae:	e029      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 80021b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021b4:	e026      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 80021b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ba:	e023      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 80021bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021c0:	e020      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 80021c2:	bf00      	nop
 80021c4:	40020080 	.word	0x40020080
 80021c8:	40020008 	.word	0x40020008
 80021cc:	4002001c 	.word	0x4002001c
 80021d0:	40020030 	.word	0x40020030
 80021d4:	40020044 	.word	0x40020044
 80021d8:	40020058 	.word	0x40020058
 80021dc:	4002006c 	.word	0x4002006c
 80021e0:	40020408 	.word	0x40020408
 80021e4:	4002041c 	.word	0x4002041c
 80021e8:	40020430 	.word	0x40020430
 80021ec:	40020444 	.word	0x40020444
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40020000 	.word	0x40020000
 80021f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021fc:	e002      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 80021fe:	2320      	movs	r3, #32
 8002200:	e000      	b.n	8002204 <HAL_DMA_IRQHandler+0x308>
 8002202:	2302      	movs	r3, #2
 8002204:	4a4e      	ldr	r2, [pc, #312]	; (8002340 <HAL_DMA_IRQHandler+0x444>)
 8002206:	6053      	str	r3, [r2, #4]
 8002208:	e057      	b.n	80022ba <HAL_DMA_IRQHandler+0x3be>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <HAL_DMA_IRQHandler+0x448>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d04f      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x3b8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a4b      	ldr	r2, [pc, #300]	; (8002348 <HAL_DMA_IRQHandler+0x44c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d048      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x3b4>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a4a      	ldr	r2, [pc, #296]	; (800234c <HAL_DMA_IRQHandler+0x450>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d040      	beq.n	80022aa <HAL_DMA_IRQHandler+0x3ae>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a48      	ldr	r2, [pc, #288]	; (8002350 <HAL_DMA_IRQHandler+0x454>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d038      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x3a8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a47      	ldr	r2, [pc, #284]	; (8002354 <HAL_DMA_IRQHandler+0x458>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d030      	beq.n	800229e <HAL_DMA_IRQHandler+0x3a2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a45      	ldr	r2, [pc, #276]	; (8002358 <HAL_DMA_IRQHandler+0x45c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d028      	beq.n	8002298 <HAL_DMA_IRQHandler+0x39c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a44      	ldr	r2, [pc, #272]	; (800235c <HAL_DMA_IRQHandler+0x460>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d020      	beq.n	8002292 <HAL_DMA_IRQHandler+0x396>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a42      	ldr	r2, [pc, #264]	; (8002360 <HAL_DMA_IRQHandler+0x464>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_DMA_IRQHandler+0x392>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a41      	ldr	r2, [pc, #260]	; (8002364 <HAL_DMA_IRQHandler+0x468>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d012      	beq.n	800228a <HAL_DMA_IRQHandler+0x38e>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a3f      	ldr	r2, [pc, #252]	; (8002368 <HAL_DMA_IRQHandler+0x46c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00a      	beq.n	8002284 <HAL_DMA_IRQHandler+0x388>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a3e      	ldr	r2, [pc, #248]	; (800236c <HAL_DMA_IRQHandler+0x470>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d102      	bne.n	800227e <HAL_DMA_IRQHandler+0x382>
 8002278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227c:	e01b      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 800227e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002282:	e018      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 8002284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002288:	e015      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 800228a:	2320      	movs	r3, #32
 800228c:	e013      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 800228e:	2302      	movs	r3, #2
 8002290:	e011      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 8002292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002296:	e00e      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 8002298:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800229c:	e00b      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 800229e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a2:	e008      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 80022a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a8:	e005      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 80022aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ae:	e002      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 80022b0:	2320      	movs	r3, #32
 80022b2:	e000      	b.n	80022b6 <HAL_DMA_IRQHandler+0x3ba>
 80022b4:	2302      	movs	r3, #2
 80022b6:	4a2e      	ldr	r2, [pc, #184]	; (8002370 <HAL_DMA_IRQHandler+0x474>)
 80022b8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d034      	beq.n	8002334 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80022d2:	e02f      	b.n	8002334 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	2208      	movs	r2, #8
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d028      	beq.n	8002336 <HAL_DMA_IRQHandler+0x43a>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d023      	beq.n	8002336 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 020e 	bic.w	r2, r2, #14
 80022fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	2101      	movs	r1, #1
 8002308:	fa01 f202 	lsl.w	r2, r1, r2
 800230c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002328:	2b00      	cmp	r3, #0
 800232a:	d004      	beq.n	8002336 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
    }
  }
  return;
 8002334:	bf00      	nop
 8002336:	bf00      	nop
}
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40020400 	.word	0x40020400
 8002344:	40020008 	.word	0x40020008
 8002348:	4002001c 	.word	0x4002001c
 800234c:	40020030 	.word	0x40020030
 8002350:	40020044 	.word	0x40020044
 8002354:	40020058 	.word	0x40020058
 8002358:	4002006c 	.word	0x4002006c
 800235c:	40020080 	.word	0x40020080
 8002360:	40020408 	.word	0x40020408
 8002364:	4002041c 	.word	0x4002041c
 8002368:	40020430 	.word	0x40020430
 800236c:	40020444 	.word	0x40020444
 8002370:	40020000 	.word	0x40020000

08002374 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	2101      	movs	r1, #1
 800238c:	fa01 f202 	lsl.w	r2, r1, r2
 8002390:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d108      	bne.n	80023b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023b2:	e007      	b.n	80023c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
	...

080023d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_FLASH_Unlock+0x40>)
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <HAL_FLASH_Unlock+0x40>)
 80023e8:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <HAL_FLASH_Unlock+0x44>)
 80023ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HAL_FLASH_Unlock+0x40>)
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_FLASH_Unlock+0x48>)
 80023f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_FLASH_Unlock+0x40>)
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002402:	79fb      	ldrb	r3, [r7, #7]
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40022000 	.word	0x40022000
 8002414:	45670123 	.word	0x45670123
 8002418:	cdef89ab 	.word	0xcdef89ab

0800241c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_FLASH_Lock+0x1c>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_FLASH_Lock+0x1c>)
 8002426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800242a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40022000 	.word	0x40022000

0800243c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff fa2a 	bl	800189c <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800244a:	e010      	b.n	800246e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002452:	d00c      	beq.n	800246e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <FLASH_WaitForLastOperation+0x2e>
 800245a:	f7ff fa1f 	bl	800189c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d201      	bcs.n	800246e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e025      	b.n	80024ba <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <FLASH_WaitForLastOperation+0x88>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e8      	bne.n	800244c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <FLASH_WaitForLastOperation+0x88>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <FLASH_WaitForLastOperation+0x88>)
 8002488:	2220      	movs	r2, #32
 800248a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <FLASH_WaitForLastOperation+0x88>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <FLASH_WaitForLastOperation+0x88>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <FLASH_WaitForLastOperation+0x88>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80024b0:	f000 f80a 	bl	80024c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40022000 	.word	0x40022000

080024c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <FLASH_SetErrorCode+0x98>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <FLASH_SetErrorCode+0x9c>)
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	f043 0302 	orr.w	r3, r3, #2
 80024e6:	4a1f      	ldr	r2, [pc, #124]	; (8002564 <FLASH_SetErrorCode+0x9c>)
 80024e8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f043 0310 	orr.w	r3, r3, #16
 80024f0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80024f2:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <FLASH_SetErrorCode+0x98>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80024fe:	4b19      	ldr	r3, [pc, #100]	; (8002564 <FLASH_SetErrorCode+0x9c>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	4a17      	ldr	r2, [pc, #92]	; (8002564 <FLASH_SetErrorCode+0x9c>)
 8002508:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <FLASH_SetErrorCode+0x98>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <FLASH_SetErrorCode+0x9c>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	4a0f      	ldr	r2, [pc, #60]	; (8002564 <FLASH_SetErrorCode+0x9c>)
 8002528:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <FLASH_SetErrorCode+0x98>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a0c      	ldr	r2, [pc, #48]	; (8002560 <FLASH_SetErrorCode+0x98>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f240 1201 	movw	r2, #257	; 0x101
 800253c:	4293      	cmp	r3, r2
 800253e:	d106      	bne.n	800254e <FLASH_SetErrorCode+0x86>
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <FLASH_SetErrorCode+0x98>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <FLASH_SetErrorCode+0x98>)
 8002546:	f023 0301 	bic.w	r3, r3, #1
 800254a:	61d3      	str	r3, [r2, #28]
}  
 800254c:	e002      	b.n	8002554 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <FLASH_SetErrorCode+0x98>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	60d3      	str	r3, [r2, #12]
}  
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40022000 	.word	0x40022000
 8002564:	20001eb0 	.word	0x20001eb0

08002568 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800257a:	4b2f      	ldr	r3, [pc, #188]	; (8002638 <HAL_FLASHEx_Erase+0xd0>)
 800257c:	7e1b      	ldrb	r3, [r3, #24]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_FLASHEx_Erase+0x1e>
 8002582:	2302      	movs	r3, #2
 8002584:	e053      	b.n	800262e <HAL_FLASHEx_Erase+0xc6>
 8002586:	4b2c      	ldr	r3, [pc, #176]	; (8002638 <HAL_FLASHEx_Erase+0xd0>)
 8002588:	2201      	movs	r2, #1
 800258a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d116      	bne.n	80025c2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002594:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002598:	f7ff ff50 	bl	800243c <FLASH_WaitForLastOperation>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d141      	bne.n	8002626 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f000 f84c 	bl	8002640 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025ac:	f7ff ff46 	bl	800243c <FLASH_WaitForLastOperation>
 80025b0:	4603      	mov	r3, r0
 80025b2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80025b4:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_FLASHEx_Erase+0xd4>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	4a20      	ldr	r2, [pc, #128]	; (800263c <HAL_FLASHEx_Erase+0xd4>)
 80025ba:	f023 0304 	bic.w	r3, r3, #4
 80025be:	6113      	str	r3, [r2, #16]
 80025c0:	e031      	b.n	8002626 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80025c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025c6:	f7ff ff39 	bl	800243c <FLASH_WaitForLastOperation>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d12a      	bne.n	8002626 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f04f 32ff 	mov.w	r2, #4294967295
 80025d6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	e019      	b.n	8002614 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80025e0:	68b8      	ldr	r0, [r7, #8]
 80025e2:	f000 f849 	bl	8002678 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025e6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025ea:	f7ff ff27 	bl	800243c <FLASH_WaitForLastOperation>
 80025ee:	4603      	mov	r3, r0
 80025f0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_FLASHEx_Erase+0xd4>)
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	4a11      	ldr	r2, [pc, #68]	; (800263c <HAL_FLASHEx_Erase+0xd4>)
 80025f8:	f023 0302 	bic.w	r3, r3, #2
 80025fc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	601a      	str	r2, [r3, #0]
            break;
 800260a:	e00c      	b.n	8002626 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002612:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	02da      	lsls	r2, r3, #11
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	429a      	cmp	r2, r3
 8002624:	d3dc      	bcc.n	80025e0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_FLASHEx_Erase+0xd0>)
 8002628:	2200      	movs	r2, #0
 800262a:	761a      	strb	r2, [r3, #24]

  return status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20001eb0 	.word	0x20001eb0
 800263c:	40022000 	.word	0x40022000

08002640 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <FLASH_MassErase+0x30>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <FLASH_MassErase+0x34>)
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	4a08      	ldr	r2, [pc, #32]	; (8002674 <FLASH_MassErase+0x34>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <FLASH_MassErase+0x34>)
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <FLASH_MassErase+0x34>)
 8002660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002664:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20001eb0 	.word	0x20001eb0
 8002674:	40022000 	.word	0x40022000

08002678 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002680:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <FLASH_PageErase+0x38>)
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <FLASH_PageErase+0x3c>)
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <FLASH_PageErase+0x3c>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002692:	4a08      	ldr	r2, [pc, #32]	; (80026b4 <FLASH_PageErase+0x3c>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <FLASH_PageErase+0x3c>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <FLASH_PageErase+0x3c>)
 800269e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	20001eb0 	.word	0x20001eb0
 80026b4:	40022000 	.word	0x40022000

080026b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b08b      	sub	sp, #44	; 0x2c
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026c2:	2300      	movs	r3, #0
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ca:	e179      	b.n	80029c0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026cc:	2201      	movs	r2, #1
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f040 8168 	bne.w	80029ba <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4aa0      	ldr	r2, [pc, #640]	; (8002970 <HAL_GPIO_Init+0x2b8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d05e      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 80026f4:	4a9e      	ldr	r2, [pc, #632]	; (8002970 <HAL_GPIO_Init+0x2b8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d875      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 80026fa:	4a9e      	ldr	r2, [pc, #632]	; (8002974 <HAL_GPIO_Init+0x2bc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d058      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002700:	4a9c      	ldr	r2, [pc, #624]	; (8002974 <HAL_GPIO_Init+0x2bc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d86f      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002706:	4a9c      	ldr	r2, [pc, #624]	; (8002978 <HAL_GPIO_Init+0x2c0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d052      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 800270c:	4a9a      	ldr	r2, [pc, #616]	; (8002978 <HAL_GPIO_Init+0x2c0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d869      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002712:	4a9a      	ldr	r2, [pc, #616]	; (800297c <HAL_GPIO_Init+0x2c4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d04c      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002718:	4a98      	ldr	r2, [pc, #608]	; (800297c <HAL_GPIO_Init+0x2c4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d863      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 800271e:	4a98      	ldr	r2, [pc, #608]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d046      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
 8002724:	4a96      	ldr	r2, [pc, #600]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d85d      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 800272a:	2b12      	cmp	r3, #18
 800272c:	d82a      	bhi.n	8002784 <HAL_GPIO_Init+0xcc>
 800272e:	2b12      	cmp	r3, #18
 8002730:	d859      	bhi.n	80027e6 <HAL_GPIO_Init+0x12e>
 8002732:	a201      	add	r2, pc, #4	; (adr r2, 8002738 <HAL_GPIO_Init+0x80>)
 8002734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002738:	080027b3 	.word	0x080027b3
 800273c:	0800278d 	.word	0x0800278d
 8002740:	0800279f 	.word	0x0800279f
 8002744:	080027e1 	.word	0x080027e1
 8002748:	080027e7 	.word	0x080027e7
 800274c:	080027e7 	.word	0x080027e7
 8002750:	080027e7 	.word	0x080027e7
 8002754:	080027e7 	.word	0x080027e7
 8002758:	080027e7 	.word	0x080027e7
 800275c:	080027e7 	.word	0x080027e7
 8002760:	080027e7 	.word	0x080027e7
 8002764:	080027e7 	.word	0x080027e7
 8002768:	080027e7 	.word	0x080027e7
 800276c:	080027e7 	.word	0x080027e7
 8002770:	080027e7 	.word	0x080027e7
 8002774:	080027e7 	.word	0x080027e7
 8002778:	080027e7 	.word	0x080027e7
 800277c:	08002795 	.word	0x08002795
 8002780:	080027a9 	.word	0x080027a9
 8002784:	4a7f      	ldr	r2, [pc, #508]	; (8002984 <HAL_GPIO_Init+0x2cc>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800278a:	e02c      	b.n	80027e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	623b      	str	r3, [r7, #32]
          break;
 8002792:	e029      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	3304      	adds	r3, #4
 800279a:	623b      	str	r3, [r7, #32]
          break;
 800279c:	e024      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	3308      	adds	r3, #8
 80027a4:	623b      	str	r3, [r7, #32]
          break;
 80027a6:	e01f      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	330c      	adds	r3, #12
 80027ae:	623b      	str	r3, [r7, #32]
          break;
 80027b0:	e01a      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ba:	2304      	movs	r3, #4
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e013      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d105      	bne.n	80027d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027c8:	2308      	movs	r3, #8
 80027ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	611a      	str	r2, [r3, #16]
          break;
 80027d2:	e009      	b.n	80027e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d4:	2308      	movs	r3, #8
 80027d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	615a      	str	r2, [r3, #20]
          break;
 80027de:	e003      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
          break;
 80027e4:	e000      	b.n	80027e8 <HAL_GPIO_Init+0x130>
          break;
 80027e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2bff      	cmp	r3, #255	; 0xff
 80027ec:	d801      	bhi.n	80027f2 <HAL_GPIO_Init+0x13a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	e001      	b.n	80027f6 <HAL_GPIO_Init+0x13e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	d802      	bhi.n	8002804 <HAL_GPIO_Init+0x14c>
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	e002      	b.n	800280a <HAL_GPIO_Init+0x152>
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	3b08      	subs	r3, #8
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	210f      	movs	r1, #15
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	401a      	ands	r2, r3
 800281c:	6a39      	ldr	r1, [r7, #32]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	fa01 f303 	lsl.w	r3, r1, r3
 8002824:	431a      	orrs	r2, r3
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80c1 	beq.w	80029ba <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002838:	4b53      	ldr	r3, [pc, #332]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a52      	ldr	r2, [pc, #328]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002850:	4a4e      	ldr	r2, [pc, #312]	; (800298c <HAL_GPIO_Init+0x2d4>)
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	220f      	movs	r2, #15
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4013      	ands	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a46      	ldr	r2, [pc, #280]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d01f      	beq.n	80028bc <HAL_GPIO_Init+0x204>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a45      	ldr	r2, [pc, #276]	; (8002994 <HAL_GPIO_Init+0x2dc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d019      	beq.n	80028b8 <HAL_GPIO_Init+0x200>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a44      	ldr	r2, [pc, #272]	; (8002998 <HAL_GPIO_Init+0x2e0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_GPIO_Init+0x1fc>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a43      	ldr	r2, [pc, #268]	; (800299c <HAL_GPIO_Init+0x2e4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00d      	beq.n	80028b0 <HAL_GPIO_Init+0x1f8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a42      	ldr	r2, [pc, #264]	; (80029a0 <HAL_GPIO_Init+0x2e8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <HAL_GPIO_Init+0x1f4>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <HAL_GPIO_Init+0x2ec>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d101      	bne.n	80028a8 <HAL_GPIO_Init+0x1f0>
 80028a4:	2305      	movs	r3, #5
 80028a6:	e00a      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028a8:	2306      	movs	r3, #6
 80028aa:	e008      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028ac:	2304      	movs	r3, #4
 80028ae:	e006      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028b0:	2303      	movs	r3, #3
 80028b2:	e004      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e002      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_GPIO_Init+0x206>
 80028bc:	2300      	movs	r3, #0
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	f002 0203 	and.w	r2, r2, #3
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	4093      	lsls	r3, r2
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028ce:	492f      	ldr	r1, [pc, #188]	; (800298c <HAL_GPIO_Init+0x2d4>)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	089b      	lsrs	r3, r3, #2
 80028d4:	3302      	adds	r3, #2
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028e8:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	492e      	ldr	r1, [pc, #184]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	e006      	b.n	8002904 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	492a      	ldr	r1, [pc, #168]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002900:	4013      	ands	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	4924      	ldr	r1, [pc, #144]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
 800291c:	e006      	b.n	800292c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800291e:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	43db      	mvns	r3, r3
 8002926:	4920      	ldr	r1, [pc, #128]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002928:	4013      	ands	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	491a      	ldr	r1, [pc, #104]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	608b      	str	r3, [r1, #8]
 8002944:	e006      	b.n	8002954 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	43db      	mvns	r3, r3
 800294e:	4916      	ldr	r1, [pc, #88]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002950:	4013      	ands	r3, r2
 8002952:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d025      	beq.n	80029ac <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	4910      	ldr	r1, [pc, #64]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	60cb      	str	r3, [r1, #12]
 800296c:	e025      	b.n	80029ba <HAL_GPIO_Init+0x302>
 800296e:	bf00      	nop
 8002970:	10320000 	.word	0x10320000
 8002974:	10310000 	.word	0x10310000
 8002978:	10220000 	.word	0x10220000
 800297c:	10210000 	.word	0x10210000
 8002980:	10120000 	.word	0x10120000
 8002984:	10110000 	.word	0x10110000
 8002988:	40021000 	.word	0x40021000
 800298c:	40010000 	.word	0x40010000
 8002990:	40010800 	.word	0x40010800
 8002994:	40010c00 	.word	0x40010c00
 8002998:	40011000 	.word	0x40011000
 800299c:	40011400 	.word	0x40011400
 80029a0:	40011800 	.word	0x40011800
 80029a4:	40011c00 	.word	0x40011c00
 80029a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_GPIO_Init+0x324>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4909      	ldr	r1, [pc, #36]	; (80029dc <HAL_GPIO_Init+0x324>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	3301      	adds	r3, #1
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f47f ae7e 	bne.w	80026cc <HAL_GPIO_Init+0x14>
  }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	372c      	adds	r7, #44	; 0x2c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
 80029ec:	4613      	mov	r3, r2
 80029ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f0:	787b      	ldrb	r3, [r7, #1]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f6:	887a      	ldrh	r2, [r7, #2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029fc:	e003      	b.n	8002a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	041a      	lsls	r2, r3, #16
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	611a      	str	r2, [r3, #16]
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a22:	887a      	ldrh	r2, [r7, #2]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	041a      	lsls	r2, r3, #16
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43d9      	mvns	r1, r3
 8002a2e:	887b      	ldrh	r3, [r7, #2]
 8002a30:	400b      	ands	r3, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	611a      	str	r2, [r3, #16]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d006      	beq.n	8002a68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fe38 	bl	80006d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e12b      	b.n	8002cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fd fd42 	bl	8000524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ad8:	f000 fce4 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 8002adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4a81      	ldr	r2, [pc, #516]	; (8002ce8 <HAL_I2C_Init+0x274>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d807      	bhi.n	8002af8 <HAL_I2C_Init+0x84>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4a80      	ldr	r2, [pc, #512]	; (8002cec <HAL_I2C_Init+0x278>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	bf94      	ite	ls
 8002af0:	2301      	movls	r3, #1
 8002af2:	2300      	movhi	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e006      	b.n	8002b06 <HAL_I2C_Init+0x92>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a7d      	ldr	r2, [pc, #500]	; (8002cf0 <HAL_I2C_Init+0x27c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bf94      	ite	ls
 8002b00:	2301      	movls	r3, #1
 8002b02:	2300      	movhi	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0e7      	b.n	8002cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a78      	ldr	r2, [pc, #480]	; (8002cf4 <HAL_I2C_Init+0x280>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0c9b      	lsrs	r3, r3, #18
 8002b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a6a      	ldr	r2, [pc, #424]	; (8002ce8 <HAL_I2C_Init+0x274>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d802      	bhi.n	8002b48 <HAL_I2C_Init+0xd4>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	3301      	adds	r3, #1
 8002b46:	e009      	b.n	8002b5c <HAL_I2C_Init+0xe8>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	4a69      	ldr	r2, [pc, #420]	; (8002cf8 <HAL_I2C_Init+0x284>)
 8002b54:	fba2 2303 	umull	r2, r3, r2, r3
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002b6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	495c      	ldr	r1, [pc, #368]	; (8002ce8 <HAL_I2C_Init+0x274>)
 8002b78:	428b      	cmp	r3, r1
 8002b7a:	d819      	bhi.n	8002bb0 <HAL_I2C_Init+0x13c>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1e59      	subs	r1, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b8a:	1c59      	adds	r1, r3, #1
 8002b8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b90:	400b      	ands	r3, r1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <HAL_I2C_Init+0x138>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1e59      	subs	r1, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002baa:	e051      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002bac:	2304      	movs	r3, #4
 8002bae:	e04f      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d111      	bne.n	8002bdc <HAL_I2C_Init+0x168>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e58      	subs	r0, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	440b      	add	r3, r1
 8002bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e012      	b.n	8002c02 <HAL_I2C_Init+0x18e>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1e58      	subs	r0, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	0099      	lsls	r1, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2301      	moveq	r3, #1
 8002bfe:	2300      	movne	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Init+0x196>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e022      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10e      	bne.n	8002c30 <HAL_I2C_Init+0x1bc>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e58      	subs	r0, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	440b      	add	r3, r1
 8002c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c24:	3301      	adds	r3, #1
 8002c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c2e:	e00f      	b.n	8002c50 <HAL_I2C_Init+0x1dc>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1e58      	subs	r0, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	0099      	lsls	r1, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c46:	3301      	adds	r3, #1
 8002c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	6809      	ldr	r1, [r1, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69da      	ldr	r2, [r3, #28]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6911      	ldr	r1, [r2, #16]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	000186a0 	.word	0x000186a0
 8002cec:	001e847f 	.word	0x001e847f
 8002cf0:	003d08ff 	.word	0x003d08ff
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	10624dd3 	.word	0x10624dd3

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e26c      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 8087 	beq.w	8002e2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d1c:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d00c      	beq.n	8002d42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d28:	4b8f      	ldr	r3, [pc, #572]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d112      	bne.n	8002d5a <HAL_RCC_OscConfig+0x5e>
 8002d34:	4b8c      	ldr	r3, [pc, #560]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d40:	d10b      	bne.n	8002d5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d42:	4b89      	ldr	r3, [pc, #548]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d06c      	beq.n	8002e28 <HAL_RCC_OscConfig+0x12c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d168      	bne.n	8002e28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e246      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x76>
 8002d64:	4b80      	ldr	r3, [pc, #512]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a7f      	ldr	r2, [pc, #508]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	e02e      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b7b      	ldr	r3, [pc, #492]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a7a      	ldr	r2, [pc, #488]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b78      	ldr	r3, [pc, #480]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a77      	ldr	r2, [pc, #476]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e01d      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0xbc>
 8002d9e:	4b72      	ldr	r3, [pc, #456]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a71      	ldr	r2, [pc, #452]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b6f      	ldr	r3, [pc, #444]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6e      	ldr	r2, [pc, #440]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e00b      	b.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
 8002db8:	4b6b      	ldr	r3, [pc, #428]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a6a      	ldr	r2, [pc, #424]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b68      	ldr	r3, [pc, #416]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a67      	ldr	r2, [pc, #412]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d013      	beq.n	8002e00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fd60 	bl	800189c <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de0:	f7fe fd5c 	bl	800189c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b64      	cmp	r3, #100	; 0x64
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e1fa      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b5d      	ldr	r3, [pc, #372]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe4>
 8002dfe:	e014      	b.n	8002e2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e00:	f7fe fd4c 	bl	800189c <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe fd48 	bl	800189c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e1e6      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	4b53      	ldr	r3, [pc, #332]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x10c>
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d063      	beq.n	8002efe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e36:	4b4c      	ldr	r3, [pc, #304]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 030c 	and.w	r3, r3, #12
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e42:	4b49      	ldr	r3, [pc, #292]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d11c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x18c>
 8002e4e:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d116      	bne.n	8002e88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5a:	4b43      	ldr	r3, [pc, #268]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <HAL_RCC_OscConfig+0x176>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d001      	beq.n	8002e72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e1ba      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b3d      	ldr	r3, [pc, #244]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4939      	ldr	r1, [pc, #228]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	e03a      	b.n	8002efe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e90:	4b36      	ldr	r3, [pc, #216]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e96:	f7fe fd01 	bl	800189c <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9c:	e008      	b.n	8002eb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9e:	f7fe fcfd 	bl	800189c <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e19b      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	4b2d      	ldr	r3, [pc, #180]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0f0      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	4927      	ldr	r1, [pc, #156]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	e015      	b.n	8002efe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fce0 	bl	800189c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fe fcdc 	bl	800189c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e17a      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d03a      	beq.n	8002f80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d019      	beq.n	8002f46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f18:	f7fe fcc0 	bl	800189c <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f20:	f7fe fcbc 	bl	800189c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e15a      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f000 fad8 	bl	80034f4 <RCC_Delay>
 8002f44:	e01c      	b.n	8002f80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4c:	f7fe fca6 	bl	800189c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f52:	e00f      	b.n	8002f74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f54:	f7fe fca2 	bl	800189c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d908      	bls.n	8002f74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e140      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	42420000 	.word	0x42420000
 8002f70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f74:	4b9e      	ldr	r3, [pc, #632]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e9      	bne.n	8002f54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80a6 	beq.w	80030da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f92:	4b97      	ldr	r3, [pc, #604]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10d      	bne.n	8002fba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9e:	4b94      	ldr	r3, [pc, #592]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4a93      	ldr	r2, [pc, #588]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8002fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	61d3      	str	r3, [r2, #28]
 8002faa:	4b91      	ldr	r3, [pc, #580]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b8e      	ldr	r3, [pc, #568]	; (80031f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b8b      	ldr	r3, [pc, #556]	; (80031f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a8a      	ldr	r2, [pc, #552]	; (80031f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fe fc63 	bl	800189c <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fe fc5f 	bl	800189c <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0fd      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b81      	ldr	r3, [pc, #516]	; (80031f4 <HAL_RCC_OscConfig+0x4f8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <HAL_RCC_OscConfig+0x312>
 8003000:	4b7b      	ldr	r3, [pc, #492]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4a7a      	ldr	r2, [pc, #488]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6213      	str	r3, [r2, #32]
 800300c:	e02d      	b.n	800306a <HAL_RCC_OscConfig+0x36e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10c      	bne.n	8003030 <HAL_RCC_OscConfig+0x334>
 8003016:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	4a75      	ldr	r2, [pc, #468]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	6213      	str	r3, [r2, #32]
 8003022:	4b73      	ldr	r3, [pc, #460]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4a72      	ldr	r2, [pc, #456]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	f023 0304 	bic.w	r3, r3, #4
 800302c:	6213      	str	r3, [r2, #32]
 800302e:	e01c      	b.n	800306a <HAL_RCC_OscConfig+0x36e>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b05      	cmp	r3, #5
 8003036:	d10c      	bne.n	8003052 <HAL_RCC_OscConfig+0x356>
 8003038:	4b6d      	ldr	r3, [pc, #436]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4a6c      	ldr	r2, [pc, #432]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	6213      	str	r3, [r2, #32]
 8003044:	4b6a      	ldr	r3, [pc, #424]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	4a69      	ldr	r2, [pc, #420]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6213      	str	r3, [r2, #32]
 8003050:	e00b      	b.n	800306a <HAL_RCC_OscConfig+0x36e>
 8003052:	4b67      	ldr	r3, [pc, #412]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4a66      	ldr	r2, [pc, #408]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6213      	str	r3, [r2, #32]
 800305e:	4b64      	ldr	r3, [pc, #400]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4a63      	ldr	r2, [pc, #396]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d015      	beq.n	800309e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003072:	f7fe fc13 	bl	800189c <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	e00a      	b.n	8003090 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe fc0f 	bl	800189c <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0ab      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	4b57      	ldr	r3, [pc, #348]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ee      	beq.n	800307a <HAL_RCC_OscConfig+0x37e>
 800309c:	e014      	b.n	80030c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309e:	f7fe fbfd 	bl	800189c <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	e00a      	b.n	80030bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a6:	f7fe fbf9 	bl	800189c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e095      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030bc:	4b4c      	ldr	r3, [pc, #304]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ee      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d105      	bne.n	80030da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ce:	4b48      	ldr	r3, [pc, #288]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4a47      	ldr	r2, [pc, #284]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 80030d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 8081 	beq.w	80031e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e4:	4b42      	ldr	r3, [pc, #264]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 030c 	and.w	r3, r3, #12
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d061      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d146      	bne.n	8003186 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f8:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <HAL_RCC_OscConfig+0x4fc>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fbcd 	bl	800189c <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe fbc9 	bl	800189c <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e067      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003118:	4b35      	ldr	r3, [pc, #212]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d108      	bne.n	8003140 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800312e:	4b30      	ldr	r3, [pc, #192]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	492d      	ldr	r1, [pc, #180]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a19      	ldr	r1, [r3, #32]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	430b      	orrs	r3, r1
 8003152:	4927      	ldr	r1, [pc, #156]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_OscConfig+0x4fc>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fe fb9d 	bl	800189c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe fb99 	bl	800189c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e037      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003178:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x46a>
 8003184:	e02f      	b.n	80031e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <HAL_RCC_OscConfig+0x4fc>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7fe fb86 	bl	800189c <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003194:	f7fe fb82 	bl	800189c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e020      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x498>
 80031b2:	e018      	b.n	80031e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e013      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_RCC_OscConfig+0x4f4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031de:	429a      	cmp	r2, r3
 80031e0:	d001      	beq.n	80031e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	40007000 	.word	0x40007000
 80031f8:	42420060 	.word	0x42420060

080031fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0d0      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003210:	4b6a      	ldr	r3, [pc, #424]	; (80033bc <HAL_RCC_ClockConfig+0x1c0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d910      	bls.n	8003240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b67      	ldr	r3, [pc, #412]	; (80033bc <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0207 	bic.w	r2, r3, #7
 8003226:	4965      	ldr	r1, [pc, #404]	; (80033bc <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b63      	ldr	r3, [pc, #396]	; (80033bc <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0b8      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003258:	4b59      	ldr	r3, [pc, #356]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003262:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003270:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800327a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800327c:	4b50      	ldr	r3, [pc, #320]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	494d      	ldr	r1, [pc, #308]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d040      	beq.n	800331c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d115      	bne.n	80032da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e07f      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ba:	4b41      	ldr	r3, [pc, #260]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e073      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ca:	4b3d      	ldr	r3, [pc, #244]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e06b      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032da:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f023 0203 	bic.w	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4936      	ldr	r1, [pc, #216]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ec:	f7fe fad6 	bl	800189c <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	e00a      	b.n	800330a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f4:	f7fe fad2 	bl	800189c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e053      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 020c 	and.w	r2, r3, #12
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	429a      	cmp	r2, r3
 800331a:	d1eb      	bne.n	80032f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <HAL_RCC_ClockConfig+0x1c0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d210      	bcs.n	800334c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 0207 	bic.w	r2, r3, #7
 8003332:	4922      	ldr	r1, [pc, #136]	; (80033bc <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b20      	ldr	r3, [pc, #128]	; (80033bc <HAL_RCC_ClockConfig+0x1c0>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e032      	b.n	80033b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4916      	ldr	r1, [pc, #88]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d009      	beq.n	800338a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003376:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	490e      	ldr	r1, [pc, #56]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800338a:	f000 f821 	bl	80033d0 <HAL_RCC_GetSysClockFreq>
 800338e:	4602      	mov	r2, r0
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	490a      	ldr	r1, [pc, #40]	; (80033c4 <HAL_RCC_ClockConfig+0x1c8>)
 800339c:	5ccb      	ldrb	r3, [r1, r3]
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <HAL_RCC_ClockConfig+0x1cc>)
 80033a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_RCC_ClockConfig+0x1d0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fa34 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40022000 	.word	0x40022000
 80033c0:	40021000 	.word	0x40021000
 80033c4:	0800504c 	.word	0x0800504c
 80033c8:	20000004 	.word	0x20000004
 80033cc:	20000008 	.word	0x20000008

080033d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d0:	b490      	push	{r4, r7}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033d8:	1d3c      	adds	r4, r7, #4
 80033da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033e0:	f240 2301 	movw	r3, #513	; 0x201
 80033e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b04      	cmp	r3, #4
 8003408:	d002      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x40>
 800340a:	2b08      	cmp	r3, #8
 800340c:	d003      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0x46>
 800340e:	e02d      	b.n	800346c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003412:	623b      	str	r3, [r7, #32]
      break;
 8003414:	e02d      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	0c9b      	lsrs	r3, r3, #18
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003422:	4413      	add	r3, r2
 8003424:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003428:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	0c5b      	lsrs	r3, r3, #17
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003442:	4413      	add	r3, r2
 8003444:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003448:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <HAL_RCC_GetSysClockFreq+0xb8>)
 800344e:	fb02 f203 	mul.w	r2, r2, r3
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	fbb2 f3f3 	udiv	r3, r2, r3
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
 800345a:	e004      	b.n	8003466 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	623b      	str	r3, [r7, #32]
      break;
 800346a:	e002      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_GetSysClockFreq+0xb8>)
 800346e:	623b      	str	r3, [r7, #32]
      break;
 8003470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003472:	6a3b      	ldr	r3, [r7, #32]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bc90      	pop	{r4, r7}
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	08004d18 	.word	0x08004d18
 8003484:	40021000 	.word	0x40021000
 8003488:	007a1200 	.word	0x007a1200
 800348c:	003d0900 	.word	0x003d0900

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b02      	ldr	r3, [pc, #8]	; (80034a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	20000004 	.word	0x20000004

080034a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034a8:	f7ff fff2 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	0a1b      	lsrs	r3, r3, #8
 80034b4:	f003 0307 	and.w	r3, r3, #7
 80034b8:	4903      	ldr	r1, [pc, #12]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ba:	5ccb      	ldrb	r3, [r1, r3]
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	0800505c 	.word	0x0800505c

080034cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d0:	f7ff ffde 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034d4:	4602      	mov	r2, r0
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	0adb      	lsrs	r3, r3, #11
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	4903      	ldr	r1, [pc, #12]	; (80034f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e2:	5ccb      	ldrb	r3, [r1, r3]
 80034e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	0800505c 	.word	0x0800505c

080034f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <RCC_Delay+0x34>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <RCC_Delay+0x38>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0a5b      	lsrs	r3, r3, #9
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003510:	bf00      	nop
  }
  while (Delay --);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	60fa      	str	r2, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f9      	bne.n	8003510 <RCC_Delay+0x1c>
}
 800351c:	bf00      	nop
 800351e:	bf00      	nop
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr
 8003528:	20000004 	.word	0x20000004
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e076      	b.n	8003630 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003552:	d009      	beq.n	8003568 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	61da      	str	r2, [r3, #28]
 800355a:	e005      	b.n	8003568 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fea2 	bl	80012cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	ea42 0103 	orr.w	r1, r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	0c1a      	lsrs	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f002 0204 	and.w	r2, r2, #4
 800360e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	69da      	ldr	r2, [r3, #28]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800361e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003654:	2302      	movs	r3, #2
 8003656:	e0e3      	b.n	8003820 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003666:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800366e:	7dbb      	ldrb	r3, [r7, #22]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d00d      	beq.n	8003690 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367a:	d106      	bne.n	800368a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <HAL_SPI_TransmitReceive_DMA+0x52>
 8003684:	7dbb      	ldrb	r3, [r7, #22]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d002      	beq.n	8003690 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800368a:	2302      	movs	r3, #2
 800368c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800368e:	e0c2      	b.n	8003816 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d102      	bne.n	80036a8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80036a6:	e0b6      	b.n	8003816 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d003      	beq.n	80036bc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2205      	movs	r2, #5
 80036b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	887a      	ldrh	r2, [r7, #2]
 80036d2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	887a      	ldrh	r2, [r7, #2]
 80036de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d108      	bne.n	8003710 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	4a49      	ldr	r2, [pc, #292]	; (8003828 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003704:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370a:	4a48      	ldr	r2, [pc, #288]	; (800382c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800370c:	629a      	str	r2, [r3, #40]	; 0x28
 800370e:	e007      	b.n	8003720 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003714:	4a46      	ldr	r2, [pc, #280]	; (8003830 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371c:	4a45      	ldr	r2, [pc, #276]	; (8003834 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003724:	4a44      	ldr	r2, [pc, #272]	; (8003838 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003726:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800372c:	2200      	movs	r2, #0
 800372e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	4619      	mov	r1, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003746:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003748:	f7fe fa36 	bl	8001bb8 <HAL_DMA_Start_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00c      	beq.n	800376c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003756:	f043 0210 	orr.w	r2, r3, #16
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800376a:	e054      	b.n	8003816 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003780:	2200      	movs	r2, #0
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003788:	2200      	movs	r2, #0
 800378a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003798:	2200      	movs	r2, #0
 800379a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	4619      	mov	r1, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80037b4:	f7fe fa00 	bl	8001bb8 <HAL_DMA_Start_IT>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00c      	beq.n	80037d8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c2:	f043 0210 	orr.w	r2, r3, #16
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80037d6:	e01e      	b.n	8003816 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e2:	2b40      	cmp	r3, #64	; 0x40
 80037e4:	d007      	beq.n	80037f6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037f4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0220 	orr.w	r2, r2, #32
 8003804:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0202 	orr.w	r2, r2, #2
 8003814:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800381e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	08003c05 	.word	0x08003c05
 800382c:	08003ad1 	.word	0x08003ad1
 8003830:	08003c21 	.word	0x08003c21
 8003834:	08003b77 	.word	0x08003b77
 8003838:	08003c3d 	.word	0x08003c3d

0800383c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00f      	beq.n	8003870 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fa0e 	bl	8001c76 <HAL_DMA_Abort>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d007      	beq.n	8003870 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	f043 0210 	orr.w	r2, r3, #16
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00f      	beq.n	8003898 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe f9fa 	bl	8001c76 <HAL_DMA_Abort>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0203 	bic.w	r2, r2, #3
 80038a6:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	099b      	lsrs	r3, r3, #6
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10f      	bne.n	8003900 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
    return;
 80038fe:	e0be      	b.n	8003a7e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_SPI_IRQHandler+0x66>
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	09db      	lsrs	r3, r3, #7
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	d004      	beq.n	8003922 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
    return;
 8003920:	e0ad      	b.n	8003a7e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	095b      	lsrs	r3, r3, #5
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_SPI_IRQHandler+0x80>
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80a1 	beq.w	8003a7e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 809a 	beq.w	8003a7e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d023      	beq.n	800399e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b03      	cmp	r3, #3
 8003960:	d011      	beq.n	8003986 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f043 0204 	orr.w	r2, r3, #4
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800396e:	2300      	movs	r3, #0
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	e00b      	b.n	800399e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693b      	ldr	r3, [r7, #16]
        return;
 800399c:	e06f      	b.n	8003a7e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d014      	beq.n	80039d4 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d04f      	beq.n	8003a7c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d104      	bne.n	8003a08 <HAL_SPI_IRQHandler+0x14c>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d034      	beq.n	8003a72 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 0203 	bic.w	r2, r2, #3
 8003a16:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d011      	beq.n	8003a44 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <HAL_SPI_IRQHandler+0x1c8>)
 8003a26:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe f95d 	bl	8001cec <HAL_DMA_Abort_IT>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d016      	beq.n	8003a7a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <HAL_SPI_IRQHandler+0x1c8>)
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe f947 	bl	8001cec <HAL_DMA_Abort_IT>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003a70:	e003      	b.n	8003a7a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f823 	bl	8003abe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a78:	e000      	b.n	8003a7c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8003a7a:	bf00      	nop
    return;
 8003a7c:	bf00      	nop
  }
}
 8003a7e:	3720      	adds	r7, #32
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	08003c7d 	.word	0x08003c7d

08003a88 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr

08003ad0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ade:	f7fd fedd 	bl	800189c <HAL_GetTick>
 8003ae2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d03b      	beq.n	8003b6a <SPI_DMAReceiveCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0220 	bic.w	r2, r2, #32
 8003b00:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <SPI_DMAReceiveCplt+0x56>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b12:	d108      	bne.n	8003b26 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0203 	bic.w	r2, r2, #3
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	e007      	b.n	8003b36 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	2164      	movs	r1, #100	; 0x64
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f93a 	bl	8003db4 <SPI_EndRxTransaction>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <SPI_DMAReceiveCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff ffab 	bl	8003abe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003b68:	e002      	b.n	8003b70 <SPI_DMAReceiveCplt+0xa0>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f7ff ff8c 	bl	8003a88 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b84:	f7fd fe8a 	bl	800189c <HAL_GetTick>
 8003b88:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d02f      	beq.n	8003bf8 <SPI_DMATransmitReceiveCplt+0x82>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0220 	bic.w	r2, r2, #32
 8003ba6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	2164      	movs	r1, #100	; 0x64
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f953 	bl	8003e58 <SPI_EndRxTxTransaction>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0203 	bic.w	r2, r2, #3
 8003bd2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
      }
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <SPI_DMATransmitReceiveCplt+0x82>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f7ff ff64 	bl	8003abe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003bf6:	e002      	b.n	8003bfe <SPI_DMATransmitReceiveCplt+0x88>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7fc fd79 	bl	80006f0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff ff41 	bl	8003a9a <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c18:	bf00      	nop
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f7ff ff3c 	bl	8003aac <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c34:	bf00      	nop
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0203 	bic.w	r2, r2, #3
 8003c58:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f043 0210 	orr.w	r2, r3, #16
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f7ff ff25 	bl	8003abe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ff11 	bl	8003abe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cb4:	f7fd fdf2 	bl	800189c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003cc4:	f7fd fdea 	bl	800189c <HAL_GetTick>
 8003cc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003cca:	4b39      	ldr	r3, [pc, #228]	; (8003db0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	015b      	lsls	r3, r3, #5
 8003cd0:	0d1b      	lsrs	r3, r3, #20
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	fb02 f303 	mul.w	r3, r2, r3
 8003cd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cda:	e054      	b.n	8003d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d050      	beq.n	8003d86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ce4:	f7fd fdda 	bl	800189c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	69fa      	ldr	r2, [r7, #28]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d902      	bls.n	8003cfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d13d      	bne.n	8003d76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d12:	d111      	bne.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d1c:	d004      	beq.n	8003d28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d26:	d107      	bne.n	8003d38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d40:	d10f      	bne.n	8003d62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e017      	b.n	8003da6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	bf0c      	ite	eq
 8003d96:	2301      	moveq	r3, #1
 8003d98:	2300      	movne	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d19b      	bne.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000004 	.word	0x20000004

08003db4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc8:	d111      	bne.n	8003dee <SPI_EndRxTransaction+0x3a>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd2:	d004      	beq.n	8003dde <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ddc:	d107      	bne.n	8003dee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dec:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003df6:	d117      	bne.n	8003e28 <SPI_EndRxTransaction+0x74>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e00:	d112      	bne.n	8003e28 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7ff ff49 	bl	8003ca4 <SPI_WaitFlagStateUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d01a      	beq.n	8003e4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1c:	f043 0220 	orr.w	r2, r3, #32
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e013      	b.n	8003e50 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	2180      	movs	r1, #128	; 0x80
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff ff36 	bl	8003ca4 <SPI_WaitFlagStateUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e42:	f043 0220 	orr.w	r2, r3, #32
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e000      	b.n	8003e50 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2180      	movs	r1, #128	; 0x80
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f7ff ff18 	bl	8003ca4 <SPI_WaitFlagStateUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7e:	f043 0220 	orr.w	r2, r3, #32
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e000      	b.n	8003e8c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e03f      	b.n	8003f26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd fbbc 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	; 0x24
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f905 	bl	80040e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691a      	ldr	r2, [r3, #16]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b08a      	sub	sp, #40	; 0x28
 8003f32:	af02      	add	r7, sp, #8
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	603b      	str	r3, [r7, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d17c      	bne.n	8004048 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_UART_Transmit+0x2c>
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e075      	b.n	800404a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_UART_Transmit+0x3e>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e06e      	b.n	800404a <HAL_UART_Transmit+0x11c>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2221      	movs	r2, #33	; 0x21
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f82:	f7fd fc8b 	bl	800189c <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	88fa      	ldrh	r2, [r7, #6]
 8003f92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d108      	bne.n	8003fb0 <HAL_UART_Transmit+0x82>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e003      	b.n	8003fb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fc0:	e02a      	b.n	8004018 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2180      	movs	r1, #128	; 0x80
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f840 	bl	8004052 <UART_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e036      	b.n	800404a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e007      	b.n	800400a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3301      	adds	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1cf      	bne.n	8003fc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	2140      	movs	r1, #64	; 0x40
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f810 	bl	8004052 <UART_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e006      	b.n	800404a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e000      	b.n	800404a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004048:	2302      	movs	r3, #2
  }
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004062:	e02c      	b.n	80040be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	d028      	beq.n	80040be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <UART_WaitOnFlagUntilTimeout+0x30>
 8004072:	f7fd fc13 	bl	800189c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	429a      	cmp	r2, r3
 8004080:	d21d      	bcs.n	80040be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004090:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e00f      	b.n	80040de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4013      	ands	r3, r2
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	bf0c      	ite	eq
 80040ce:	2301      	moveq	r3, #1
 80040d0:	2300      	movne	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	79fb      	ldrb	r3, [r7, #7]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d0c3      	beq.n	8004064 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004122:	f023 030c 	bic.w	r3, r3, #12
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	6812      	ldr	r2, [r2, #0]
 800412a:	68b9      	ldr	r1, [r7, #8]
 800412c:	430b      	orrs	r3, r1
 800412e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2c      	ldr	r2, [pc, #176]	; (80041fc <UART_SetConfig+0x114>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d103      	bne.n	8004158 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004150:	f7ff f9bc 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	e002      	b.n	800415e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004158:	f7ff f9a4 	bl	80034a4 <HAL_RCC_GetPCLK1Freq>
 800415c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	009a      	lsls	r2, r3, #2
 8004168:	441a      	add	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	4a22      	ldr	r2, [pc, #136]	; (8004200 <UART_SetConfig+0x118>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	0119      	lsls	r1, r3, #4
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	009a      	lsls	r2, r3, #2
 8004188:	441a      	add	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	fbb2 f2f3 	udiv	r2, r2, r3
 8004194:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <UART_SetConfig+0x118>)
 8004196:	fba3 0302 	umull	r0, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2064      	movs	r0, #100	; 0x64
 800419e:	fb00 f303 	mul.w	r3, r0, r3
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	3332      	adds	r3, #50	; 0x32
 80041a8:	4a15      	ldr	r2, [pc, #84]	; (8004200 <UART_SetConfig+0x118>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b4:	4419      	add	r1, r3
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	009a      	lsls	r2, r3, #2
 80041c0:	441a      	add	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <UART_SetConfig+0x118>)
 80041ce:	fba3 0302 	umull	r0, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	2064      	movs	r0, #100	; 0x64
 80041d6:	fb00 f303 	mul.w	r3, r0, r3
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	3332      	adds	r3, #50	; 0x32
 80041e0:	4a07      	ldr	r2, [pc, #28]	; (8004200 <UART_SetConfig+0x118>)
 80041e2:	fba2 2303 	umull	r2, r3, r2, r3
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	440a      	add	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041f4:	bf00      	nop
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40013800 	.word	0x40013800
 8004200:	51eb851f 	.word	0x51eb851f

08004204 <__errno>:
 8004204:	4b01      	ldr	r3, [pc, #4]	; (800420c <__errno+0x8>)
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	20000010 	.word	0x20000010

08004210 <__libc_init_array>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	2600      	movs	r6, #0
 8004214:	4d0c      	ldr	r5, [pc, #48]	; (8004248 <__libc_init_array+0x38>)
 8004216:	4c0d      	ldr	r4, [pc, #52]	; (800424c <__libc_init_array+0x3c>)
 8004218:	1b64      	subs	r4, r4, r5
 800421a:	10a4      	asrs	r4, r4, #2
 800421c:	42a6      	cmp	r6, r4
 800421e:	d109      	bne.n	8004234 <__libc_init_array+0x24>
 8004220:	f000 fc6a 	bl	8004af8 <_init>
 8004224:	2600      	movs	r6, #0
 8004226:	4d0a      	ldr	r5, [pc, #40]	; (8004250 <__libc_init_array+0x40>)
 8004228:	4c0a      	ldr	r4, [pc, #40]	; (8004254 <__libc_init_array+0x44>)
 800422a:	1b64      	subs	r4, r4, r5
 800422c:	10a4      	asrs	r4, r4, #2
 800422e:	42a6      	cmp	r6, r4
 8004230:	d105      	bne.n	800423e <__libc_init_array+0x2e>
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	f855 3b04 	ldr.w	r3, [r5], #4
 8004238:	4798      	blx	r3
 800423a:	3601      	adds	r6, #1
 800423c:	e7ee      	b.n	800421c <__libc_init_array+0xc>
 800423e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004242:	4798      	blx	r3
 8004244:	3601      	adds	r6, #1
 8004246:	e7f2      	b.n	800422e <__libc_init_array+0x1e>
 8004248:	08005098 	.word	0x08005098
 800424c:	08005098 	.word	0x08005098
 8004250:	08005098 	.word	0x08005098
 8004254:	0800509c 	.word	0x0800509c

08004258 <memcmp>:
 8004258:	b530      	push	{r4, r5, lr}
 800425a:	2400      	movs	r4, #0
 800425c:	3901      	subs	r1, #1
 800425e:	42a2      	cmp	r2, r4
 8004260:	d101      	bne.n	8004266 <memcmp+0xe>
 8004262:	2000      	movs	r0, #0
 8004264:	e005      	b.n	8004272 <memcmp+0x1a>
 8004266:	5d03      	ldrb	r3, [r0, r4]
 8004268:	3401      	adds	r4, #1
 800426a:	5d0d      	ldrb	r5, [r1, r4]
 800426c:	42ab      	cmp	r3, r5
 800426e:	d0f6      	beq.n	800425e <memcmp+0x6>
 8004270:	1b58      	subs	r0, r3, r5
 8004272:	bd30      	pop	{r4, r5, pc}

08004274 <memcpy>:
 8004274:	440a      	add	r2, r1
 8004276:	4291      	cmp	r1, r2
 8004278:	f100 33ff 	add.w	r3, r0, #4294967295
 800427c:	d100      	bne.n	8004280 <memcpy+0xc>
 800427e:	4770      	bx	lr
 8004280:	b510      	push	{r4, lr}
 8004282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004286:	4291      	cmp	r1, r2
 8004288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800428c:	d1f9      	bne.n	8004282 <memcpy+0xe>
 800428e:	bd10      	pop	{r4, pc}

08004290 <memset>:
 8004290:	4603      	mov	r3, r0
 8004292:	4402      	add	r2, r0
 8004294:	4293      	cmp	r3, r2
 8004296:	d100      	bne.n	800429a <memset+0xa>
 8004298:	4770      	bx	lr
 800429a:	f803 1b01 	strb.w	r1, [r3], #1
 800429e:	e7f9      	b.n	8004294 <memset+0x4>

080042a0 <_vsiprintf_r>:
 80042a0:	b500      	push	{lr}
 80042a2:	b09b      	sub	sp, #108	; 0x6c
 80042a4:	9100      	str	r1, [sp, #0]
 80042a6:	9104      	str	r1, [sp, #16]
 80042a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042ac:	9105      	str	r1, [sp, #20]
 80042ae:	9102      	str	r1, [sp, #8]
 80042b0:	4905      	ldr	r1, [pc, #20]	; (80042c8 <_vsiprintf_r+0x28>)
 80042b2:	9103      	str	r1, [sp, #12]
 80042b4:	4669      	mov	r1, sp
 80042b6:	f000 f86f 	bl	8004398 <_svfiprintf_r>
 80042ba:	2200      	movs	r2, #0
 80042bc:	9b00      	ldr	r3, [sp, #0]
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	b01b      	add	sp, #108	; 0x6c
 80042c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80042c6:	bf00      	nop
 80042c8:	ffff0208 	.word	0xffff0208

080042cc <vsiprintf>:
 80042cc:	4613      	mov	r3, r2
 80042ce:	460a      	mov	r2, r1
 80042d0:	4601      	mov	r1, r0
 80042d2:	4802      	ldr	r0, [pc, #8]	; (80042dc <vsiprintf+0x10>)
 80042d4:	6800      	ldr	r0, [r0, #0]
 80042d6:	f7ff bfe3 	b.w	80042a0 <_vsiprintf_r>
 80042da:	bf00      	nop
 80042dc:	20000010 	.word	0x20000010

080042e0 <__ssputs_r>:
 80042e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042e4:	688e      	ldr	r6, [r1, #8]
 80042e6:	4682      	mov	sl, r0
 80042e8:	429e      	cmp	r6, r3
 80042ea:	460c      	mov	r4, r1
 80042ec:	4690      	mov	r8, r2
 80042ee:	461f      	mov	r7, r3
 80042f0:	d838      	bhi.n	8004364 <__ssputs_r+0x84>
 80042f2:	898a      	ldrh	r2, [r1, #12]
 80042f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042f8:	d032      	beq.n	8004360 <__ssputs_r+0x80>
 80042fa:	6825      	ldr	r5, [r4, #0]
 80042fc:	6909      	ldr	r1, [r1, #16]
 80042fe:	3301      	adds	r3, #1
 8004300:	eba5 0901 	sub.w	r9, r5, r1
 8004304:	6965      	ldr	r5, [r4, #20]
 8004306:	444b      	add	r3, r9
 8004308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800430c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004310:	106d      	asrs	r5, r5, #1
 8004312:	429d      	cmp	r5, r3
 8004314:	bf38      	it	cc
 8004316:	461d      	movcc	r5, r3
 8004318:	0553      	lsls	r3, r2, #21
 800431a:	d531      	bpl.n	8004380 <__ssputs_r+0xa0>
 800431c:	4629      	mov	r1, r5
 800431e:	f000 fb45 	bl	80049ac <_malloc_r>
 8004322:	4606      	mov	r6, r0
 8004324:	b950      	cbnz	r0, 800433c <__ssputs_r+0x5c>
 8004326:	230c      	movs	r3, #12
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	f8ca 3000 	str.w	r3, [sl]
 8004330:	89a3      	ldrh	r3, [r4, #12]
 8004332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004336:	81a3      	strh	r3, [r4, #12]
 8004338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433c:	464a      	mov	r2, r9
 800433e:	6921      	ldr	r1, [r4, #16]
 8004340:	f7ff ff98 	bl	8004274 <memcpy>
 8004344:	89a3      	ldrh	r3, [r4, #12]
 8004346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800434a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800434e:	81a3      	strh	r3, [r4, #12]
 8004350:	6126      	str	r6, [r4, #16]
 8004352:	444e      	add	r6, r9
 8004354:	6026      	str	r6, [r4, #0]
 8004356:	463e      	mov	r6, r7
 8004358:	6165      	str	r5, [r4, #20]
 800435a:	eba5 0509 	sub.w	r5, r5, r9
 800435e:	60a5      	str	r5, [r4, #8]
 8004360:	42be      	cmp	r6, r7
 8004362:	d900      	bls.n	8004366 <__ssputs_r+0x86>
 8004364:	463e      	mov	r6, r7
 8004366:	4632      	mov	r2, r6
 8004368:	4641      	mov	r1, r8
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	f000 fab8 	bl	80048e0 <memmove>
 8004370:	68a3      	ldr	r3, [r4, #8]
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	1b9b      	subs	r3, r3, r6
 8004376:	4432      	add	r2, r6
 8004378:	2000      	movs	r0, #0
 800437a:	60a3      	str	r3, [r4, #8]
 800437c:	6022      	str	r2, [r4, #0]
 800437e:	e7db      	b.n	8004338 <__ssputs_r+0x58>
 8004380:	462a      	mov	r2, r5
 8004382:	f000 fb6d 	bl	8004a60 <_realloc_r>
 8004386:	4606      	mov	r6, r0
 8004388:	2800      	cmp	r0, #0
 800438a:	d1e1      	bne.n	8004350 <__ssputs_r+0x70>
 800438c:	4650      	mov	r0, sl
 800438e:	6921      	ldr	r1, [r4, #16]
 8004390:	f000 fac0 	bl	8004914 <_free_r>
 8004394:	e7c7      	b.n	8004326 <__ssputs_r+0x46>
	...

08004398 <_svfiprintf_r>:
 8004398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800439c:	4698      	mov	r8, r3
 800439e:	898b      	ldrh	r3, [r1, #12]
 80043a0:	4607      	mov	r7, r0
 80043a2:	061b      	lsls	r3, r3, #24
 80043a4:	460d      	mov	r5, r1
 80043a6:	4614      	mov	r4, r2
 80043a8:	b09d      	sub	sp, #116	; 0x74
 80043aa:	d50e      	bpl.n	80043ca <_svfiprintf_r+0x32>
 80043ac:	690b      	ldr	r3, [r1, #16]
 80043ae:	b963      	cbnz	r3, 80043ca <_svfiprintf_r+0x32>
 80043b0:	2140      	movs	r1, #64	; 0x40
 80043b2:	f000 fafb 	bl	80049ac <_malloc_r>
 80043b6:	6028      	str	r0, [r5, #0]
 80043b8:	6128      	str	r0, [r5, #16]
 80043ba:	b920      	cbnz	r0, 80043c6 <_svfiprintf_r+0x2e>
 80043bc:	230c      	movs	r3, #12
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	f04f 30ff 	mov.w	r0, #4294967295
 80043c4:	e0d1      	b.n	800456a <_svfiprintf_r+0x1d2>
 80043c6:	2340      	movs	r3, #64	; 0x40
 80043c8:	616b      	str	r3, [r5, #20]
 80043ca:	2300      	movs	r3, #0
 80043cc:	9309      	str	r3, [sp, #36]	; 0x24
 80043ce:	2320      	movs	r3, #32
 80043d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043d4:	2330      	movs	r3, #48	; 0x30
 80043d6:	f04f 0901 	mov.w	r9, #1
 80043da:	f8cd 800c 	str.w	r8, [sp, #12]
 80043de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004584 <_svfiprintf_r+0x1ec>
 80043e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043e6:	4623      	mov	r3, r4
 80043e8:	469a      	mov	sl, r3
 80043ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043ee:	b10a      	cbz	r2, 80043f4 <_svfiprintf_r+0x5c>
 80043f0:	2a25      	cmp	r2, #37	; 0x25
 80043f2:	d1f9      	bne.n	80043e8 <_svfiprintf_r+0x50>
 80043f4:	ebba 0b04 	subs.w	fp, sl, r4
 80043f8:	d00b      	beq.n	8004412 <_svfiprintf_r+0x7a>
 80043fa:	465b      	mov	r3, fp
 80043fc:	4622      	mov	r2, r4
 80043fe:	4629      	mov	r1, r5
 8004400:	4638      	mov	r0, r7
 8004402:	f7ff ff6d 	bl	80042e0 <__ssputs_r>
 8004406:	3001      	adds	r0, #1
 8004408:	f000 80aa 	beq.w	8004560 <_svfiprintf_r+0x1c8>
 800440c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800440e:	445a      	add	r2, fp
 8004410:	9209      	str	r2, [sp, #36]	; 0x24
 8004412:	f89a 3000 	ldrb.w	r3, [sl]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 80a2 	beq.w	8004560 <_svfiprintf_r+0x1c8>
 800441c:	2300      	movs	r3, #0
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004426:	f10a 0a01 	add.w	sl, sl, #1
 800442a:	9304      	str	r3, [sp, #16]
 800442c:	9307      	str	r3, [sp, #28]
 800442e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004432:	931a      	str	r3, [sp, #104]	; 0x68
 8004434:	4654      	mov	r4, sl
 8004436:	2205      	movs	r2, #5
 8004438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800443c:	4851      	ldr	r0, [pc, #324]	; (8004584 <_svfiprintf_r+0x1ec>)
 800443e:	f000 fa41 	bl	80048c4 <memchr>
 8004442:	9a04      	ldr	r2, [sp, #16]
 8004444:	b9d8      	cbnz	r0, 800447e <_svfiprintf_r+0xe6>
 8004446:	06d0      	lsls	r0, r2, #27
 8004448:	bf44      	itt	mi
 800444a:	2320      	movmi	r3, #32
 800444c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004450:	0711      	lsls	r1, r2, #28
 8004452:	bf44      	itt	mi
 8004454:	232b      	movmi	r3, #43	; 0x2b
 8004456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800445a:	f89a 3000 	ldrb.w	r3, [sl]
 800445e:	2b2a      	cmp	r3, #42	; 0x2a
 8004460:	d015      	beq.n	800448e <_svfiprintf_r+0xf6>
 8004462:	4654      	mov	r4, sl
 8004464:	2000      	movs	r0, #0
 8004466:	f04f 0c0a 	mov.w	ip, #10
 800446a:	9a07      	ldr	r2, [sp, #28]
 800446c:	4621      	mov	r1, r4
 800446e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004472:	3b30      	subs	r3, #48	; 0x30
 8004474:	2b09      	cmp	r3, #9
 8004476:	d94e      	bls.n	8004516 <_svfiprintf_r+0x17e>
 8004478:	b1b0      	cbz	r0, 80044a8 <_svfiprintf_r+0x110>
 800447a:	9207      	str	r2, [sp, #28]
 800447c:	e014      	b.n	80044a8 <_svfiprintf_r+0x110>
 800447e:	eba0 0308 	sub.w	r3, r0, r8
 8004482:	fa09 f303 	lsl.w	r3, r9, r3
 8004486:	4313      	orrs	r3, r2
 8004488:	46a2      	mov	sl, r4
 800448a:	9304      	str	r3, [sp, #16]
 800448c:	e7d2      	b.n	8004434 <_svfiprintf_r+0x9c>
 800448e:	9b03      	ldr	r3, [sp, #12]
 8004490:	1d19      	adds	r1, r3, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	9103      	str	r1, [sp, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	bfbb      	ittet	lt
 800449a:	425b      	neglt	r3, r3
 800449c:	f042 0202 	orrlt.w	r2, r2, #2
 80044a0:	9307      	strge	r3, [sp, #28]
 80044a2:	9307      	strlt	r3, [sp, #28]
 80044a4:	bfb8      	it	lt
 80044a6:	9204      	strlt	r2, [sp, #16]
 80044a8:	7823      	ldrb	r3, [r4, #0]
 80044aa:	2b2e      	cmp	r3, #46	; 0x2e
 80044ac:	d10c      	bne.n	80044c8 <_svfiprintf_r+0x130>
 80044ae:	7863      	ldrb	r3, [r4, #1]
 80044b0:	2b2a      	cmp	r3, #42	; 0x2a
 80044b2:	d135      	bne.n	8004520 <_svfiprintf_r+0x188>
 80044b4:	9b03      	ldr	r3, [sp, #12]
 80044b6:	3402      	adds	r4, #2
 80044b8:	1d1a      	adds	r2, r3, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	9203      	str	r2, [sp, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfb8      	it	lt
 80044c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80044c6:	9305      	str	r3, [sp, #20]
 80044c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004594 <_svfiprintf_r+0x1fc>
 80044cc:	2203      	movs	r2, #3
 80044ce:	4650      	mov	r0, sl
 80044d0:	7821      	ldrb	r1, [r4, #0]
 80044d2:	f000 f9f7 	bl	80048c4 <memchr>
 80044d6:	b140      	cbz	r0, 80044ea <_svfiprintf_r+0x152>
 80044d8:	2340      	movs	r3, #64	; 0x40
 80044da:	eba0 000a 	sub.w	r0, r0, sl
 80044de:	fa03 f000 	lsl.w	r0, r3, r0
 80044e2:	9b04      	ldr	r3, [sp, #16]
 80044e4:	3401      	adds	r4, #1
 80044e6:	4303      	orrs	r3, r0
 80044e8:	9304      	str	r3, [sp, #16]
 80044ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ee:	2206      	movs	r2, #6
 80044f0:	4825      	ldr	r0, [pc, #148]	; (8004588 <_svfiprintf_r+0x1f0>)
 80044f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044f6:	f000 f9e5 	bl	80048c4 <memchr>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d038      	beq.n	8004570 <_svfiprintf_r+0x1d8>
 80044fe:	4b23      	ldr	r3, [pc, #140]	; (800458c <_svfiprintf_r+0x1f4>)
 8004500:	bb1b      	cbnz	r3, 800454a <_svfiprintf_r+0x1b2>
 8004502:	9b03      	ldr	r3, [sp, #12]
 8004504:	3307      	adds	r3, #7
 8004506:	f023 0307 	bic.w	r3, r3, #7
 800450a:	3308      	adds	r3, #8
 800450c:	9303      	str	r3, [sp, #12]
 800450e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004510:	4433      	add	r3, r6
 8004512:	9309      	str	r3, [sp, #36]	; 0x24
 8004514:	e767      	b.n	80043e6 <_svfiprintf_r+0x4e>
 8004516:	460c      	mov	r4, r1
 8004518:	2001      	movs	r0, #1
 800451a:	fb0c 3202 	mla	r2, ip, r2, r3
 800451e:	e7a5      	b.n	800446c <_svfiprintf_r+0xd4>
 8004520:	2300      	movs	r3, #0
 8004522:	f04f 0c0a 	mov.w	ip, #10
 8004526:	4619      	mov	r1, r3
 8004528:	3401      	adds	r4, #1
 800452a:	9305      	str	r3, [sp, #20]
 800452c:	4620      	mov	r0, r4
 800452e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004532:	3a30      	subs	r2, #48	; 0x30
 8004534:	2a09      	cmp	r2, #9
 8004536:	d903      	bls.n	8004540 <_svfiprintf_r+0x1a8>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0c5      	beq.n	80044c8 <_svfiprintf_r+0x130>
 800453c:	9105      	str	r1, [sp, #20]
 800453e:	e7c3      	b.n	80044c8 <_svfiprintf_r+0x130>
 8004540:	4604      	mov	r4, r0
 8004542:	2301      	movs	r3, #1
 8004544:	fb0c 2101 	mla	r1, ip, r1, r2
 8004548:	e7f0      	b.n	800452c <_svfiprintf_r+0x194>
 800454a:	ab03      	add	r3, sp, #12
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	462a      	mov	r2, r5
 8004550:	4638      	mov	r0, r7
 8004552:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <_svfiprintf_r+0x1f8>)
 8004554:	a904      	add	r1, sp, #16
 8004556:	f3af 8000 	nop.w
 800455a:	1c42      	adds	r2, r0, #1
 800455c:	4606      	mov	r6, r0
 800455e:	d1d6      	bne.n	800450e <_svfiprintf_r+0x176>
 8004560:	89ab      	ldrh	r3, [r5, #12]
 8004562:	065b      	lsls	r3, r3, #25
 8004564:	f53f af2c 	bmi.w	80043c0 <_svfiprintf_r+0x28>
 8004568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800456a:	b01d      	add	sp, #116	; 0x74
 800456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004570:	ab03      	add	r3, sp, #12
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	462a      	mov	r2, r5
 8004576:	4638      	mov	r0, r7
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <_svfiprintf_r+0x1f8>)
 800457a:	a904      	add	r1, sp, #16
 800457c:	f000 f87c 	bl	8004678 <_printf_i>
 8004580:	e7eb      	b.n	800455a <_svfiprintf_r+0x1c2>
 8004582:	bf00      	nop
 8004584:	08005064 	.word	0x08005064
 8004588:	0800506e 	.word	0x0800506e
 800458c:	00000000 	.word	0x00000000
 8004590:	080042e1 	.word	0x080042e1
 8004594:	0800506a 	.word	0x0800506a

08004598 <_printf_common>:
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	4616      	mov	r6, r2
 800459e:	4699      	mov	r9, r3
 80045a0:	688a      	ldr	r2, [r1, #8]
 80045a2:	690b      	ldr	r3, [r1, #16]
 80045a4:	4607      	mov	r7, r0
 80045a6:	4293      	cmp	r3, r2
 80045a8:	bfb8      	it	lt
 80045aa:	4613      	movlt	r3, r2
 80045ac:	6033      	str	r3, [r6, #0]
 80045ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b2:	460c      	mov	r4, r1
 80045b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045b8:	b10a      	cbz	r2, 80045be <_printf_common+0x26>
 80045ba:	3301      	adds	r3, #1
 80045bc:	6033      	str	r3, [r6, #0]
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	0699      	lsls	r1, r3, #26
 80045c2:	bf42      	ittt	mi
 80045c4:	6833      	ldrmi	r3, [r6, #0]
 80045c6:	3302      	addmi	r3, #2
 80045c8:	6033      	strmi	r3, [r6, #0]
 80045ca:	6825      	ldr	r5, [r4, #0]
 80045cc:	f015 0506 	ands.w	r5, r5, #6
 80045d0:	d106      	bne.n	80045e0 <_printf_common+0x48>
 80045d2:	f104 0a19 	add.w	sl, r4, #25
 80045d6:	68e3      	ldr	r3, [r4, #12]
 80045d8:	6832      	ldr	r2, [r6, #0]
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	42ab      	cmp	r3, r5
 80045de:	dc28      	bgt.n	8004632 <_printf_common+0x9a>
 80045e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045e4:	1e13      	subs	r3, r2, #0
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	bf18      	it	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	0692      	lsls	r2, r2, #26
 80045ee:	d42d      	bmi.n	800464c <_printf_common+0xb4>
 80045f0:	4649      	mov	r1, r9
 80045f2:	4638      	mov	r0, r7
 80045f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045f8:	47c0      	blx	r8
 80045fa:	3001      	adds	r0, #1
 80045fc:	d020      	beq.n	8004640 <_printf_common+0xa8>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	68e5      	ldr	r5, [r4, #12]
 8004602:	f003 0306 	and.w	r3, r3, #6
 8004606:	2b04      	cmp	r3, #4
 8004608:	bf18      	it	ne
 800460a:	2500      	movne	r5, #0
 800460c:	6832      	ldr	r2, [r6, #0]
 800460e:	f04f 0600 	mov.w	r6, #0
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	bf08      	it	eq
 8004616:	1aad      	subeq	r5, r5, r2
 8004618:	6922      	ldr	r2, [r4, #16]
 800461a:	bf08      	it	eq
 800461c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004620:	4293      	cmp	r3, r2
 8004622:	bfc4      	itt	gt
 8004624:	1a9b      	subgt	r3, r3, r2
 8004626:	18ed      	addgt	r5, r5, r3
 8004628:	341a      	adds	r4, #26
 800462a:	42b5      	cmp	r5, r6
 800462c:	d11a      	bne.n	8004664 <_printf_common+0xcc>
 800462e:	2000      	movs	r0, #0
 8004630:	e008      	b.n	8004644 <_printf_common+0xac>
 8004632:	2301      	movs	r3, #1
 8004634:	4652      	mov	r2, sl
 8004636:	4649      	mov	r1, r9
 8004638:	4638      	mov	r0, r7
 800463a:	47c0      	blx	r8
 800463c:	3001      	adds	r0, #1
 800463e:	d103      	bne.n	8004648 <_printf_common+0xb0>
 8004640:	f04f 30ff 	mov.w	r0, #4294967295
 8004644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004648:	3501      	adds	r5, #1
 800464a:	e7c4      	b.n	80045d6 <_printf_common+0x3e>
 800464c:	2030      	movs	r0, #48	; 0x30
 800464e:	18e1      	adds	r1, r4, r3
 8004650:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800465a:	4422      	add	r2, r4
 800465c:	3302      	adds	r3, #2
 800465e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004662:	e7c5      	b.n	80045f0 <_printf_common+0x58>
 8004664:	2301      	movs	r3, #1
 8004666:	4622      	mov	r2, r4
 8004668:	4649      	mov	r1, r9
 800466a:	4638      	mov	r0, r7
 800466c:	47c0      	blx	r8
 800466e:	3001      	adds	r0, #1
 8004670:	d0e6      	beq.n	8004640 <_printf_common+0xa8>
 8004672:	3601      	adds	r6, #1
 8004674:	e7d9      	b.n	800462a <_printf_common+0x92>
	...

08004678 <_printf_i>:
 8004678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	460c      	mov	r4, r1
 800467e:	7e27      	ldrb	r7, [r4, #24]
 8004680:	4691      	mov	r9, r2
 8004682:	2f78      	cmp	r7, #120	; 0x78
 8004684:	4680      	mov	r8, r0
 8004686:	469a      	mov	sl, r3
 8004688:	990c      	ldr	r1, [sp, #48]	; 0x30
 800468a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800468e:	d807      	bhi.n	80046a0 <_printf_i+0x28>
 8004690:	2f62      	cmp	r7, #98	; 0x62
 8004692:	d80a      	bhi.n	80046aa <_printf_i+0x32>
 8004694:	2f00      	cmp	r7, #0
 8004696:	f000 80d9 	beq.w	800484c <_printf_i+0x1d4>
 800469a:	2f58      	cmp	r7, #88	; 0x58
 800469c:	f000 80a4 	beq.w	80047e8 <_printf_i+0x170>
 80046a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046a8:	e03a      	b.n	8004720 <_printf_i+0xa8>
 80046aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046ae:	2b15      	cmp	r3, #21
 80046b0:	d8f6      	bhi.n	80046a0 <_printf_i+0x28>
 80046b2:	a001      	add	r0, pc, #4	; (adr r0, 80046b8 <_printf_i+0x40>)
 80046b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80046b8:	08004711 	.word	0x08004711
 80046bc:	08004725 	.word	0x08004725
 80046c0:	080046a1 	.word	0x080046a1
 80046c4:	080046a1 	.word	0x080046a1
 80046c8:	080046a1 	.word	0x080046a1
 80046cc:	080046a1 	.word	0x080046a1
 80046d0:	08004725 	.word	0x08004725
 80046d4:	080046a1 	.word	0x080046a1
 80046d8:	080046a1 	.word	0x080046a1
 80046dc:	080046a1 	.word	0x080046a1
 80046e0:	080046a1 	.word	0x080046a1
 80046e4:	08004833 	.word	0x08004833
 80046e8:	08004755 	.word	0x08004755
 80046ec:	08004815 	.word	0x08004815
 80046f0:	080046a1 	.word	0x080046a1
 80046f4:	080046a1 	.word	0x080046a1
 80046f8:	08004855 	.word	0x08004855
 80046fc:	080046a1 	.word	0x080046a1
 8004700:	08004755 	.word	0x08004755
 8004704:	080046a1 	.word	0x080046a1
 8004708:	080046a1 	.word	0x080046a1
 800470c:	0800481d 	.word	0x0800481d
 8004710:	680b      	ldr	r3, [r1, #0]
 8004712:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	600a      	str	r2, [r1, #0]
 800471c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004720:	2301      	movs	r3, #1
 8004722:	e0a4      	b.n	800486e <_printf_i+0x1f6>
 8004724:	6825      	ldr	r5, [r4, #0]
 8004726:	6808      	ldr	r0, [r1, #0]
 8004728:	062e      	lsls	r6, r5, #24
 800472a:	f100 0304 	add.w	r3, r0, #4
 800472e:	d50a      	bpl.n	8004746 <_printf_i+0xce>
 8004730:	6805      	ldr	r5, [r0, #0]
 8004732:	600b      	str	r3, [r1, #0]
 8004734:	2d00      	cmp	r5, #0
 8004736:	da03      	bge.n	8004740 <_printf_i+0xc8>
 8004738:	232d      	movs	r3, #45	; 0x2d
 800473a:	426d      	negs	r5, r5
 800473c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004740:	230a      	movs	r3, #10
 8004742:	485e      	ldr	r0, [pc, #376]	; (80048bc <_printf_i+0x244>)
 8004744:	e019      	b.n	800477a <_printf_i+0x102>
 8004746:	f015 0f40 	tst.w	r5, #64	; 0x40
 800474a:	6805      	ldr	r5, [r0, #0]
 800474c:	600b      	str	r3, [r1, #0]
 800474e:	bf18      	it	ne
 8004750:	b22d      	sxthne	r5, r5
 8004752:	e7ef      	b.n	8004734 <_printf_i+0xbc>
 8004754:	680b      	ldr	r3, [r1, #0]
 8004756:	6825      	ldr	r5, [r4, #0]
 8004758:	1d18      	adds	r0, r3, #4
 800475a:	6008      	str	r0, [r1, #0]
 800475c:	0628      	lsls	r0, r5, #24
 800475e:	d501      	bpl.n	8004764 <_printf_i+0xec>
 8004760:	681d      	ldr	r5, [r3, #0]
 8004762:	e002      	b.n	800476a <_printf_i+0xf2>
 8004764:	0669      	lsls	r1, r5, #25
 8004766:	d5fb      	bpl.n	8004760 <_printf_i+0xe8>
 8004768:	881d      	ldrh	r5, [r3, #0]
 800476a:	2f6f      	cmp	r7, #111	; 0x6f
 800476c:	bf0c      	ite	eq
 800476e:	2308      	moveq	r3, #8
 8004770:	230a      	movne	r3, #10
 8004772:	4852      	ldr	r0, [pc, #328]	; (80048bc <_printf_i+0x244>)
 8004774:	2100      	movs	r1, #0
 8004776:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800477a:	6866      	ldr	r6, [r4, #4]
 800477c:	2e00      	cmp	r6, #0
 800477e:	bfa8      	it	ge
 8004780:	6821      	ldrge	r1, [r4, #0]
 8004782:	60a6      	str	r6, [r4, #8]
 8004784:	bfa4      	itt	ge
 8004786:	f021 0104 	bicge.w	r1, r1, #4
 800478a:	6021      	strge	r1, [r4, #0]
 800478c:	b90d      	cbnz	r5, 8004792 <_printf_i+0x11a>
 800478e:	2e00      	cmp	r6, #0
 8004790:	d04d      	beq.n	800482e <_printf_i+0x1b6>
 8004792:	4616      	mov	r6, r2
 8004794:	fbb5 f1f3 	udiv	r1, r5, r3
 8004798:	fb03 5711 	mls	r7, r3, r1, r5
 800479c:	5dc7      	ldrb	r7, [r0, r7]
 800479e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80047a2:	462f      	mov	r7, r5
 80047a4:	42bb      	cmp	r3, r7
 80047a6:	460d      	mov	r5, r1
 80047a8:	d9f4      	bls.n	8004794 <_printf_i+0x11c>
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d10b      	bne.n	80047c6 <_printf_i+0x14e>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	07df      	lsls	r7, r3, #31
 80047b2:	d508      	bpl.n	80047c6 <_printf_i+0x14e>
 80047b4:	6923      	ldr	r3, [r4, #16]
 80047b6:	6861      	ldr	r1, [r4, #4]
 80047b8:	4299      	cmp	r1, r3
 80047ba:	bfde      	ittt	le
 80047bc:	2330      	movle	r3, #48	; 0x30
 80047be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047c6:	1b92      	subs	r2, r2, r6
 80047c8:	6122      	str	r2, [r4, #16]
 80047ca:	464b      	mov	r3, r9
 80047cc:	4621      	mov	r1, r4
 80047ce:	4640      	mov	r0, r8
 80047d0:	f8cd a000 	str.w	sl, [sp]
 80047d4:	aa03      	add	r2, sp, #12
 80047d6:	f7ff fedf 	bl	8004598 <_printf_common>
 80047da:	3001      	adds	r0, #1
 80047dc:	d14c      	bne.n	8004878 <_printf_i+0x200>
 80047de:	f04f 30ff 	mov.w	r0, #4294967295
 80047e2:	b004      	add	sp, #16
 80047e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e8:	4834      	ldr	r0, [pc, #208]	; (80048bc <_printf_i+0x244>)
 80047ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047ee:	680e      	ldr	r6, [r1, #0]
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80047f6:	061f      	lsls	r7, r3, #24
 80047f8:	600e      	str	r6, [r1, #0]
 80047fa:	d514      	bpl.n	8004826 <_printf_i+0x1ae>
 80047fc:	07d9      	lsls	r1, r3, #31
 80047fe:	bf44      	itt	mi
 8004800:	f043 0320 	orrmi.w	r3, r3, #32
 8004804:	6023      	strmi	r3, [r4, #0]
 8004806:	b91d      	cbnz	r5, 8004810 <_printf_i+0x198>
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	f023 0320 	bic.w	r3, r3, #32
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	2310      	movs	r3, #16
 8004812:	e7af      	b.n	8004774 <_printf_i+0xfc>
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	f043 0320 	orr.w	r3, r3, #32
 800481a:	6023      	str	r3, [r4, #0]
 800481c:	2378      	movs	r3, #120	; 0x78
 800481e:	4828      	ldr	r0, [pc, #160]	; (80048c0 <_printf_i+0x248>)
 8004820:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004824:	e7e3      	b.n	80047ee <_printf_i+0x176>
 8004826:	065e      	lsls	r6, r3, #25
 8004828:	bf48      	it	mi
 800482a:	b2ad      	uxthmi	r5, r5
 800482c:	e7e6      	b.n	80047fc <_printf_i+0x184>
 800482e:	4616      	mov	r6, r2
 8004830:	e7bb      	b.n	80047aa <_printf_i+0x132>
 8004832:	680b      	ldr	r3, [r1, #0]
 8004834:	6826      	ldr	r6, [r4, #0]
 8004836:	1d1d      	adds	r5, r3, #4
 8004838:	6960      	ldr	r0, [r4, #20]
 800483a:	600d      	str	r5, [r1, #0]
 800483c:	0635      	lsls	r5, r6, #24
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	d501      	bpl.n	8004846 <_printf_i+0x1ce>
 8004842:	6018      	str	r0, [r3, #0]
 8004844:	e002      	b.n	800484c <_printf_i+0x1d4>
 8004846:	0671      	lsls	r1, r6, #25
 8004848:	d5fb      	bpl.n	8004842 <_printf_i+0x1ca>
 800484a:	8018      	strh	r0, [r3, #0]
 800484c:	2300      	movs	r3, #0
 800484e:	4616      	mov	r6, r2
 8004850:	6123      	str	r3, [r4, #16]
 8004852:	e7ba      	b.n	80047ca <_printf_i+0x152>
 8004854:	680b      	ldr	r3, [r1, #0]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	600a      	str	r2, [r1, #0]
 800485a:	681e      	ldr	r6, [r3, #0]
 800485c:	2100      	movs	r1, #0
 800485e:	4630      	mov	r0, r6
 8004860:	6862      	ldr	r2, [r4, #4]
 8004862:	f000 f82f 	bl	80048c4 <memchr>
 8004866:	b108      	cbz	r0, 800486c <_printf_i+0x1f4>
 8004868:	1b80      	subs	r0, r0, r6
 800486a:	6060      	str	r0, [r4, #4]
 800486c:	6863      	ldr	r3, [r4, #4]
 800486e:	6123      	str	r3, [r4, #16]
 8004870:	2300      	movs	r3, #0
 8004872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004876:	e7a8      	b.n	80047ca <_printf_i+0x152>
 8004878:	4632      	mov	r2, r6
 800487a:	4649      	mov	r1, r9
 800487c:	4640      	mov	r0, r8
 800487e:	6923      	ldr	r3, [r4, #16]
 8004880:	47d0      	blx	sl
 8004882:	3001      	adds	r0, #1
 8004884:	d0ab      	beq.n	80047de <_printf_i+0x166>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	079b      	lsls	r3, r3, #30
 800488a:	d413      	bmi.n	80048b4 <_printf_i+0x23c>
 800488c:	68e0      	ldr	r0, [r4, #12]
 800488e:	9b03      	ldr	r3, [sp, #12]
 8004890:	4298      	cmp	r0, r3
 8004892:	bfb8      	it	lt
 8004894:	4618      	movlt	r0, r3
 8004896:	e7a4      	b.n	80047e2 <_printf_i+0x16a>
 8004898:	2301      	movs	r3, #1
 800489a:	4632      	mov	r2, r6
 800489c:	4649      	mov	r1, r9
 800489e:	4640      	mov	r0, r8
 80048a0:	47d0      	blx	sl
 80048a2:	3001      	adds	r0, #1
 80048a4:	d09b      	beq.n	80047de <_printf_i+0x166>
 80048a6:	3501      	adds	r5, #1
 80048a8:	68e3      	ldr	r3, [r4, #12]
 80048aa:	9903      	ldr	r1, [sp, #12]
 80048ac:	1a5b      	subs	r3, r3, r1
 80048ae:	42ab      	cmp	r3, r5
 80048b0:	dcf2      	bgt.n	8004898 <_printf_i+0x220>
 80048b2:	e7eb      	b.n	800488c <_printf_i+0x214>
 80048b4:	2500      	movs	r5, #0
 80048b6:	f104 0619 	add.w	r6, r4, #25
 80048ba:	e7f5      	b.n	80048a8 <_printf_i+0x230>
 80048bc:	08005075 	.word	0x08005075
 80048c0:	08005086 	.word	0x08005086

080048c4 <memchr>:
 80048c4:	4603      	mov	r3, r0
 80048c6:	b510      	push	{r4, lr}
 80048c8:	b2c9      	uxtb	r1, r1
 80048ca:	4402      	add	r2, r0
 80048cc:	4293      	cmp	r3, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	d101      	bne.n	80048d6 <memchr+0x12>
 80048d2:	2000      	movs	r0, #0
 80048d4:	e003      	b.n	80048de <memchr+0x1a>
 80048d6:	7804      	ldrb	r4, [r0, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	428c      	cmp	r4, r1
 80048dc:	d1f6      	bne.n	80048cc <memchr+0x8>
 80048de:	bd10      	pop	{r4, pc}

080048e0 <memmove>:
 80048e0:	4288      	cmp	r0, r1
 80048e2:	b510      	push	{r4, lr}
 80048e4:	eb01 0402 	add.w	r4, r1, r2
 80048e8:	d902      	bls.n	80048f0 <memmove+0x10>
 80048ea:	4284      	cmp	r4, r0
 80048ec:	4623      	mov	r3, r4
 80048ee:	d807      	bhi.n	8004900 <memmove+0x20>
 80048f0:	1e43      	subs	r3, r0, #1
 80048f2:	42a1      	cmp	r1, r4
 80048f4:	d008      	beq.n	8004908 <memmove+0x28>
 80048f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048fe:	e7f8      	b.n	80048f2 <memmove+0x12>
 8004900:	4601      	mov	r1, r0
 8004902:	4402      	add	r2, r0
 8004904:	428a      	cmp	r2, r1
 8004906:	d100      	bne.n	800490a <memmove+0x2a>
 8004908:	bd10      	pop	{r4, pc}
 800490a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800490e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004912:	e7f7      	b.n	8004904 <memmove+0x24>

08004914 <_free_r>:
 8004914:	b538      	push	{r3, r4, r5, lr}
 8004916:	4605      	mov	r5, r0
 8004918:	2900      	cmp	r1, #0
 800491a:	d043      	beq.n	80049a4 <_free_r+0x90>
 800491c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004920:	1f0c      	subs	r4, r1, #4
 8004922:	2b00      	cmp	r3, #0
 8004924:	bfb8      	it	lt
 8004926:	18e4      	addlt	r4, r4, r3
 8004928:	f000 f8d0 	bl	8004acc <__malloc_lock>
 800492c:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <_free_r+0x94>)
 800492e:	6813      	ldr	r3, [r2, #0]
 8004930:	4610      	mov	r0, r2
 8004932:	b933      	cbnz	r3, 8004942 <_free_r+0x2e>
 8004934:	6063      	str	r3, [r4, #4]
 8004936:	6014      	str	r4, [r2, #0]
 8004938:	4628      	mov	r0, r5
 800493a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800493e:	f000 b8cb 	b.w	8004ad8 <__malloc_unlock>
 8004942:	42a3      	cmp	r3, r4
 8004944:	d90a      	bls.n	800495c <_free_r+0x48>
 8004946:	6821      	ldr	r1, [r4, #0]
 8004948:	1862      	adds	r2, r4, r1
 800494a:	4293      	cmp	r3, r2
 800494c:	bf01      	itttt	eq
 800494e:	681a      	ldreq	r2, [r3, #0]
 8004950:	685b      	ldreq	r3, [r3, #4]
 8004952:	1852      	addeq	r2, r2, r1
 8004954:	6022      	streq	r2, [r4, #0]
 8004956:	6063      	str	r3, [r4, #4]
 8004958:	6004      	str	r4, [r0, #0]
 800495a:	e7ed      	b.n	8004938 <_free_r+0x24>
 800495c:	461a      	mov	r2, r3
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	b10b      	cbz	r3, 8004966 <_free_r+0x52>
 8004962:	42a3      	cmp	r3, r4
 8004964:	d9fa      	bls.n	800495c <_free_r+0x48>
 8004966:	6811      	ldr	r1, [r2, #0]
 8004968:	1850      	adds	r0, r2, r1
 800496a:	42a0      	cmp	r0, r4
 800496c:	d10b      	bne.n	8004986 <_free_r+0x72>
 800496e:	6820      	ldr	r0, [r4, #0]
 8004970:	4401      	add	r1, r0
 8004972:	1850      	adds	r0, r2, r1
 8004974:	4283      	cmp	r3, r0
 8004976:	6011      	str	r1, [r2, #0]
 8004978:	d1de      	bne.n	8004938 <_free_r+0x24>
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4401      	add	r1, r0
 8004980:	6011      	str	r1, [r2, #0]
 8004982:	6053      	str	r3, [r2, #4]
 8004984:	e7d8      	b.n	8004938 <_free_r+0x24>
 8004986:	d902      	bls.n	800498e <_free_r+0x7a>
 8004988:	230c      	movs	r3, #12
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	e7d4      	b.n	8004938 <_free_r+0x24>
 800498e:	6820      	ldr	r0, [r4, #0]
 8004990:	1821      	adds	r1, r4, r0
 8004992:	428b      	cmp	r3, r1
 8004994:	bf01      	itttt	eq
 8004996:	6819      	ldreq	r1, [r3, #0]
 8004998:	685b      	ldreq	r3, [r3, #4]
 800499a:	1809      	addeq	r1, r1, r0
 800499c:	6021      	streq	r1, [r4, #0]
 800499e:	6063      	str	r3, [r4, #4]
 80049a0:	6054      	str	r4, [r2, #4]
 80049a2:	e7c9      	b.n	8004938 <_free_r+0x24>
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
 80049a6:	bf00      	nop
 80049a8:	200000a8 	.word	0x200000a8

080049ac <_malloc_r>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	1ccd      	adds	r5, r1, #3
 80049b0:	f025 0503 	bic.w	r5, r5, #3
 80049b4:	3508      	adds	r5, #8
 80049b6:	2d0c      	cmp	r5, #12
 80049b8:	bf38      	it	cc
 80049ba:	250c      	movcc	r5, #12
 80049bc:	2d00      	cmp	r5, #0
 80049be:	4606      	mov	r6, r0
 80049c0:	db01      	blt.n	80049c6 <_malloc_r+0x1a>
 80049c2:	42a9      	cmp	r1, r5
 80049c4:	d903      	bls.n	80049ce <_malloc_r+0x22>
 80049c6:	230c      	movs	r3, #12
 80049c8:	6033      	str	r3, [r6, #0]
 80049ca:	2000      	movs	r0, #0
 80049cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ce:	f000 f87d 	bl	8004acc <__malloc_lock>
 80049d2:	4921      	ldr	r1, [pc, #132]	; (8004a58 <_malloc_r+0xac>)
 80049d4:	680a      	ldr	r2, [r1, #0]
 80049d6:	4614      	mov	r4, r2
 80049d8:	b99c      	cbnz	r4, 8004a02 <_malloc_r+0x56>
 80049da:	4f20      	ldr	r7, [pc, #128]	; (8004a5c <_malloc_r+0xb0>)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	b923      	cbnz	r3, 80049ea <_malloc_r+0x3e>
 80049e0:	4621      	mov	r1, r4
 80049e2:	4630      	mov	r0, r6
 80049e4:	f000 f862 	bl	8004aac <_sbrk_r>
 80049e8:	6038      	str	r0, [r7, #0]
 80049ea:	4629      	mov	r1, r5
 80049ec:	4630      	mov	r0, r6
 80049ee:	f000 f85d 	bl	8004aac <_sbrk_r>
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	d123      	bne.n	8004a3e <_malloc_r+0x92>
 80049f6:	230c      	movs	r3, #12
 80049f8:	4630      	mov	r0, r6
 80049fa:	6033      	str	r3, [r6, #0]
 80049fc:	f000 f86c 	bl	8004ad8 <__malloc_unlock>
 8004a00:	e7e3      	b.n	80049ca <_malloc_r+0x1e>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	1b5b      	subs	r3, r3, r5
 8004a06:	d417      	bmi.n	8004a38 <_malloc_r+0x8c>
 8004a08:	2b0b      	cmp	r3, #11
 8004a0a:	d903      	bls.n	8004a14 <_malloc_r+0x68>
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	441c      	add	r4, r3
 8004a10:	6025      	str	r5, [r4, #0]
 8004a12:	e004      	b.n	8004a1e <_malloc_r+0x72>
 8004a14:	6863      	ldr	r3, [r4, #4]
 8004a16:	42a2      	cmp	r2, r4
 8004a18:	bf0c      	ite	eq
 8004a1a:	600b      	streq	r3, [r1, #0]
 8004a1c:	6053      	strne	r3, [r2, #4]
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f000 f85a 	bl	8004ad8 <__malloc_unlock>
 8004a24:	f104 000b 	add.w	r0, r4, #11
 8004a28:	1d23      	adds	r3, r4, #4
 8004a2a:	f020 0007 	bic.w	r0, r0, #7
 8004a2e:	1ac2      	subs	r2, r0, r3
 8004a30:	d0cc      	beq.n	80049cc <_malloc_r+0x20>
 8004a32:	1a1b      	subs	r3, r3, r0
 8004a34:	50a3      	str	r3, [r4, r2]
 8004a36:	e7c9      	b.n	80049cc <_malloc_r+0x20>
 8004a38:	4622      	mov	r2, r4
 8004a3a:	6864      	ldr	r4, [r4, #4]
 8004a3c:	e7cc      	b.n	80049d8 <_malloc_r+0x2c>
 8004a3e:	1cc4      	adds	r4, r0, #3
 8004a40:	f024 0403 	bic.w	r4, r4, #3
 8004a44:	42a0      	cmp	r0, r4
 8004a46:	d0e3      	beq.n	8004a10 <_malloc_r+0x64>
 8004a48:	1a21      	subs	r1, r4, r0
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f000 f82e 	bl	8004aac <_sbrk_r>
 8004a50:	3001      	adds	r0, #1
 8004a52:	d1dd      	bne.n	8004a10 <_malloc_r+0x64>
 8004a54:	e7cf      	b.n	80049f6 <_malloc_r+0x4a>
 8004a56:	bf00      	nop
 8004a58:	200000a8 	.word	0x200000a8
 8004a5c:	200000ac 	.word	0x200000ac

08004a60 <_realloc_r>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	4607      	mov	r7, r0
 8004a64:	4614      	mov	r4, r2
 8004a66:	460e      	mov	r6, r1
 8004a68:	b921      	cbnz	r1, 8004a74 <_realloc_r+0x14>
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a70:	f7ff bf9c 	b.w	80049ac <_malloc_r>
 8004a74:	b922      	cbnz	r2, 8004a80 <_realloc_r+0x20>
 8004a76:	f7ff ff4d 	bl	8004914 <_free_r>
 8004a7a:	4625      	mov	r5, r4
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a80:	f000 f830 	bl	8004ae4 <_malloc_usable_size_r>
 8004a84:	42a0      	cmp	r0, r4
 8004a86:	d20f      	bcs.n	8004aa8 <_realloc_r+0x48>
 8004a88:	4621      	mov	r1, r4
 8004a8a:	4638      	mov	r0, r7
 8004a8c:	f7ff ff8e 	bl	80049ac <_malloc_r>
 8004a90:	4605      	mov	r5, r0
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d0f2      	beq.n	8004a7c <_realloc_r+0x1c>
 8004a96:	4631      	mov	r1, r6
 8004a98:	4622      	mov	r2, r4
 8004a9a:	f7ff fbeb 	bl	8004274 <memcpy>
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff ff37 	bl	8004914 <_free_r>
 8004aa6:	e7e9      	b.n	8004a7c <_realloc_r+0x1c>
 8004aa8:	4635      	mov	r5, r6
 8004aaa:	e7e7      	b.n	8004a7c <_realloc_r+0x1c>

08004aac <_sbrk_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4d05      	ldr	r5, [pc, #20]	; (8004ac8 <_sbrk_r+0x1c>)
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	f7fc fd58 	bl	800156c <_sbrk>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_sbrk_r+0x1a>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_sbrk_r+0x1a>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20001ed0 	.word	0x20001ed0

08004acc <__malloc_lock>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__malloc_lock+0x8>)
 8004ace:	f000 b811 	b.w	8004af4 <__retarget_lock_acquire_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	20001ed8 	.word	0x20001ed8

08004ad8 <__malloc_unlock>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <__malloc_unlock+0x8>)
 8004ada:	f000 b80c 	b.w	8004af6 <__retarget_lock_release_recursive>
 8004ade:	bf00      	nop
 8004ae0:	20001ed8 	.word	0x20001ed8

08004ae4 <_malloc_usable_size_r>:
 8004ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ae8:	1f18      	subs	r0, r3, #4
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bfbc      	itt	lt
 8004aee:	580b      	ldrlt	r3, [r1, r0]
 8004af0:	18c0      	addlt	r0, r0, r3
 8004af2:	4770      	bx	lr

08004af4 <__retarget_lock_acquire_recursive>:
 8004af4:	4770      	bx	lr

08004af6 <__retarget_lock_release_recursive>:
 8004af6:	4770      	bx	lr

08004af8 <_init>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	bf00      	nop
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr

08004b04 <_fini>:
 8004b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b06:	bf00      	nop
 8004b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0a:	bc08      	pop	{r3}
 8004b0c:	469e      	mov	lr, r3
 8004b0e:	4770      	bx	lr
