
F1_CompactController_AuxMCU_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080032c8  080032c8  000132c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800335c  0800335c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800335c  0800335c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800335c  0800335c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800335c  0800335c  0001335c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003360  08003360  00013360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000070  080033d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  080033d4  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3bd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002316  00000000  00000000  0002d456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0002f770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00030360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019934  00000000  00000000  00030e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f351  00000000  00000000  0004a7b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000941e1  00000000  00000000  00059b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edce6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e0  00000000  00000000  000edd3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080032b0 	.word	0x080032b0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080032b0 	.word	0x080032b0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <MX_DMA_Init+0x58>)
 800023c:	695b      	ldr	r3, [r3, #20]
 800023e:	4a13      	ldr	r2, [pc, #76]	; (800028c <MX_DMA_Init+0x58>)
 8000240:	f043 0301 	orr.w	r3, r3, #1
 8000244:	6153      	str	r3, [r2, #20]
 8000246:	4b11      	ldr	r3, [pc, #68]	; (800028c <MX_DMA_Init+0x58>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000252:	2200      	movs	r2, #0
 8000254:	2100      	movs	r1, #0
 8000256:	200c      	movs	r0, #12
 8000258:	f000 fd63 	bl	8000d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800025c:	200c      	movs	r0, #12
 800025e:	f000 fd7c 	bl	8000d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000262:	2200      	movs	r2, #0
 8000264:	2100      	movs	r1, #0
 8000266:	200d      	movs	r0, #13
 8000268:	f000 fd5b 	bl	8000d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800026c:	200d      	movs	r0, #13
 800026e:	f000 fd74 	bl	8000d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000272:	2200      	movs	r2, #0
 8000274:	2100      	movs	r1, #0
 8000276:	200e      	movs	r0, #14
 8000278:	f000 fd53 	bl	8000d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800027c:	200e      	movs	r0, #14
 800027e:	f000 fd6c 	bl	8000d5a <HAL_NVIC_EnableIRQ>

}
 8000282:	bf00      	nop
 8000284:	3708      	adds	r7, #8
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a4:	4b43      	ldr	r3, [pc, #268]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a42      	ldr	r2, [pc, #264]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b40      	ldr	r3, [pc, #256]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002bc:	4b3d      	ldr	r3, [pc, #244]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a3c      	ldr	r2, [pc, #240]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002c2:	f043 0320 	orr.w	r3, r3, #32
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b3a      	ldr	r3, [pc, #232]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0320 	and.w	r3, r3, #32
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a36      	ldr	r2, [pc, #216]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b34      	ldr	r3, [pc, #208]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0304 	and.w	r3, r3, #4
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ec:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a30      	ldr	r2, [pc, #192]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b2e      	ldr	r3, [pc, #184]	; (80003b4 <MX_GPIO_Init+0x124>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0308 	and.w	r3, r3, #8
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f640 110c 	movw	r1, #2316	; 0x90c
 800030a:	482b      	ldr	r0, [pc, #172]	; (80003b8 <MX_GPIO_Init+0x128>)
 800030c:	f001 fa8e 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, INT_LED1_Pin|INT_LED2_Pin, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000316:	4829      	ldr	r0, [pc, #164]	; (80003bc <MX_GPIO_Init+0x12c>)
 8000318:	f001 fa88 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RES_GPIO_Port, LCD_RES_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000322:	4827      	ldr	r0, [pc, #156]	; (80003c0 <MX_GPIO_Init+0x130>)
 8000324:	f001 fa82 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TP1_Pin|TP2_Pin|EXT_LED1_Pin|EXT_LED2_Pin;
 8000328:	f640 130c 	movw	r3, #2316	; 0x90c
 800032c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000336:	2302      	movs	r3, #2
 8000338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033a:	f107 0310 	add.w	r3, r7, #16
 800033e:	4619      	mov	r1, r3
 8000340:	481d      	ldr	r0, [pc, #116]	; (80003b8 <MX_GPIO_Init+0x128>)
 8000342:	f001 f8df 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STM_MODE_SEL_Pin;
 8000346:	2320      	movs	r3, #32
 8000348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800034a:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <MX_GPIO_Init+0x134>)
 800034c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STM_MODE_SEL_GPIO_Port, &GPIO_InitStruct);
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	4619      	mov	r1, r3
 8000358:	4818      	ldr	r0, [pc, #96]	; (80003bc <MX_GPIO_Init+0x12c>)
 800035a:	f001 f8d3 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INT_LED1_Pin|INT_LED2_Pin;
 800035e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2302      	movs	r3, #2
 800036e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	4811      	ldr	r0, [pc, #68]	; (80003bc <MX_GPIO_Init+0x12c>)
 8000378:	f001 f8c4 	bl	8001504 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RES_Pin;
 800037c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000382:	2301      	movs	r3, #1
 8000384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038a:	2302      	movs	r3, #2
 800038c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_RES_GPIO_Port, &GPIO_InitStruct);
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	4619      	mov	r1, r3
 8000394:	480a      	ldr	r0, [pc, #40]	; (80003c0 <MX_GPIO_Init+0x130>)
 8000396:	f001 f8b5 	bl	8001504 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	2100      	movs	r1, #0
 800039e:	2017      	movs	r0, #23
 80003a0:	f000 fcbf 	bl	8000d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80003a4:	2017      	movs	r0, #23
 80003a6:	f000 fcd8 	bl	8000d5a <HAL_NVIC_EnableIRQ>

}
 80003aa:	bf00      	nop
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010800 	.word	0x40010800
 80003bc:	40011000 	.word	0x40011000
 80003c0:	40010c00 	.word	0x40010c00
 80003c4:	10110000 	.word	0x10110000

080003c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <MX_I2C1_Init+0x50>)
 80003ce:	4a13      	ldr	r2, [pc, #76]	; (800041c <MX_I2C1_Init+0x54>)
 80003d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <MX_I2C1_Init+0x50>)
 80003d4:	4a12      	ldr	r2, [pc, #72]	; (8000420 <MX_I2C1_Init+0x58>)
 80003d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_I2C1_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003de:	4b0e      	ldr	r3, [pc, #56]	; (8000418 <MX_I2C1_Init+0x50>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_I2C1_Init+0x50>)
 80003e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ec:	4b0a      	ldr	r3, [pc, #40]	; (8000418 <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <MX_I2C1_Init+0x50>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <MX_I2C1_Init+0x50>)
 8000400:	2200      	movs	r2, #0
 8000402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000404:	4804      	ldr	r0, [pc, #16]	; (8000418 <MX_I2C1_Init+0x50>)
 8000406:	f001 fa4b 	bl	80018a0 <HAL_I2C_Init>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d001      	beq.n	8000414 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000410:	f000 f8a1 	bl	8000556 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	20000098 	.word	0x20000098
 800041c:	40005400 	.word	0x40005400
 8000420:	00061a80 	.word	0x00061a80

08000424 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042c:	f107 0310 	add.w	r3, r7, #16
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]
 8000438:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a15      	ldr	r2, [pc, #84]	; (8000494 <HAL_I2C_MspInit+0x70>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d123      	bne.n	800048c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <HAL_I2C_MspInit+0x74>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a13      	ldr	r2, [pc, #76]	; (8000498 <HAL_I2C_MspInit+0x74>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <HAL_I2C_MspInit+0x74>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800045c:	23c0      	movs	r3, #192	; 0xc0
 800045e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000460:	2312      	movs	r3, #18
 8000462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000464:	2303      	movs	r3, #3
 8000466:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	480b      	ldr	r0, [pc, #44]	; (800049c <HAL_I2C_MspInit+0x78>)
 8000470:	f001 f848 	bl	8001504 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000474:	4b08      	ldr	r3, [pc, #32]	; (8000498 <HAL_I2C_MspInit+0x74>)
 8000476:	69db      	ldr	r3, [r3, #28]
 8000478:	4a07      	ldr	r2, [pc, #28]	; (8000498 <HAL_I2C_MspInit+0x74>)
 800047a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800047e:	61d3      	str	r3, [r2, #28]
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HAL_I2C_MspInit+0x74>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800048c:	bf00      	nop
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40005400 	.word	0x40005400
 8000498:	40021000 	.word	0x40021000
 800049c:	40010c00 	.word	0x40010c00

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a4:	f000 fb04 	bl	8000ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a8:	f000 f810 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ac:	f7ff fef0 	bl	8000290 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004b0:	f7ff ff8a 	bl	80003c8 <MX_I2C1_Init>
  MX_DMA_Init();
 80004b4:	f7ff febe 	bl	8000234 <MX_DMA_Init>
  MX_SPI1_Init();
 80004b8:	f000 f852 	bl	8000560 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004bc:	f000 f9f4 	bl	80008a8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dbprintf("Rota Compact Controller Auxiliary MCU Bootloader");
 80004c0:	4801      	ldr	r0, [pc, #4]	; (80004c8 <main+0x28>)
 80004c2:	f000 fabd 	bl	8000a40 <dbprintf>
  while (1)
 80004c6:	e7fe      	b.n	80004c6 <main+0x26>
 80004c8:	080032c8 	.word	0x080032c8

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b090      	sub	sp, #64	; 0x40
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	2228      	movs	r2, #40	; 0x28
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 faa6 	bl	8002a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ee:	2301      	movs	r3, #1
 80004f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fc:	2301      	movs	r3, #1
 80004fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000500:	2302      	movs	r3, #2
 8000502:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000508:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800050a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800050e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	f107 0318 	add.w	r3, r7, #24
 8000514:	4618      	mov	r0, r3
 8000516:	f001 fb07 	bl	8001b28 <HAL_RCC_OscConfig>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000520:	f000 f819 	bl	8000556 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000524:	230f      	movs	r3, #15
 8000526:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000528:	2302      	movs	r3, #2
 800052a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2101      	movs	r1, #1
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fd72 	bl	8002028 <HAL_RCC_ClockConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800054a:	f000 f804 	bl	8000556 <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	3740      	adds	r7, #64	; 0x40
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800055a:	b672      	cpsid	i
}
 800055c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055e:	e7fe      	b.n	800055e <Error_Handler+0x8>

08000560 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <MX_SPI1_Init+0x60>)
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_SPI1_Init+0x64>)
 8000568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_SPI1_Init+0x60>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_SPI1_Init+0x60>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <MX_SPI1_Init+0x60>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800057c:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_SPI1_Init+0x60>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <MX_SPI1_Init+0x60>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <MX_SPI1_Init+0x60>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <MX_SPI1_Init+0x60>)
 8000590:	2208      	movs	r2, #8
 8000592:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000594:	4b0a      	ldr	r3, [pc, #40]	; (80005c0 <MX_SPI1_Init+0x60>)
 8000596:	2200      	movs	r2, #0
 8000598:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <MX_SPI1_Init+0x60>)
 800059c:	2200      	movs	r2, #0
 800059e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <MX_SPI1_Init+0x60>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_SPI1_Init+0x60>)
 80005a8:	220a      	movs	r2, #10
 80005aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005ac:	4804      	ldr	r0, [pc, #16]	; (80005c0 <MX_SPI1_Init+0x60>)
 80005ae:	f001 fed5 	bl	800235c <HAL_SPI_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 80005b8:	f7ff ffcd 	bl	8000556 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000ec 	.word	0x200000ec
 80005c4:	40013000 	.word	0x40013000

080005c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a47      	ldr	r2, [pc, #284]	; (8000700 <HAL_SPI_MspInit+0x138>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	f040 8086 	bne.w	80006f6 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005ea:	4b46      	ldr	r3, [pc, #280]	; (8000704 <HAL_SPI_MspInit+0x13c>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a45      	ldr	r2, [pc, #276]	; (8000704 <HAL_SPI_MspInit+0x13c>)
 80005f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b43      	ldr	r3, [pc, #268]	; (8000704 <HAL_SPI_MspInit+0x13c>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000602:	4b40      	ldr	r3, [pc, #256]	; (8000704 <HAL_SPI_MspInit+0x13c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a3f      	ldr	r2, [pc, #252]	; (8000704 <HAL_SPI_MspInit+0x13c>)
 8000608:	f043 0304 	orr.w	r3, r3, #4
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <HAL_SPI_MspInit+0x13c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800061a:	23b0      	movs	r3, #176	; 0xb0
 800061c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	4836      	ldr	r0, [pc, #216]	; (8000708 <HAL_SPI_MspInit+0x140>)
 800062e:	f000 ff69 	bl	8001504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000632:	2340      	movs	r3, #64	; 0x40
 8000634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	4830      	ldr	r0, [pc, #192]	; (8000708 <HAL_SPI_MspInit+0x140>)
 8000646:	f000 ff5d 	bl	8001504 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800064a:	4b30      	ldr	r3, [pc, #192]	; (800070c <HAL_SPI_MspInit+0x144>)
 800064c:	4a30      	ldr	r2, [pc, #192]	; (8000710 <HAL_SPI_MspInit+0x148>)
 800064e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <HAL_SPI_MspInit+0x144>)
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <HAL_SPI_MspInit+0x144>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800065c:	4b2b      	ldr	r3, [pc, #172]	; (800070c <HAL_SPI_MspInit+0x144>)
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <HAL_SPI_MspInit+0x144>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <HAL_SPI_MspInit+0x144>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800066e:	4b27      	ldr	r3, [pc, #156]	; (800070c <HAL_SPI_MspInit+0x144>)
 8000670:	2220      	movs	r2, #32
 8000672:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000674:	4b25      	ldr	r3, [pc, #148]	; (800070c <HAL_SPI_MspInit+0x144>)
 8000676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800067a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800067c:	4823      	ldr	r0, [pc, #140]	; (800070c <HAL_SPI_MspInit+0x144>)
 800067e:	f000 fb87 	bl	8000d90 <HAL_DMA_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8000688:	f7ff ff65 	bl	8000556 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a1f      	ldr	r2, [pc, #124]	; (800070c <HAL_SPI_MspInit+0x144>)
 8000690:	64da      	str	r2, [r3, #76]	; 0x4c
 8000692:	4a1e      	ldr	r2, [pc, #120]	; (800070c <HAL_SPI_MspInit+0x144>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 800069a:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <HAL_SPI_MspInit+0x150>)
 800069c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006a0:	2210      	movs	r2, #16
 80006a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006c4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006cc:	f000 fb60 	bl	8000d90 <HAL_DMA_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80006d6:	f7ff ff3e 	bl	8000556 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006de:	649a      	str	r2, [r3, #72]	; 0x48
 80006e0:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <HAL_SPI_MspInit+0x14c>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2023      	movs	r0, #35	; 0x23
 80006ec:	f000 fb19 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80006f0:	2023      	movs	r0, #35	; 0x23
 80006f2:	f000 fb32 	bl	8000d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40013000 	.word	0x40013000
 8000704:	40021000 	.word	0x40021000
 8000708:	40010800 	.word	0x40010800
 800070c:	20000144 	.word	0x20000144
 8000710:	4002001c 	.word	0x4002001c
 8000714:	20000188 	.word	0x20000188
 8000718:	40020030 	.word	0x40020030

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000722:	4b15      	ldr	r3, [pc, #84]	; (8000778 <HAL_MspInit+0x5c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a14      	ldr	r2, [pc, #80]	; (8000778 <HAL_MspInit+0x5c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b12      	ldr	r3, [pc, #72]	; (8000778 <HAL_MspInit+0x5c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <HAL_MspInit+0x5c>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a0e      	ldr	r2, [pc, #56]	; (8000778 <HAL_MspInit+0x5c>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <HAL_MspInit+0x5c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <HAL_MspInit+0x60>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <HAL_MspInit+0x60>)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <NMI_Handler+0x4>

08000786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <MemManage_Handler+0x4>

08000792 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <BusFault_Handler+0x4>

08000798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <UsageFault_Handler+0x4>

0800079e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c6:	f000 f9b9 	bl	8000b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <DMA1_Channel2_IRQHandler+0x10>)
 80007d6:	f000 fc59 	bl	800108c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000144 	.word	0x20000144

080007e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <DMA1_Channel3_IRQHandler+0x10>)
 80007ea:	f000 fc4f 	bl	800108c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000188 	.word	0x20000188

080007f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <DMA1_Channel4_IRQHandler+0x10>)
 80007fe:	f000 fc45 	bl	800108c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200001cc 	.word	0x200001cc

0800080c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000810:	2020      	movs	r0, #32
 8000812:	f001 f823 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <SPI1_IRQHandler+0x10>)
 8000822:	f001 fe1f 	bl	8002464 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000ec 	.word	0x200000ec

08000830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <_sbrk+0x5c>)
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <_sbrk+0x60>)
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <_sbrk+0x64>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <_sbrk+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <_sbrk+0x64>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d207      	bcs.n	8000870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000860:	f002 f8ba 	bl	80029d8 <__errno>
 8000864:	4603      	mov	r3, r0
 8000866:	220c      	movs	r2, #12
 8000868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	e009      	b.n	8000884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <_sbrk+0x64>)
 8000880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000c000 	.word	0x2000c000
 8000890:	00000400 	.word	0x00000400
 8000894:	2000008c 	.word	0x2000008c
 8000898:	20000268 	.word	0x20000268

0800089c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_USART1_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008b4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x4c>)
 80008e0:	f001 fec3 	bl	800266a <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f7ff fe34 	bl	8000556 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000210 	.word	0x20000210
 80008f8:	40013800 	.word	0x40013800

080008fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a2f      	ldr	r2, [pc, #188]	; (80009d4 <HAL_UART_MspInit+0xd8>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d157      	bne.n	80009cc <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091c:	4b2e      	ldr	r3, [pc, #184]	; (80009d8 <HAL_UART_MspInit+0xdc>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <HAL_UART_MspInit+0xdc>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <HAL_UART_MspInit+0xdc>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <HAL_UART_MspInit+0xdc>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a27      	ldr	r2, [pc, #156]	; (80009d8 <HAL_UART_MspInit+0xdc>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <HAL_UART_MspInit+0xdc>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin;
 800094c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000950:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000956:	2303      	movs	r3, #3
 8000958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DBG_TX_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4619      	mov	r1, r3
 8000960:	481e      	ldr	r0, [pc, #120]	; (80009dc <HAL_UART_MspInit+0xe0>)
 8000962:	f000 fdcf 	bl	8001504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DBG_RX_Pin;
 8000966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DBG_RX_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	4818      	ldr	r0, [pc, #96]	; (80009dc <HAL_UART_MspInit+0xe0>)
 800097c:	f000 fdc2 	bl	8001504 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <HAL_UART_MspInit+0xe8>)
 8000984:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 8000988:	2210      	movs	r2, #16
 800098a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009b0:	480b      	ldr	r0, [pc, #44]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 80009b2:	f000 f9ed 	bl	8000d90 <HAL_DMA_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80009bc:	f7ff fdcb 	bl	8000556 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
 80009c6:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <HAL_UART_MspInit+0xe4>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40013800 	.word	0x40013800
 80009d8:	40021000 	.word	0x40021000
 80009dc:	40010800 	.word	0x40010800
 80009e0:	200001cc 	.word	0x200001cc
 80009e4:	40020044 	.word	0x40020044

080009e8 <vprintln>:
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    }
}

void vprintln(const char *fmt, va_list argp)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b0b4      	sub	sp, #208	; 0xd0
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	683a      	ldr	r2, [r7, #0]
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f002 f834 	bl	8002a68 <vsiprintf>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	dd14      	ble.n	8000a30 <vprintln+0x48>
    {
        HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fc0a 	bl	8000224 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	f107 0108 	add.w	r1, r7, #8
 8000a18:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000a1c:	4806      	ldr	r0, [pc, #24]	; (8000a38 <vprintln+0x50>)
 8000a1e:	f001 fe71 	bl	8002704 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r",2, 0xffffff);
 8000a22:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000a26:	2202      	movs	r2, #2
 8000a28:	4904      	ldr	r1, [pc, #16]	; (8000a3c <vprintln+0x54>)
 8000a2a:	4803      	ldr	r0, [pc, #12]	; (8000a38 <vprintln+0x50>)
 8000a2c:	f001 fe6a 	bl	8002704 <HAL_UART_Transmit>
    }
}
 8000a30:	bf00      	nop
 8000a32:	37d0      	adds	r7, #208	; 0xd0
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000210 	.word	0x20000210
 8000a3c:	080032fc 	.word	0x080032fc

08000a40 <dbprintf>:

void dbprintf(const char *fmt, ...)
{
 8000a40:	b40f      	push	{r0, r1, r2, r3}
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	607b      	str	r3, [r7, #4]
    vprintln((const char *)fmt, argp);
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	6938      	ldr	r0, [r7, #16]
 8000a52:	f7ff ffc9 	bl	80009e8 <vprintln>
    va_end(argp);
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a60:	b004      	add	sp, #16
 8000a62:	4770      	bx	lr

08000a64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a66:	490d      	ldr	r1, [pc, #52]	; (8000a9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a68:	4a0d      	ldr	r2, [pc, #52]	; (8000aa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a7c:	4c0a      	ldr	r4, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8a:	f7ff ff07 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f001 ffa9 	bl	80029e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a92:	f7ff fd05 	bl	80004a0 <main>
  bx lr
 8000a96:	4770      	bx	lr
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000aa0:	08003364 	.word	0x08003364
  ldr r2, =_sbss
 8000aa4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aa8:	20000268 	.word	0x20000268

08000aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aac:	e7fe      	b.n	8000aac <ADC1_2_IRQHandler>
	...

08000ab0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x28>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x28>)
 8000aba:	f043 0310 	orr.w	r3, r3, #16
 8000abe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f923 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fe26 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40022000 	.word	0x40022000

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f93b 	bl	8000d76 <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f903 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x1c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x20>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <HAL_IncTick+0x20>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000254 	.word	0x20000254

08000b60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b02      	ldr	r3, [pc, #8]	; (8000b70 <HAL_GetTick+0x10>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	20000254 	.word	0x20000254

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4906      	ldr	r1, [pc, #24]	; (8000c0c <__NVIC_EnableIRQ+0x34>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	db0a      	blt.n	8000c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	490c      	ldr	r1, [pc, #48]	; (8000c5c <__NVIC_SetPriority+0x4c>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	0112      	lsls	r2, r2, #4
 8000c30:	b2d2      	uxtb	r2, r2
 8000c32:	440b      	add	r3, r1
 8000c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c38:	e00a      	b.n	8000c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	b2da      	uxtb	r2, r3
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <__NVIC_SetPriority+0x50>)
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	f003 030f 	and.w	r3, r3, #15
 8000c46:	3b04      	subs	r3, #4
 8000c48:	0112      	lsls	r2, r2, #4
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	761a      	strb	r2, [r3, #24]
}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	bf28      	it	cs
 8000c82:	2304      	movcs	r3, #4
 8000c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	2b06      	cmp	r3, #6
 8000c8c:	d902      	bls.n	8000c94 <NVIC_EncodePriority+0x30>
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3b03      	subs	r3, #3
 8000c92:	e000      	b.n	8000c96 <NVIC_EncodePriority+0x32>
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	f04f 32ff 	mov.w	r2, #4294967295
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cac:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43d9      	mvns	r1, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cbc:	4313      	orrs	r3, r2
         );
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3724      	adds	r7, #36	; 0x24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff90 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff2d 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d34:	f7ff ff42 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	68b9      	ldr	r1, [r7, #8]
 8000d3e:	6978      	ldr	r0, [r7, #20]
 8000d40:	f7ff ff90 	bl	8000c64 <NVIC_EncodePriority>
 8000d44:	4602      	mov	r2, r0
 8000d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ff5f 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	4603      	mov	r3, r0
 8000d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff35 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffa2 	bl	8000cc8 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e059      	b.n	8000e5a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <HAL_DMA_Init+0xd4>)
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d80f      	bhi.n	8000dd2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_DMA_Init+0xd8>)
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a2b      	ldr	r2, [pc, #172]	; (8000e6c <HAL_DMA_Init+0xdc>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	009a      	lsls	r2, r3, #2
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <HAL_DMA_Init+0xe0>)
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dd0:	e00e      	b.n	8000df0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <HAL_DMA_Init+0xe4>)
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a23      	ldr	r2, [pc, #140]	; (8000e6c <HAL_DMA_Init+0xdc>)
 8000dde:	fba2 2303 	umull	r2, r3, r2, r3
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	009a      	lsls	r2, r3, #2
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a22      	ldr	r2, [pc, #136]	; (8000e78 <HAL_DMA_Init+0xe8>)
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2202      	movs	r2, #2
 8000df4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e06:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40020407 	.word	0x40020407
 8000e68:	bffdfff8 	.word	0xbffdfff8
 8000e6c:	cccccccd 	.word	0xcccccccd
 8000e70:	40020000 	.word	0x40020000
 8000e74:	bffdfbf8 	.word	0xbffdfbf8
 8000e78:	40020400 	.word	0x40020400

08000e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d005      	beq.n	8000e9e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2204      	movs	r2, #4
 8000e96:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	e0d6      	b.n	800104c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 020e 	bic.w	r2, r2, #14
 8000eac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f022 0201 	bic.w	r2, r2, #1
 8000ebc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b64      	ldr	r3, [pc, #400]	; (8001058 <HAL_DMA_Abort_IT+0x1dc>)
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d958      	bls.n	8000f7c <HAL_DMA_Abort_IT+0x100>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a63      	ldr	r2, [pc, #396]	; (800105c <HAL_DMA_Abort_IT+0x1e0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d04f      	beq.n	8000f74 <HAL_DMA_Abort_IT+0xf8>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a61      	ldr	r2, [pc, #388]	; (8001060 <HAL_DMA_Abort_IT+0x1e4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d048      	beq.n	8000f70 <HAL_DMA_Abort_IT+0xf4>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a60      	ldr	r2, [pc, #384]	; (8001064 <HAL_DMA_Abort_IT+0x1e8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d040      	beq.n	8000f6a <HAL_DMA_Abort_IT+0xee>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a5e      	ldr	r2, [pc, #376]	; (8001068 <HAL_DMA_Abort_IT+0x1ec>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d038      	beq.n	8000f64 <HAL_DMA_Abort_IT+0xe8>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a5d      	ldr	r2, [pc, #372]	; (800106c <HAL_DMA_Abort_IT+0x1f0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d030      	beq.n	8000f5e <HAL_DMA_Abort_IT+0xe2>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a5b      	ldr	r2, [pc, #364]	; (8001070 <HAL_DMA_Abort_IT+0x1f4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d028      	beq.n	8000f58 <HAL_DMA_Abort_IT+0xdc>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a53      	ldr	r2, [pc, #332]	; (8001058 <HAL_DMA_Abort_IT+0x1dc>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d020      	beq.n	8000f52 <HAL_DMA_Abort_IT+0xd6>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a57      	ldr	r2, [pc, #348]	; (8001074 <HAL_DMA_Abort_IT+0x1f8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d019      	beq.n	8000f4e <HAL_DMA_Abort_IT+0xd2>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a56      	ldr	r2, [pc, #344]	; (8001078 <HAL_DMA_Abort_IT+0x1fc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d012      	beq.n	8000f4a <HAL_DMA_Abort_IT+0xce>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a54      	ldr	r2, [pc, #336]	; (800107c <HAL_DMA_Abort_IT+0x200>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00a      	beq.n	8000f44 <HAL_DMA_Abort_IT+0xc8>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a53      	ldr	r2, [pc, #332]	; (8001080 <HAL_DMA_Abort_IT+0x204>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d102      	bne.n	8000f3e <HAL_DMA_Abort_IT+0xc2>
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	e01b      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f42:	e018      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f48:	e015      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f4a:	2310      	movs	r3, #16
 8000f4c:	e013      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e011      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f56:	e00e      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f5c:	e00b      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f62:	e008      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	e005      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6e:	e002      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f70:	2310      	movs	r3, #16
 8000f72:	e000      	b.n	8000f76 <HAL_DMA_Abort_IT+0xfa>
 8000f74:	2301      	movs	r3, #1
 8000f76:	4a43      	ldr	r2, [pc, #268]	; (8001084 <HAL_DMA_Abort_IT+0x208>)
 8000f78:	6053      	str	r3, [r2, #4]
 8000f7a:	e057      	b.n	800102c <HAL_DMA_Abort_IT+0x1b0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a36      	ldr	r2, [pc, #216]	; (800105c <HAL_DMA_Abort_IT+0x1e0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d04f      	beq.n	8001026 <HAL_DMA_Abort_IT+0x1aa>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a35      	ldr	r2, [pc, #212]	; (8001060 <HAL_DMA_Abort_IT+0x1e4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d048      	beq.n	8001022 <HAL_DMA_Abort_IT+0x1a6>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a33      	ldr	r2, [pc, #204]	; (8001064 <HAL_DMA_Abort_IT+0x1e8>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d040      	beq.n	800101c <HAL_DMA_Abort_IT+0x1a0>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a32      	ldr	r2, [pc, #200]	; (8001068 <HAL_DMA_Abort_IT+0x1ec>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d038      	beq.n	8001016 <HAL_DMA_Abort_IT+0x19a>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a30      	ldr	r2, [pc, #192]	; (800106c <HAL_DMA_Abort_IT+0x1f0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d030      	beq.n	8001010 <HAL_DMA_Abort_IT+0x194>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <HAL_DMA_Abort_IT+0x1f4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d028      	beq.n	800100a <HAL_DMA_Abort_IT+0x18e>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a26      	ldr	r2, [pc, #152]	; (8001058 <HAL_DMA_Abort_IT+0x1dc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d020      	beq.n	8001004 <HAL_DMA_Abort_IT+0x188>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a2b      	ldr	r2, [pc, #172]	; (8001074 <HAL_DMA_Abort_IT+0x1f8>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d019      	beq.n	8001000 <HAL_DMA_Abort_IT+0x184>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a29      	ldr	r2, [pc, #164]	; (8001078 <HAL_DMA_Abort_IT+0x1fc>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d012      	beq.n	8000ffc <HAL_DMA_Abort_IT+0x180>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <HAL_DMA_Abort_IT+0x200>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d00a      	beq.n	8000ff6 <HAL_DMA_Abort_IT+0x17a>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a26      	ldr	r2, [pc, #152]	; (8001080 <HAL_DMA_Abort_IT+0x204>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d102      	bne.n	8000ff0 <HAL_DMA_Abort_IT+0x174>
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	e01b      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 8000ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff4:	e018      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 8000ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffa:	e015      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 8000ffc:	2310      	movs	r3, #16
 8000ffe:	e013      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 8001000:	2301      	movs	r3, #1
 8001002:	e011      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 8001004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001008:	e00e      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 800100a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800100e:	e00b      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	e008      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	e005      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 800101c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001020:	e002      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 8001022:	2310      	movs	r3, #16
 8001024:	e000      	b.n	8001028 <HAL_DMA_Abort_IT+0x1ac>
 8001026:	2301      	movs	r3, #1
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <HAL_DMA_Abort_IT+0x20c>)
 800102a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	4798      	blx	r3
    } 
  }
  return status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40020080 	.word	0x40020080
 800105c:	40020008 	.word	0x40020008
 8001060:	4002001c 	.word	0x4002001c
 8001064:	40020030 	.word	0x40020030
 8001068:	40020044 	.word	0x40020044
 800106c:	40020058 	.word	0x40020058
 8001070:	4002006c 	.word	0x4002006c
 8001074:	40020408 	.word	0x40020408
 8001078:	4002041c 	.word	0x4002041c
 800107c:	40020430 	.word	0x40020430
 8001080:	40020444 	.word	0x40020444
 8001084:	40020400 	.word	0x40020400
 8001088:	40020000 	.word	0x40020000

0800108c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	2204      	movs	r2, #4
 80010aa:	409a      	lsls	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80d6 	beq.w	8001262 <HAL_DMA_IRQHandler+0x1d6>
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80d0 	beq.w	8001262 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d107      	bne.n	80010e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0204 	bic.w	r2, r2, #4
 80010de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b9b      	ldr	r3, [pc, #620]	; (8001354 <HAL_DMA_IRQHandler+0x2c8>)
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d958      	bls.n	800119e <HAL_DMA_IRQHandler+0x112>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a99      	ldr	r2, [pc, #612]	; (8001358 <HAL_DMA_IRQHandler+0x2cc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d04f      	beq.n	8001196 <HAL_DMA_IRQHandler+0x10a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a98      	ldr	r2, [pc, #608]	; (800135c <HAL_DMA_IRQHandler+0x2d0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d048      	beq.n	8001192 <HAL_DMA_IRQHandler+0x106>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a96      	ldr	r2, [pc, #600]	; (8001360 <HAL_DMA_IRQHandler+0x2d4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d040      	beq.n	800118c <HAL_DMA_IRQHandler+0x100>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a95      	ldr	r2, [pc, #596]	; (8001364 <HAL_DMA_IRQHandler+0x2d8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d038      	beq.n	8001186 <HAL_DMA_IRQHandler+0xfa>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a93      	ldr	r2, [pc, #588]	; (8001368 <HAL_DMA_IRQHandler+0x2dc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d030      	beq.n	8001180 <HAL_DMA_IRQHandler+0xf4>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a92      	ldr	r2, [pc, #584]	; (800136c <HAL_DMA_IRQHandler+0x2e0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d028      	beq.n	800117a <HAL_DMA_IRQHandler+0xee>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a89      	ldr	r2, [pc, #548]	; (8001354 <HAL_DMA_IRQHandler+0x2c8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d020      	beq.n	8001174 <HAL_DMA_IRQHandler+0xe8>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a8e      	ldr	r2, [pc, #568]	; (8001370 <HAL_DMA_IRQHandler+0x2e4>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d019      	beq.n	8001170 <HAL_DMA_IRQHandler+0xe4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a8c      	ldr	r2, [pc, #560]	; (8001374 <HAL_DMA_IRQHandler+0x2e8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d012      	beq.n	800116c <HAL_DMA_IRQHandler+0xe0>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a8b      	ldr	r2, [pc, #556]	; (8001378 <HAL_DMA_IRQHandler+0x2ec>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d00a      	beq.n	8001166 <HAL_DMA_IRQHandler+0xda>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a89      	ldr	r2, [pc, #548]	; (800137c <HAL_DMA_IRQHandler+0x2f0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d102      	bne.n	8001160 <HAL_DMA_IRQHandler+0xd4>
 800115a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800115e:	e01b      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 8001160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001164:	e018      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	e015      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 800116c:	2340      	movs	r3, #64	; 0x40
 800116e:	e013      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 8001170:	2304      	movs	r3, #4
 8001172:	e011      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 8001174:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001178:	e00e      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 800117a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800117e:	e00b      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 8001180:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001184:	e008      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 8001186:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118a:	e005      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 800118c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001190:	e002      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 8001192:	2340      	movs	r3, #64	; 0x40
 8001194:	e000      	b.n	8001198 <HAL_DMA_IRQHandler+0x10c>
 8001196:	2304      	movs	r3, #4
 8001198:	4a79      	ldr	r2, [pc, #484]	; (8001380 <HAL_DMA_IRQHandler+0x2f4>)
 800119a:	6053      	str	r3, [r2, #4]
 800119c:	e057      	b.n	800124e <HAL_DMA_IRQHandler+0x1c2>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6d      	ldr	r2, [pc, #436]	; (8001358 <HAL_DMA_IRQHandler+0x2cc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d04f      	beq.n	8001248 <HAL_DMA_IRQHandler+0x1bc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a6b      	ldr	r2, [pc, #428]	; (800135c <HAL_DMA_IRQHandler+0x2d0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d048      	beq.n	8001244 <HAL_DMA_IRQHandler+0x1b8>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a6a      	ldr	r2, [pc, #424]	; (8001360 <HAL_DMA_IRQHandler+0x2d4>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d040      	beq.n	800123e <HAL_DMA_IRQHandler+0x1b2>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a68      	ldr	r2, [pc, #416]	; (8001364 <HAL_DMA_IRQHandler+0x2d8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d038      	beq.n	8001238 <HAL_DMA_IRQHandler+0x1ac>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a67      	ldr	r2, [pc, #412]	; (8001368 <HAL_DMA_IRQHandler+0x2dc>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d030      	beq.n	8001232 <HAL_DMA_IRQHandler+0x1a6>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a65      	ldr	r2, [pc, #404]	; (800136c <HAL_DMA_IRQHandler+0x2e0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d028      	beq.n	800122c <HAL_DMA_IRQHandler+0x1a0>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a5d      	ldr	r2, [pc, #372]	; (8001354 <HAL_DMA_IRQHandler+0x2c8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d020      	beq.n	8001226 <HAL_DMA_IRQHandler+0x19a>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a61      	ldr	r2, [pc, #388]	; (8001370 <HAL_DMA_IRQHandler+0x2e4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d019      	beq.n	8001222 <HAL_DMA_IRQHandler+0x196>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a60      	ldr	r2, [pc, #384]	; (8001374 <HAL_DMA_IRQHandler+0x2e8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d012      	beq.n	800121e <HAL_DMA_IRQHandler+0x192>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a5e      	ldr	r2, [pc, #376]	; (8001378 <HAL_DMA_IRQHandler+0x2ec>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00a      	beq.n	8001218 <HAL_DMA_IRQHandler+0x18c>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a5d      	ldr	r2, [pc, #372]	; (800137c <HAL_DMA_IRQHandler+0x2f0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d102      	bne.n	8001212 <HAL_DMA_IRQHandler+0x186>
 800120c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001210:	e01b      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 8001212:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001216:	e018      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 8001218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121c:	e015      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 800121e:	2340      	movs	r3, #64	; 0x40
 8001220:	e013      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 8001222:	2304      	movs	r3, #4
 8001224:	e011      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 8001226:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800122a:	e00e      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 800122c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001230:	e00b      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 8001232:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001236:	e008      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 8001238:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800123c:	e005      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	e002      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 8001244:	2340      	movs	r3, #64	; 0x40
 8001246:	e000      	b.n	800124a <HAL_DMA_IRQHandler+0x1be>
 8001248:	2304      	movs	r3, #4
 800124a:	4a4e      	ldr	r2, [pc, #312]	; (8001384 <HAL_DMA_IRQHandler+0x2f8>)
 800124c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8136 	beq.w	80014c4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001260:	e130      	b.n	80014c4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	2202      	movs	r2, #2
 8001268:	409a      	lsls	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	f000 80f8 	beq.w	8001464 <HAL_DMA_IRQHandler+0x3d8>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80f2 	beq.w	8001464 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10b      	bne.n	80012a6 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020a 	bic.w	r2, r2, #10
 800129c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b29      	ldr	r3, [pc, #164]	; (8001354 <HAL_DMA_IRQHandler+0x2c8>)
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d973      	bls.n	800139a <HAL_DMA_IRQHandler+0x30e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a28      	ldr	r2, [pc, #160]	; (8001358 <HAL_DMA_IRQHandler+0x2cc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d06a      	beq.n	8001392 <HAL_DMA_IRQHandler+0x306>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a26      	ldr	r2, [pc, #152]	; (800135c <HAL_DMA_IRQHandler+0x2d0>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d063      	beq.n	800138e <HAL_DMA_IRQHandler+0x302>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a25      	ldr	r2, [pc, #148]	; (8001360 <HAL_DMA_IRQHandler+0x2d4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d05b      	beq.n	8001388 <HAL_DMA_IRQHandler+0x2fc>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a23      	ldr	r2, [pc, #140]	; (8001364 <HAL_DMA_IRQHandler+0x2d8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d038      	beq.n	800134c <HAL_DMA_IRQHandler+0x2c0>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a22      	ldr	r2, [pc, #136]	; (8001368 <HAL_DMA_IRQHandler+0x2dc>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d030      	beq.n	8001346 <HAL_DMA_IRQHandler+0x2ba>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <HAL_DMA_IRQHandler+0x2e0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d028      	beq.n	8001340 <HAL_DMA_IRQHandler+0x2b4>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <HAL_DMA_IRQHandler+0x2c8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d020      	beq.n	800133a <HAL_DMA_IRQHandler+0x2ae>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <HAL_DMA_IRQHandler+0x2e4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_DMA_IRQHandler+0x2aa>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <HAL_DMA_IRQHandler+0x2e8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d012      	beq.n	8001332 <HAL_DMA_IRQHandler+0x2a6>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_DMA_IRQHandler+0x2ec>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00a      	beq.n	800132c <HAL_DMA_IRQHandler+0x2a0>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <HAL_DMA_IRQHandler+0x2f0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d102      	bne.n	8001326 <HAL_DMA_IRQHandler+0x29a>
 8001320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001324:	e036      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 8001326:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132a:	e033      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 800132c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001330:	e030      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 8001332:	2320      	movs	r3, #32
 8001334:	e02e      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 8001336:	2302      	movs	r3, #2
 8001338:	e02c      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 800133a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800133e:	e029      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 8001340:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001344:	e026      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 8001346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134a:	e023      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	e020      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 8001352:	bf00      	nop
 8001354:	40020080 	.word	0x40020080
 8001358:	40020008 	.word	0x40020008
 800135c:	4002001c 	.word	0x4002001c
 8001360:	40020030 	.word	0x40020030
 8001364:	40020044 	.word	0x40020044
 8001368:	40020058 	.word	0x40020058
 800136c:	4002006c 	.word	0x4002006c
 8001370:	40020408 	.word	0x40020408
 8001374:	4002041c 	.word	0x4002041c
 8001378:	40020430 	.word	0x40020430
 800137c:	40020444 	.word	0x40020444
 8001380:	40020400 	.word	0x40020400
 8001384:	40020000 	.word	0x40020000
 8001388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138c:	e002      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 800138e:	2320      	movs	r3, #32
 8001390:	e000      	b.n	8001394 <HAL_DMA_IRQHandler+0x308>
 8001392:	2302      	movs	r3, #2
 8001394:	4a4e      	ldr	r2, [pc, #312]	; (80014d0 <HAL_DMA_IRQHandler+0x444>)
 8001396:	6053      	str	r3, [r2, #4]
 8001398:	e057      	b.n	800144a <HAL_DMA_IRQHandler+0x3be>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a4d      	ldr	r2, [pc, #308]	; (80014d4 <HAL_DMA_IRQHandler+0x448>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d04f      	beq.n	8001444 <HAL_DMA_IRQHandler+0x3b8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a4b      	ldr	r2, [pc, #300]	; (80014d8 <HAL_DMA_IRQHandler+0x44c>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d048      	beq.n	8001440 <HAL_DMA_IRQHandler+0x3b4>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a4a      	ldr	r2, [pc, #296]	; (80014dc <HAL_DMA_IRQHandler+0x450>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d040      	beq.n	800143a <HAL_DMA_IRQHandler+0x3ae>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a48      	ldr	r2, [pc, #288]	; (80014e0 <HAL_DMA_IRQHandler+0x454>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d038      	beq.n	8001434 <HAL_DMA_IRQHandler+0x3a8>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a47      	ldr	r2, [pc, #284]	; (80014e4 <HAL_DMA_IRQHandler+0x458>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d030      	beq.n	800142e <HAL_DMA_IRQHandler+0x3a2>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a45      	ldr	r2, [pc, #276]	; (80014e8 <HAL_DMA_IRQHandler+0x45c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d028      	beq.n	8001428 <HAL_DMA_IRQHandler+0x39c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a44      	ldr	r2, [pc, #272]	; (80014ec <HAL_DMA_IRQHandler+0x460>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d020      	beq.n	8001422 <HAL_DMA_IRQHandler+0x396>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a42      	ldr	r2, [pc, #264]	; (80014f0 <HAL_DMA_IRQHandler+0x464>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d019      	beq.n	800141e <HAL_DMA_IRQHandler+0x392>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a41      	ldr	r2, [pc, #260]	; (80014f4 <HAL_DMA_IRQHandler+0x468>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d012      	beq.n	800141a <HAL_DMA_IRQHandler+0x38e>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a3f      	ldr	r2, [pc, #252]	; (80014f8 <HAL_DMA_IRQHandler+0x46c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00a      	beq.n	8001414 <HAL_DMA_IRQHandler+0x388>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a3e      	ldr	r2, [pc, #248]	; (80014fc <HAL_DMA_IRQHandler+0x470>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d102      	bne.n	800140e <HAL_DMA_IRQHandler+0x382>
 8001408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140c:	e01b      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 800140e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001412:	e018      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 8001414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001418:	e015      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 800141a:	2320      	movs	r3, #32
 800141c:	e013      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 800141e:	2302      	movs	r3, #2
 8001420:	e011      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 8001422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001426:	e00e      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 8001428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800142c:	e00b      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 800142e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001432:	e008      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 8001434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001438:	e005      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 800143a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800143e:	e002      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 8001440:	2320      	movs	r3, #32
 8001442:	e000      	b.n	8001446 <HAL_DMA_IRQHandler+0x3ba>
 8001444:	2302      	movs	r3, #2
 8001446:	4a2e      	ldr	r2, [pc, #184]	; (8001500 <HAL_DMA_IRQHandler+0x474>)
 8001448:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	2b00      	cmp	r3, #0
 8001458:	d034      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001462:	e02f      	b.n	80014c4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	2208      	movs	r2, #8
 800146a:	409a      	lsls	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4013      	ands	r3, r2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d028      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x43a>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d023      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 020e 	bic.w	r2, r2, #14
 800148c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	4798      	blx	r3
    }
  }
  return;
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
}
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40020400 	.word	0x40020400
 80014d4:	40020008 	.word	0x40020008
 80014d8:	4002001c 	.word	0x4002001c
 80014dc:	40020030 	.word	0x40020030
 80014e0:	40020044 	.word	0x40020044
 80014e4:	40020058 	.word	0x40020058
 80014e8:	4002006c 	.word	0x4002006c
 80014ec:	40020080 	.word	0x40020080
 80014f0:	40020408 	.word	0x40020408
 80014f4:	4002041c 	.word	0x4002041c
 80014f8:	40020430 	.word	0x40020430
 80014fc:	40020444 	.word	0x40020444
 8001500:	40020000 	.word	0x40020000

08001504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001504:	b480      	push	{r7}
 8001506:	b08b      	sub	sp, #44	; 0x2c
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001516:	e179      	b.n	800180c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001518:	2201      	movs	r2, #1
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	69fa      	ldr	r2, [r7, #28]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 8168 	bne.w	8001806 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4aa0      	ldr	r2, [pc, #640]	; (80017bc <HAL_GPIO_Init+0x2b8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d05e      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001540:	4a9e      	ldr	r2, [pc, #632]	; (80017bc <HAL_GPIO_Init+0x2b8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d875      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001546:	4a9e      	ldr	r2, [pc, #632]	; (80017c0 <HAL_GPIO_Init+0x2bc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d058      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 800154c:	4a9c      	ldr	r2, [pc, #624]	; (80017c0 <HAL_GPIO_Init+0x2bc>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d86f      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001552:	4a9c      	ldr	r2, [pc, #624]	; (80017c4 <HAL_GPIO_Init+0x2c0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d052      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001558:	4a9a      	ldr	r2, [pc, #616]	; (80017c4 <HAL_GPIO_Init+0x2c0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d869      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800155e:	4a9a      	ldr	r2, [pc, #616]	; (80017c8 <HAL_GPIO_Init+0x2c4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d04c      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001564:	4a98      	ldr	r2, [pc, #608]	; (80017c8 <HAL_GPIO_Init+0x2c4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d863      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800156a:	4a98      	ldr	r2, [pc, #608]	; (80017cc <HAL_GPIO_Init+0x2c8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d046      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
 8001570:	4a96      	ldr	r2, [pc, #600]	; (80017cc <HAL_GPIO_Init+0x2c8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d85d      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 8001576:	2b12      	cmp	r3, #18
 8001578:	d82a      	bhi.n	80015d0 <HAL_GPIO_Init+0xcc>
 800157a:	2b12      	cmp	r3, #18
 800157c:	d859      	bhi.n	8001632 <HAL_GPIO_Init+0x12e>
 800157e:	a201      	add	r2, pc, #4	; (adr r2, 8001584 <HAL_GPIO_Init+0x80>)
 8001580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001584:	080015ff 	.word	0x080015ff
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015eb 	.word	0x080015eb
 8001590:	0800162d 	.word	0x0800162d
 8001594:	08001633 	.word	0x08001633
 8001598:	08001633 	.word	0x08001633
 800159c:	08001633 	.word	0x08001633
 80015a0:	08001633 	.word	0x08001633
 80015a4:	08001633 	.word	0x08001633
 80015a8:	08001633 	.word	0x08001633
 80015ac:	08001633 	.word	0x08001633
 80015b0:	08001633 	.word	0x08001633
 80015b4:	08001633 	.word	0x08001633
 80015b8:	08001633 	.word	0x08001633
 80015bc:	08001633 	.word	0x08001633
 80015c0:	08001633 	.word	0x08001633
 80015c4:	08001633 	.word	0x08001633
 80015c8:	080015e1 	.word	0x080015e1
 80015cc:	080015f5 	.word	0x080015f5
 80015d0:	4a7f      	ldr	r2, [pc, #508]	; (80017d0 <HAL_GPIO_Init+0x2cc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015d6:	e02c      	b.n	8001632 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e029      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	3304      	adds	r3, #4
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e024      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	3308      	adds	r3, #8
 80015f0:	623b      	str	r3, [r7, #32]
          break;
 80015f2:	e01f      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	330c      	adds	r3, #12
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e01a      	b.n	8001634 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d102      	bne.n	800160c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001606:	2304      	movs	r3, #4
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e013      	b.n	8001634 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001614:	2308      	movs	r3, #8
 8001616:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	611a      	str	r2, [r3, #16]
          break;
 800161e:	e009      	b.n	8001634 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001620:	2308      	movs	r3, #8
 8001622:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	615a      	str	r2, [r3, #20]
          break;
 800162a:	e003      	b.n	8001634 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x130>
          break;
 8001632:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d801      	bhi.n	800163e <HAL_GPIO_Init+0x13a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	e001      	b.n	8001642 <HAL_GPIO_Init+0x13e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3304      	adds	r3, #4
 8001642:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2bff      	cmp	r3, #255	; 0xff
 8001648:	d802      	bhi.n	8001650 <HAL_GPIO_Init+0x14c>
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x152>
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	3b08      	subs	r3, #8
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	210f      	movs	r1, #15
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	401a      	ands	r2, r3
 8001668:	6a39      	ldr	r1, [r7, #32]
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	431a      	orrs	r2, r3
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	f000 80c1 	beq.w	8001806 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001684:	4b53      	ldr	r3, [pc, #332]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b50      	ldr	r3, [pc, #320]	; (80017d4 <HAL_GPIO_Init+0x2d0>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800169c:	4a4e      	ldr	r2, [pc, #312]	; (80017d8 <HAL_GPIO_Init+0x2d4>)
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	089b      	lsrs	r3, r3, #2
 80016a2:	3302      	adds	r3, #2
 80016a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	220f      	movs	r2, #15
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a46      	ldr	r2, [pc, #280]	; (80017dc <HAL_GPIO_Init+0x2d8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d01f      	beq.n	8001708 <HAL_GPIO_Init+0x204>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a45      	ldr	r2, [pc, #276]	; (80017e0 <HAL_GPIO_Init+0x2dc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d019      	beq.n	8001704 <HAL_GPIO_Init+0x200>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a44      	ldr	r2, [pc, #272]	; (80017e4 <HAL_GPIO_Init+0x2e0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_GPIO_Init+0x1fc>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a43      	ldr	r2, [pc, #268]	; (80017e8 <HAL_GPIO_Init+0x2e4>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_GPIO_Init+0x1f8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <HAL_GPIO_Init+0x2e8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d007      	beq.n	80016f8 <HAL_GPIO_Init+0x1f4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a41      	ldr	r2, [pc, #260]	; (80017f0 <HAL_GPIO_Init+0x2ec>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_Init+0x1f0>
 80016f0:	2305      	movs	r3, #5
 80016f2:	e00a      	b.n	800170a <HAL_GPIO_Init+0x206>
 80016f4:	2306      	movs	r3, #6
 80016f6:	e008      	b.n	800170a <HAL_GPIO_Init+0x206>
 80016f8:	2304      	movs	r3, #4
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x206>
 80016fc:	2303      	movs	r3, #3
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x206>
 8001700:	2302      	movs	r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x206>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x206>
 8001708:	2300      	movs	r3, #0
 800170a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800171a:	492f      	ldr	r1, [pc, #188]	; (80017d8 <HAL_GPIO_Init+0x2d4>)
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	492e      	ldr	r1, [pc, #184]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	43db      	mvns	r3, r3
 800174a:	492a      	ldr	r1, [pc, #168]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800174c:	4013      	ands	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4924      	ldr	r1, [pc, #144]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	4920      	ldr	r1, [pc, #128]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001774:	4013      	ands	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	491a      	ldr	r1, [pc, #104]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	4916      	ldr	r1, [pc, #88]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 800179c:	4013      	ands	r3, r2
 800179e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d025      	beq.n	80017f8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	4910      	ldr	r1, [pc, #64]	; (80017f4 <HAL_GPIO_Init+0x2f0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60cb      	str	r3, [r1, #12]
 80017b8:	e025      	b.n	8001806 <HAL_GPIO_Init+0x302>
 80017ba:	bf00      	nop
 80017bc:	10320000 	.word	0x10320000
 80017c0:	10310000 	.word	0x10310000
 80017c4:	10220000 	.word	0x10220000
 80017c8:	10210000 	.word	0x10210000
 80017cc:	10120000 	.word	0x10120000
 80017d0:	10110000 	.word	0x10110000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000
 80017dc:	40010800 	.word	0x40010800
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	40011000 	.word	0x40011000
 80017e8:	40011400 	.word	0x40011400
 80017ec:	40011800 	.word	0x40011800
 80017f0:	40011c00 	.word	0x40011c00
 80017f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_GPIO_Init+0x324>)
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	43db      	mvns	r3, r3
 8001800:	4909      	ldr	r1, [pc, #36]	; (8001828 <HAL_GPIO_Init+0x324>)
 8001802:	4013      	ands	r3, r2
 8001804:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	3301      	adds	r3, #1
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	fa22 f303 	lsr.w	r3, r2, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	f47f ae7e 	bne.w	8001518 <HAL_GPIO_Init+0x14>
  }
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	372c      	adds	r7, #44	; 0x2c
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	40010400 	.word	0x40010400

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001848:	e003      	b.n	8001852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	611a      	str	r2, [r3, #16]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f806 	bl	800188c <HAL_GPIO_EXTI_Callback>
  }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40010400 	.word	0x40010400

0800188c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e12b      	b.n	8001b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe fdac 	bl	8000424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2224      	movs	r2, #36	; 0x24
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001904:	f000 fce4 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8001908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4a81      	ldr	r2, [pc, #516]	; (8001b14 <HAL_I2C_Init+0x274>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d807      	bhi.n	8001924 <HAL_I2C_Init+0x84>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a80      	ldr	r2, [pc, #512]	; (8001b18 <HAL_I2C_Init+0x278>)
 8001918:	4293      	cmp	r3, r2
 800191a:	bf94      	ite	ls
 800191c:	2301      	movls	r3, #1
 800191e:	2300      	movhi	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	e006      	b.n	8001932 <HAL_I2C_Init+0x92>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4a7d      	ldr	r2, [pc, #500]	; (8001b1c <HAL_I2C_Init+0x27c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	bf94      	ite	ls
 800192c:	2301      	movls	r3, #1
 800192e:	2300      	movhi	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0e7      	b.n	8001b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4a78      	ldr	r2, [pc, #480]	; (8001b20 <HAL_I2C_Init+0x280>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9b      	lsrs	r3, r3, #18
 8001944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	430a      	orrs	r2, r1
 8001958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	4a6a      	ldr	r2, [pc, #424]	; (8001b14 <HAL_I2C_Init+0x274>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d802      	bhi.n	8001974 <HAL_I2C_Init+0xd4>
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3301      	adds	r3, #1
 8001972:	e009      	b.n	8001988 <HAL_I2C_Init+0xe8>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	4a69      	ldr	r2, [pc, #420]	; (8001b24 <HAL_I2C_Init+0x284>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	3301      	adds	r3, #1
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	430b      	orrs	r3, r1
 800198e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800199a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	495c      	ldr	r1, [pc, #368]	; (8001b14 <HAL_I2C_Init+0x274>)
 80019a4:	428b      	cmp	r3, r1
 80019a6:	d819      	bhi.n	80019dc <HAL_I2C_Init+0x13c>
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1e59      	subs	r1, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b6:	1c59      	adds	r1, r3, #1
 80019b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019bc:	400b      	ands	r3, r1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00a      	beq.n	80019d8 <HAL_I2C_Init+0x138>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1e59      	subs	r1, r3, #1
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80019d0:	3301      	adds	r3, #1
 80019d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d6:	e051      	b.n	8001a7c <HAL_I2C_Init+0x1dc>
 80019d8:	2304      	movs	r3, #4
 80019da:	e04f      	b.n	8001a7c <HAL_I2C_Init+0x1dc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d111      	bne.n	8001a08 <HAL_I2C_Init+0x168>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1e58      	subs	r0, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	440b      	add	r3, r1
 80019f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f6:	3301      	adds	r3, #1
 80019f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e012      	b.n	8001a2e <HAL_I2C_Init+0x18e>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1e58      	subs	r0, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	0099      	lsls	r1, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Init+0x196>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e022      	b.n	8001a7c <HAL_I2C_Init+0x1dc>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10e      	bne.n	8001a5c <HAL_I2C_Init+0x1bc>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1e58      	subs	r0, r3, #1
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6859      	ldr	r1, [r3, #4]
 8001a46:	460b      	mov	r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	440b      	add	r3, r1
 8001a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5a:	e00f      	b.n	8001a7c <HAL_I2C_Init+0x1dc>
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1e58      	subs	r0, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	0099      	lsls	r1, r3, #2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a72:	3301      	adds	r3, #1
 8001a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	6809      	ldr	r1, [r1, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	431a      	orrs	r2, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6911      	ldr	r1, [r2, #16]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68d2      	ldr	r2, [r2, #12]
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f042 0201 	orr.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2220      	movs	r2, #32
 8001af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	000186a0 	.word	0x000186a0
 8001b18:	001e847f 	.word	0x001e847f
 8001b1c:	003d08ff 	.word	0x003d08ff
 8001b20:	431bde83 	.word	0x431bde83
 8001b24:	10624dd3 	.word	0x10624dd3

08001b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e26c      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8087 	beq.w	8001c56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b48:	4b92      	ldr	r3, [pc, #584]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d00c      	beq.n	8001b6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b54:	4b8f      	ldr	r3, [pc, #572]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d112      	bne.n	8001b86 <HAL_RCC_OscConfig+0x5e>
 8001b60:	4b8c      	ldr	r3, [pc, #560]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6c:	d10b      	bne.n	8001b86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6e:	4b89      	ldr	r3, [pc, #548]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d06c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x12c>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d168      	bne.n	8001c54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e246      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x76>
 8001b90:	4b80      	ldr	r3, [pc, #512]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a7f      	ldr	r2, [pc, #508]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
 8001b9c:	e02e      	b.n	8001bfc <HAL_RCC_OscConfig+0xd4>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x98>
 8001ba6:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7a      	ldr	r2, [pc, #488]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a77      	ldr	r2, [pc, #476]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e01d      	b.n	8001bfc <HAL_RCC_OscConfig+0xd4>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0xbc>
 8001bca:	4b72      	ldr	r3, [pc, #456]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a71      	ldr	r2, [pc, #452]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b6f      	ldr	r3, [pc, #444]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6e      	ldr	r2, [pc, #440]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0xd4>
 8001be4:	4b6b      	ldr	r3, [pc, #428]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a6a      	ldr	r2, [pc, #424]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a67      	ldr	r2, [pc, #412]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d013      	beq.n	8001c2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c04:	f7fe ffac 	bl	8000b60 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7fe ffa8 	bl	8000b60 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	; 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1fa      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0xe4>
 8001c2a:	e014      	b.n	8001c56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7fe ff98 	bl	8000b60 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7fe ff94 	bl	8000b60 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e1e6      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f0      	bne.n	8001c34 <HAL_RCC_OscConfig+0x10c>
 8001c52:	e000      	b.n	8001c56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d063      	beq.n	8001d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c62:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00b      	beq.n	8001c86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c6e:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d11c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x18c>
 8001c7a:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d116      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <HAL_RCC_OscConfig+0x176>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d001      	beq.n	8001c9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e1ba      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4939      	ldr	r1, [pc, #228]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	e03a      	b.n	8001d2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cbc:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7fe ff4d 	bl	8000b60 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cca:	f7fe ff49 	bl	8000b60 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e19b      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	4b2d      	ldr	r3, [pc, #180]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4927      	ldr	r1, [pc, #156]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e015      	b.n	8001d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_RCC_OscConfig+0x270>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7fe ff2c 	bl	8000b60 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0c:	f7fe ff28 	bl	8000b60 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e17a      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0308 	and.w	r3, r3, #8
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d03a      	beq.n	8001dac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d019      	beq.n	8001d72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d44:	f7fe ff0c 	bl	8000b60 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7fe ff08 	bl	8000b60 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e15a      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f000 fad8 	bl	8002320 <RCC_Delay>
 8001d70:	e01c      	b.n	8001dac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_RCC_OscConfig+0x274>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7fe fef2 	bl	8000b60 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7e:	e00f      	b.n	8001da0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7fe feee 	bl	8000b60 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d908      	bls.n	8001da0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e140      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	42420000 	.word	0x42420000
 8001d9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da0:	4b9e      	ldr	r3, [pc, #632]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e9      	bne.n	8001d80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80a6 	beq.w	8001f06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dbe:	4b97      	ldr	r3, [pc, #604]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10d      	bne.n	8001de6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dca:	4b94      	ldr	r3, [pc, #592]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4a93      	ldr	r2, [pc, #588]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	61d3      	str	r3, [r2, #28]
 8001dd6:	4b91      	ldr	r3, [pc, #580]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de2:	2301      	movs	r3, #1
 8001de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de6:	4b8e      	ldr	r3, [pc, #568]	; (8002020 <HAL_RCC_OscConfig+0x4f8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d118      	bne.n	8001e24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001df2:	4b8b      	ldr	r3, [pc, #556]	; (8002020 <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a8a      	ldr	r2, [pc, #552]	; (8002020 <HAL_RCC_OscConfig+0x4f8>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfe:	f7fe feaf 	bl	8000b60 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e06:	f7fe feab 	bl	8000b60 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b64      	cmp	r3, #100	; 0x64
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0fd      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	4b81      	ldr	r3, [pc, #516]	; (8002020 <HAL_RCC_OscConfig+0x4f8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x312>
 8001e2c:	4b7b      	ldr	r3, [pc, #492]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a7a      	ldr	r2, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6213      	str	r3, [r2, #32]
 8001e38:	e02d      	b.n	8001e96 <HAL_RCC_OscConfig+0x36e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x334>
 8001e42:	4b76      	ldr	r3, [pc, #472]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a75      	ldr	r2, [pc, #468]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6213      	str	r3, [r2, #32]
 8001e4e:	4b73      	ldr	r3, [pc, #460]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a72      	ldr	r2, [pc, #456]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	6213      	str	r3, [r2, #32]
 8001e5a:	e01c      	b.n	8001e96 <HAL_RCC_OscConfig+0x36e>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d10c      	bne.n	8001e7e <HAL_RCC_OscConfig+0x356>
 8001e64:	4b6d      	ldr	r3, [pc, #436]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a6c      	ldr	r2, [pc, #432]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6213      	str	r3, [r2, #32]
 8001e70:	4b6a      	ldr	r3, [pc, #424]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a69      	ldr	r2, [pc, #420]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	e00b      	b.n	8001e96 <HAL_RCC_OscConfig+0x36e>
 8001e7e:	4b67      	ldr	r3, [pc, #412]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a66      	ldr	r2, [pc, #408]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4b64      	ldr	r3, [pc, #400]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a63      	ldr	r2, [pc, #396]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d015      	beq.n	8001eca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fe5f 	bl	8000b60 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7fe fe5b 	bl	8000b60 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e0ab      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	4b57      	ldr	r3, [pc, #348]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ee      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x37e>
 8001ec8:	e014      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7fe fe49 	bl	8000b60 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe fe45 	bl	8000b60 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e095      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee8:	4b4c      	ldr	r3, [pc, #304]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1ee      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ef4:	7dfb      	ldrb	r3, [r7, #23]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d105      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efa:	4b48      	ldr	r3, [pc, #288]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a47      	ldr	r2, [pc, #284]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 8081 	beq.w	8002012 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f10:	4b42      	ldr	r3, [pc, #264]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d061      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d146      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f24:	4b3f      	ldr	r3, [pc, #252]	; (8002024 <HAL_RCC_OscConfig+0x4fc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe fe19 	bl	8000b60 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f32:	f7fe fe15 	bl	8000b60 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e067      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	4b35      	ldr	r3, [pc, #212]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f0      	bne.n	8001f32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f58:	d108      	bne.n	8001f6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f5a:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	492d      	ldr	r1, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a19      	ldr	r1, [r3, #32]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	4927      	ldr	r1, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_RCC_OscConfig+0x4fc>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe fde9 	bl	8000b60 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f92:	f7fe fde5 	bl	8000b60 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e037      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x46a>
 8001fb0:	e02f      	b.n	8002012 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b1c      	ldr	r3, [pc, #112]	; (8002024 <HAL_RCC_OscConfig+0x4fc>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fdd2 	bl	8000b60 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe fdce 	bl	8000b60 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e020      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x498>
 8001fde:	e018      	b.n	8002012 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e013      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d106      	bne.n	800200e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d001      	beq.n	8002012 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	40007000 	.word	0x40007000
 8002024:	42420060 	.word	0x42420060

08002028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0d0      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800203c:	4b6a      	ldr	r3, [pc, #424]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d910      	bls.n	800206c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b67      	ldr	r3, [pc, #412]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 0207 	bic.w	r2, r3, #7
 8002052:	4965      	ldr	r1, [pc, #404]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b63      	ldr	r3, [pc, #396]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0b8      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800208e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800209c:	4b53      	ldr	r3, [pc, #332]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a52      	ldr	r2, [pc, #328]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a8:	4b50      	ldr	r3, [pc, #320]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	494d      	ldr	r1, [pc, #308]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d040      	beq.n	8002148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d107      	bne.n	80020de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d115      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e07f      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e073      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e06b      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b39      	ldr	r3, [pc, #228]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4936      	ldr	r1, [pc, #216]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002118:	f7fe fd22 	bl	8000b60 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fd1e 	bl	8000b60 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	; 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e053      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b27      	ldr	r3, [pc, #156]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d210      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 0207 	bic.w	r2, r3, #7
 800215e:	4922      	ldr	r1, [pc, #136]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e032      	b.n	80021de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d008      	beq.n	8002196 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4916      	ldr	r1, [pc, #88]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	490e      	ldr	r1, [pc, #56]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b6:	f000 f821 	bl	80021fc <HAL_RCC_GetSysClockFreq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	490a      	ldr	r1, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x1c8>)
 80021c8:	5ccb      	ldrb	r3, [r1, r3]
 80021ca:	fa22 f303 	lsr.w	r3, r2, r3
 80021ce:	4a09      	ldr	r2, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1cc>)
 80021d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1d0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fc80 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40022000 	.word	0x40022000
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08003310 	.word	0x08003310
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000004 	.word	0x20000004

080021fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021fc:	b490      	push	{r4, r7}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002204:	1d3c      	adds	r4, r7, #4
 8002206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800220c:	f240 2301 	movw	r3, #513	; 0x201
 8002210:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b04      	cmp	r3, #4
 8002234:	d002      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x40>
 8002236:	2b08      	cmp	r3, #8
 8002238:	d003      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x46>
 800223a:	e02d      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223e:	623b      	str	r3, [r7, #32]
      break;
 8002240:	e02d      	b.n	800229e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	0c9b      	lsrs	r3, r3, #18
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800224e:	4413      	add	r3, r2
 8002250:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002254:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	0c5b      	lsrs	r3, r3, #17
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800226e:	4413      	add	r3, r2
 8002270:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002274:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227a:	fb02 f203 	mul.w	r2, r2, r3
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	e004      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	623b      	str	r3, [r7, #32]
      break;
 8002296:	e002      	b.n	800229e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800229a:	623b      	str	r3, [r7, #32]
      break;
 800229c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229e:	6a3b      	ldr	r3, [r7, #32]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3728      	adds	r7, #40	; 0x28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc90      	pop	{r4, r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	08003300 	.word	0x08003300
 80022b0:	40021000 	.word	0x40021000
 80022b4:	007a1200 	.word	0x007a1200
 80022b8:	003d0900 	.word	0x003d0900

080022bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c0:	4b02      	ldr	r3, [pc, #8]	; (80022cc <HAL_RCC_GetHCLKFreq+0x10>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000000 	.word	0x20000000

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d4:	f7ff fff2 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4903      	ldr	r1, [pc, #12]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	08003320 	.word	0x08003320

080022f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022fc:	f7ff ffde 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0adb      	lsrs	r3, r3, #11
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4903      	ldr	r1, [pc, #12]	; (800231c <HAL_RCC_GetPCLK2Freq+0x24>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	08003320 	.word	0x08003320

08002320 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <RCC_Delay+0x34>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <RCC_Delay+0x38>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	0a5b      	lsrs	r3, r3, #9
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800233c:	bf00      	nop
  }
  while (Delay --);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e5a      	subs	r2, r3, #1
 8002342:	60fa      	str	r2, [r7, #12]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1f9      	bne.n	800233c <RCC_Delay+0x1c>
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3714      	adds	r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	20000000 	.word	0x20000000
 8002358:	10624dd3 	.word	0x10624dd3

0800235c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e076      	b.n	800245c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d108      	bne.n	8002388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800237e:	d009      	beq.n	8002394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
 8002386:	e005      	b.n	8002394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe f90a 	bl	80005c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	ea42 0103 	orr.w	r1, r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	0c1a      	lsrs	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f002 0204 	and.w	r2, r2, #4
 800243a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69da      	ldr	r2, [r3, #28]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	099b      	lsrs	r3, r3, #6
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10f      	bne.n	80024a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	099b      	lsrs	r3, r3, #6
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
    return;
 80024a6:	e0be      	b.n	8002626 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_SPI_IRQHandler+0x66>
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	09db      	lsrs	r3, r3, #7
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	4798      	blx	r3
    return;
 80024c8:	e0ad      	b.n	8002626 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	095b      	lsrs	r3, r3, #5
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_SPI_IRQHandler+0x80>
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	099b      	lsrs	r3, r3, #6
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80a1 	beq.w	8002626 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 809a 	beq.w	8002626 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d023      	beq.n	8002546 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b03      	cmp	r3, #3
 8002508:	d011      	beq.n	800252e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f043 0204 	orr.w	r2, r3, #4
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	e00b      	b.n	8002546 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	693b      	ldr	r3, [r7, #16]
        return;
 8002544:	e06f      	b.n	8002626 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d014      	beq.n	800257c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	2b00      	cmp	r3, #0
 8002582:	d04f      	beq.n	8002624 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002592:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d104      	bne.n	80025b0 <HAL_SPI_IRQHandler+0x14c>
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d034      	beq.n	800261a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0203 	bic.w	r2, r2, #3
 80025be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d011      	beq.n	80025ec <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_SPI_IRQHandler+0x1c8>)
 80025ce:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fc51 	bl	8000e7c <HAL_DMA_Abort_IT>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d005      	beq.n	80025ec <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d016      	beq.n	8002622 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f8:	4a0c      	ldr	r2, [pc, #48]	; (800262c <HAL_SPI_IRQHandler+0x1c8>)
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fc3b 	bl	8000e7c <HAL_DMA_Abort_IT>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002610:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002618:	e003      	b.n	8002622 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f808 	bl	8002630 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002620:	e000      	b.n	8002624 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002622:	bf00      	nop
    return;
 8002624:	bf00      	nop
  }
}
 8002626:	3720      	adds	r7, #32
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	08002643 	.word	0x08002643

08002630 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f7ff ffe7 	bl	8002630 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e03f      	b.n	80026fc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7fe f933 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2224      	movs	r2, #36	; 0x24
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f904 	bl	80028bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691a      	ldr	r2, [r3, #16]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	; 0x28
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b20      	cmp	r3, #32
 8002722:	d17c      	bne.n	800281e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_UART_Transmit+0x2c>
 800272a:	88fb      	ldrh	r3, [r7, #6]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e075      	b.n	8002820 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_UART_Transmit+0x3e>
 800273e:	2302      	movs	r3, #2
 8002740:	e06e      	b.n	8002820 <HAL_UART_Transmit+0x11c>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2221      	movs	r2, #33	; 0x21
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002758:	f7fe fa02 	bl	8000b60 <HAL_GetTick>
 800275c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	88fa      	ldrh	r2, [r7, #6]
 8002762:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	88fa      	ldrh	r2, [r7, #6]
 8002768:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002772:	d108      	bne.n	8002786 <HAL_UART_Transmit+0x82>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d104      	bne.n	8002786 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800277c:	2300      	movs	r3, #0
 800277e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	e003      	b.n	800278e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002796:	e02a      	b.n	80027ee <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2200      	movs	r2, #0
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f840 	bl	8002828 <UART_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e036      	b.n	8002820 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10b      	bne.n	80027d0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027c6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	3302      	adds	r3, #2
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e007      	b.n	80027e0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3301      	adds	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1cf      	bne.n	8002798 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	2140      	movs	r1, #64	; 0x40
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f810 	bl	8002828 <UART_WaitOnFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e006      	b.n	8002820 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2220      	movs	r2, #32
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3720      	adds	r7, #32
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002838:	e02c      	b.n	8002894 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002840:	d028      	beq.n	8002894 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <UART_WaitOnFlagUntilTimeout+0x30>
 8002848:	f7fe f98a 	bl	8000b60 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	429a      	cmp	r2, r3
 8002856:	d21d      	bcs.n	8002894 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002866:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e00f      	b.n	80028b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4013      	ands	r3, r2
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d0c3      	beq.n	800283a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028f6:	f023 030c 	bic.w	r3, r3, #12
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	430b      	orrs	r3, r1
 8002902:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <UART_SetConfig+0x114>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d103      	bne.n	800292c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002924:	f7ff fce8 	bl	80022f8 <HAL_RCC_GetPCLK2Freq>
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	e002      	b.n	8002932 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800292c:	f7ff fcd0 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8002930:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	009a      	lsls	r2, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <UART_SetConfig+0x118>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	0119      	lsls	r1, r3, #4
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4613      	mov	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	009a      	lsls	r2, r3, #2
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fbb2 f2f3 	udiv	r2, r2, r3
 8002968:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <UART_SetConfig+0x118>)
 800296a:	fba3 0302 	umull	r0, r3, r3, r2
 800296e:	095b      	lsrs	r3, r3, #5
 8002970:	2064      	movs	r0, #100	; 0x64
 8002972:	fb00 f303 	mul.w	r3, r0, r3
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	3332      	adds	r3, #50	; 0x32
 800297c:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <UART_SetConfig+0x118>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002988:	4419      	add	r1, r3
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009a      	lsls	r2, r3, #2
 8002994:	441a      	add	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fbb2 f2f3 	udiv	r2, r2, r3
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <UART_SetConfig+0x118>)
 80029a2:	fba3 0302 	umull	r0, r3, r3, r2
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2064      	movs	r0, #100	; 0x64
 80029aa:	fb00 f303 	mul.w	r3, r0, r3
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	3332      	adds	r3, #50	; 0x32
 80029b4:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <UART_SetConfig+0x118>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	f003 020f 	and.w	r2, r3, #15
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	440a      	add	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029c8:	bf00      	nop
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40013800 	.word	0x40013800
 80029d4:	51eb851f 	.word	0x51eb851f

080029d8 <__errno>:
 80029d8:	4b01      	ldr	r3, [pc, #4]	; (80029e0 <__errno+0x8>)
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	2000000c 	.word	0x2000000c

080029e4 <__libc_init_array>:
 80029e4:	b570      	push	{r4, r5, r6, lr}
 80029e6:	2600      	movs	r6, #0
 80029e8:	4d0c      	ldr	r5, [pc, #48]	; (8002a1c <__libc_init_array+0x38>)
 80029ea:	4c0d      	ldr	r4, [pc, #52]	; (8002a20 <__libc_init_array+0x3c>)
 80029ec:	1b64      	subs	r4, r4, r5
 80029ee:	10a4      	asrs	r4, r4, #2
 80029f0:	42a6      	cmp	r6, r4
 80029f2:	d109      	bne.n	8002a08 <__libc_init_array+0x24>
 80029f4:	f000 fc5c 	bl	80032b0 <_init>
 80029f8:	2600      	movs	r6, #0
 80029fa:	4d0a      	ldr	r5, [pc, #40]	; (8002a24 <__libc_init_array+0x40>)
 80029fc:	4c0a      	ldr	r4, [pc, #40]	; (8002a28 <__libc_init_array+0x44>)
 80029fe:	1b64      	subs	r4, r4, r5
 8002a00:	10a4      	asrs	r4, r4, #2
 8002a02:	42a6      	cmp	r6, r4
 8002a04:	d105      	bne.n	8002a12 <__libc_init_array+0x2e>
 8002a06:	bd70      	pop	{r4, r5, r6, pc}
 8002a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a0c:	4798      	blx	r3
 8002a0e:	3601      	adds	r6, #1
 8002a10:	e7ee      	b.n	80029f0 <__libc_init_array+0xc>
 8002a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a16:	4798      	blx	r3
 8002a18:	3601      	adds	r6, #1
 8002a1a:	e7f2      	b.n	8002a02 <__libc_init_array+0x1e>
 8002a1c:	0800335c 	.word	0x0800335c
 8002a20:	0800335c 	.word	0x0800335c
 8002a24:	0800335c 	.word	0x0800335c
 8002a28:	08003360 	.word	0x08003360

08002a2c <memset>:
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4402      	add	r2, r0
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d100      	bne.n	8002a36 <memset+0xa>
 8002a34:	4770      	bx	lr
 8002a36:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3a:	e7f9      	b.n	8002a30 <memset+0x4>

08002a3c <_vsiprintf_r>:
 8002a3c:	b500      	push	{lr}
 8002a3e:	b09b      	sub	sp, #108	; 0x6c
 8002a40:	9100      	str	r1, [sp, #0]
 8002a42:	9104      	str	r1, [sp, #16]
 8002a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a48:	9105      	str	r1, [sp, #20]
 8002a4a:	9102      	str	r1, [sp, #8]
 8002a4c:	4905      	ldr	r1, [pc, #20]	; (8002a64 <_vsiprintf_r+0x28>)
 8002a4e:	9103      	str	r1, [sp, #12]
 8002a50:	4669      	mov	r1, sp
 8002a52:	f000 f86f 	bl	8002b34 <_svfiprintf_r>
 8002a56:	2200      	movs	r2, #0
 8002a58:	9b00      	ldr	r3, [sp, #0]
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	b01b      	add	sp, #108	; 0x6c
 8002a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a62:	bf00      	nop
 8002a64:	ffff0208 	.word	0xffff0208

08002a68 <vsiprintf>:
 8002a68:	4613      	mov	r3, r2
 8002a6a:	460a      	mov	r2, r1
 8002a6c:	4601      	mov	r1, r0
 8002a6e:	4802      	ldr	r0, [pc, #8]	; (8002a78 <vsiprintf+0x10>)
 8002a70:	6800      	ldr	r0, [r0, #0]
 8002a72:	f7ff bfe3 	b.w	8002a3c <_vsiprintf_r>
 8002a76:	bf00      	nop
 8002a78:	2000000c 	.word	0x2000000c

08002a7c <__ssputs_r>:
 8002a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a80:	688e      	ldr	r6, [r1, #8]
 8002a82:	4682      	mov	sl, r0
 8002a84:	429e      	cmp	r6, r3
 8002a86:	460c      	mov	r4, r1
 8002a88:	4690      	mov	r8, r2
 8002a8a:	461f      	mov	r7, r3
 8002a8c:	d838      	bhi.n	8002b00 <__ssputs_r+0x84>
 8002a8e:	898a      	ldrh	r2, [r1, #12]
 8002a90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a94:	d032      	beq.n	8002afc <__ssputs_r+0x80>
 8002a96:	6825      	ldr	r5, [r4, #0]
 8002a98:	6909      	ldr	r1, [r1, #16]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	eba5 0901 	sub.w	r9, r5, r1
 8002aa0:	6965      	ldr	r5, [r4, #20]
 8002aa2:	444b      	add	r3, r9
 8002aa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002aa8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002aac:	106d      	asrs	r5, r5, #1
 8002aae:	429d      	cmp	r5, r3
 8002ab0:	bf38      	it	cc
 8002ab2:	461d      	movcc	r5, r3
 8002ab4:	0553      	lsls	r3, r2, #21
 8002ab6:	d531      	bpl.n	8002b1c <__ssputs_r+0xa0>
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f000 fb53 	bl	8003164 <_malloc_r>
 8002abe:	4606      	mov	r6, r0
 8002ac0:	b950      	cbnz	r0, 8002ad8 <__ssputs_r+0x5c>
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f8ca 3000 	str.w	r3, [sl]
 8002acc:	89a3      	ldrh	r3, [r4, #12]
 8002ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ad2:	81a3      	strh	r3, [r4, #12]
 8002ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad8:	464a      	mov	r2, r9
 8002ada:	6921      	ldr	r1, [r4, #16]
 8002adc:	f000 face 	bl	800307c <memcpy>
 8002ae0:	89a3      	ldrh	r3, [r4, #12]
 8002ae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aea:	81a3      	strh	r3, [r4, #12]
 8002aec:	6126      	str	r6, [r4, #16]
 8002aee:	444e      	add	r6, r9
 8002af0:	6026      	str	r6, [r4, #0]
 8002af2:	463e      	mov	r6, r7
 8002af4:	6165      	str	r5, [r4, #20]
 8002af6:	eba5 0509 	sub.w	r5, r5, r9
 8002afa:	60a5      	str	r5, [r4, #8]
 8002afc:	42be      	cmp	r6, r7
 8002afe:	d900      	bls.n	8002b02 <__ssputs_r+0x86>
 8002b00:	463e      	mov	r6, r7
 8002b02:	4632      	mov	r2, r6
 8002b04:	4641      	mov	r1, r8
 8002b06:	6820      	ldr	r0, [r4, #0]
 8002b08:	f000 fac6 	bl	8003098 <memmove>
 8002b0c:	68a3      	ldr	r3, [r4, #8]
 8002b0e:	6822      	ldr	r2, [r4, #0]
 8002b10:	1b9b      	subs	r3, r3, r6
 8002b12:	4432      	add	r2, r6
 8002b14:	2000      	movs	r0, #0
 8002b16:	60a3      	str	r3, [r4, #8]
 8002b18:	6022      	str	r2, [r4, #0]
 8002b1a:	e7db      	b.n	8002ad4 <__ssputs_r+0x58>
 8002b1c:	462a      	mov	r2, r5
 8002b1e:	f000 fb7b 	bl	8003218 <_realloc_r>
 8002b22:	4606      	mov	r6, r0
 8002b24:	2800      	cmp	r0, #0
 8002b26:	d1e1      	bne.n	8002aec <__ssputs_r+0x70>
 8002b28:	4650      	mov	r0, sl
 8002b2a:	6921      	ldr	r1, [r4, #16]
 8002b2c:	f000 face 	bl	80030cc <_free_r>
 8002b30:	e7c7      	b.n	8002ac2 <__ssputs_r+0x46>
	...

08002b34 <_svfiprintf_r>:
 8002b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b38:	4698      	mov	r8, r3
 8002b3a:	898b      	ldrh	r3, [r1, #12]
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	460d      	mov	r5, r1
 8002b42:	4614      	mov	r4, r2
 8002b44:	b09d      	sub	sp, #116	; 0x74
 8002b46:	d50e      	bpl.n	8002b66 <_svfiprintf_r+0x32>
 8002b48:	690b      	ldr	r3, [r1, #16]
 8002b4a:	b963      	cbnz	r3, 8002b66 <_svfiprintf_r+0x32>
 8002b4c:	2140      	movs	r1, #64	; 0x40
 8002b4e:	f000 fb09 	bl	8003164 <_malloc_r>
 8002b52:	6028      	str	r0, [r5, #0]
 8002b54:	6128      	str	r0, [r5, #16]
 8002b56:	b920      	cbnz	r0, 8002b62 <_svfiprintf_r+0x2e>
 8002b58:	230c      	movs	r3, #12
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	e0d1      	b.n	8002d06 <_svfiprintf_r+0x1d2>
 8002b62:	2340      	movs	r3, #64	; 0x40
 8002b64:	616b      	str	r3, [r5, #20]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9309      	str	r3, [sp, #36]	; 0x24
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b70:	2330      	movs	r3, #48	; 0x30
 8002b72:	f04f 0901 	mov.w	r9, #1
 8002b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002d20 <_svfiprintf_r+0x1ec>
 8002b7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b82:	4623      	mov	r3, r4
 8002b84:	469a      	mov	sl, r3
 8002b86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b8a:	b10a      	cbz	r2, 8002b90 <_svfiprintf_r+0x5c>
 8002b8c:	2a25      	cmp	r2, #37	; 0x25
 8002b8e:	d1f9      	bne.n	8002b84 <_svfiprintf_r+0x50>
 8002b90:	ebba 0b04 	subs.w	fp, sl, r4
 8002b94:	d00b      	beq.n	8002bae <_svfiprintf_r+0x7a>
 8002b96:	465b      	mov	r3, fp
 8002b98:	4622      	mov	r2, r4
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	4638      	mov	r0, r7
 8002b9e:	f7ff ff6d 	bl	8002a7c <__ssputs_r>
 8002ba2:	3001      	adds	r0, #1
 8002ba4:	f000 80aa 	beq.w	8002cfc <_svfiprintf_r+0x1c8>
 8002ba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002baa:	445a      	add	r2, fp
 8002bac:	9209      	str	r2, [sp, #36]	; 0x24
 8002bae:	f89a 3000 	ldrb.w	r3, [sl]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80a2 	beq.w	8002cfc <_svfiprintf_r+0x1c8>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bc2:	f10a 0a01 	add.w	sl, sl, #1
 8002bc6:	9304      	str	r3, [sp, #16]
 8002bc8:	9307      	str	r3, [sp, #28]
 8002bca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bce:	931a      	str	r3, [sp, #104]	; 0x68
 8002bd0:	4654      	mov	r4, sl
 8002bd2:	2205      	movs	r2, #5
 8002bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bd8:	4851      	ldr	r0, [pc, #324]	; (8002d20 <_svfiprintf_r+0x1ec>)
 8002bda:	f000 fa41 	bl	8003060 <memchr>
 8002bde:	9a04      	ldr	r2, [sp, #16]
 8002be0:	b9d8      	cbnz	r0, 8002c1a <_svfiprintf_r+0xe6>
 8002be2:	06d0      	lsls	r0, r2, #27
 8002be4:	bf44      	itt	mi
 8002be6:	2320      	movmi	r3, #32
 8002be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bec:	0711      	lsls	r1, r2, #28
 8002bee:	bf44      	itt	mi
 8002bf0:	232b      	movmi	r3, #43	; 0x2b
 8002bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8002bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8002bfc:	d015      	beq.n	8002c2a <_svfiprintf_r+0xf6>
 8002bfe:	4654      	mov	r4, sl
 8002c00:	2000      	movs	r0, #0
 8002c02:	f04f 0c0a 	mov.w	ip, #10
 8002c06:	9a07      	ldr	r2, [sp, #28]
 8002c08:	4621      	mov	r1, r4
 8002c0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c0e:	3b30      	subs	r3, #48	; 0x30
 8002c10:	2b09      	cmp	r3, #9
 8002c12:	d94e      	bls.n	8002cb2 <_svfiprintf_r+0x17e>
 8002c14:	b1b0      	cbz	r0, 8002c44 <_svfiprintf_r+0x110>
 8002c16:	9207      	str	r2, [sp, #28]
 8002c18:	e014      	b.n	8002c44 <_svfiprintf_r+0x110>
 8002c1a:	eba0 0308 	sub.w	r3, r0, r8
 8002c1e:	fa09 f303 	lsl.w	r3, r9, r3
 8002c22:	4313      	orrs	r3, r2
 8002c24:	46a2      	mov	sl, r4
 8002c26:	9304      	str	r3, [sp, #16]
 8002c28:	e7d2      	b.n	8002bd0 <_svfiprintf_r+0x9c>
 8002c2a:	9b03      	ldr	r3, [sp, #12]
 8002c2c:	1d19      	adds	r1, r3, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	9103      	str	r1, [sp, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bfbb      	ittet	lt
 8002c36:	425b      	neglt	r3, r3
 8002c38:	f042 0202 	orrlt.w	r2, r2, #2
 8002c3c:	9307      	strge	r3, [sp, #28]
 8002c3e:	9307      	strlt	r3, [sp, #28]
 8002c40:	bfb8      	it	lt
 8002c42:	9204      	strlt	r2, [sp, #16]
 8002c44:	7823      	ldrb	r3, [r4, #0]
 8002c46:	2b2e      	cmp	r3, #46	; 0x2e
 8002c48:	d10c      	bne.n	8002c64 <_svfiprintf_r+0x130>
 8002c4a:	7863      	ldrb	r3, [r4, #1]
 8002c4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c4e:	d135      	bne.n	8002cbc <_svfiprintf_r+0x188>
 8002c50:	9b03      	ldr	r3, [sp, #12]
 8002c52:	3402      	adds	r4, #2
 8002c54:	1d1a      	adds	r2, r3, #4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	9203      	str	r2, [sp, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bfb8      	it	lt
 8002c5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c62:	9305      	str	r3, [sp, #20]
 8002c64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002d30 <_svfiprintf_r+0x1fc>
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4650      	mov	r0, sl
 8002c6c:	7821      	ldrb	r1, [r4, #0]
 8002c6e:	f000 f9f7 	bl	8003060 <memchr>
 8002c72:	b140      	cbz	r0, 8002c86 <_svfiprintf_r+0x152>
 8002c74:	2340      	movs	r3, #64	; 0x40
 8002c76:	eba0 000a 	sub.w	r0, r0, sl
 8002c7a:	fa03 f000 	lsl.w	r0, r3, r0
 8002c7e:	9b04      	ldr	r3, [sp, #16]
 8002c80:	3401      	adds	r4, #1
 8002c82:	4303      	orrs	r3, r0
 8002c84:	9304      	str	r3, [sp, #16]
 8002c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c8a:	2206      	movs	r2, #6
 8002c8c:	4825      	ldr	r0, [pc, #148]	; (8002d24 <_svfiprintf_r+0x1f0>)
 8002c8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c92:	f000 f9e5 	bl	8003060 <memchr>
 8002c96:	2800      	cmp	r0, #0
 8002c98:	d038      	beq.n	8002d0c <_svfiprintf_r+0x1d8>
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <_svfiprintf_r+0x1f4>)
 8002c9c:	bb1b      	cbnz	r3, 8002ce6 <_svfiprintf_r+0x1b2>
 8002c9e:	9b03      	ldr	r3, [sp, #12]
 8002ca0:	3307      	adds	r3, #7
 8002ca2:	f023 0307 	bic.w	r3, r3, #7
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	9303      	str	r3, [sp, #12]
 8002caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cac:	4433      	add	r3, r6
 8002cae:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb0:	e767      	b.n	8002b82 <_svfiprintf_r+0x4e>
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	2001      	movs	r0, #1
 8002cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cba:	e7a5      	b.n	8002c08 <_svfiprintf_r+0xd4>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f04f 0c0a 	mov.w	ip, #10
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	3401      	adds	r4, #1
 8002cc6:	9305      	str	r3, [sp, #20]
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cce:	3a30      	subs	r2, #48	; 0x30
 8002cd0:	2a09      	cmp	r2, #9
 8002cd2:	d903      	bls.n	8002cdc <_svfiprintf_r+0x1a8>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0c5      	beq.n	8002c64 <_svfiprintf_r+0x130>
 8002cd8:	9105      	str	r1, [sp, #20]
 8002cda:	e7c3      	b.n	8002c64 <_svfiprintf_r+0x130>
 8002cdc:	4604      	mov	r4, r0
 8002cde:	2301      	movs	r3, #1
 8002ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ce4:	e7f0      	b.n	8002cc8 <_svfiprintf_r+0x194>
 8002ce6:	ab03      	add	r3, sp, #12
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	462a      	mov	r2, r5
 8002cec:	4638      	mov	r0, r7
 8002cee:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <_svfiprintf_r+0x1f8>)
 8002cf0:	a904      	add	r1, sp, #16
 8002cf2:	f3af 8000 	nop.w
 8002cf6:	1c42      	adds	r2, r0, #1
 8002cf8:	4606      	mov	r6, r0
 8002cfa:	d1d6      	bne.n	8002caa <_svfiprintf_r+0x176>
 8002cfc:	89ab      	ldrh	r3, [r5, #12]
 8002cfe:	065b      	lsls	r3, r3, #25
 8002d00:	f53f af2c 	bmi.w	8002b5c <_svfiprintf_r+0x28>
 8002d04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d06:	b01d      	add	sp, #116	; 0x74
 8002d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0c:	ab03      	add	r3, sp, #12
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	462a      	mov	r2, r5
 8002d12:	4638      	mov	r0, r7
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <_svfiprintf_r+0x1f8>)
 8002d16:	a904      	add	r1, sp, #16
 8002d18:	f000 f87c 	bl	8002e14 <_printf_i>
 8002d1c:	e7eb      	b.n	8002cf6 <_svfiprintf_r+0x1c2>
 8002d1e:	bf00      	nop
 8002d20:	08003328 	.word	0x08003328
 8002d24:	08003332 	.word	0x08003332
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	08002a7d 	.word	0x08002a7d
 8002d30:	0800332e 	.word	0x0800332e

08002d34 <_printf_common>:
 8002d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d38:	4616      	mov	r6, r2
 8002d3a:	4699      	mov	r9, r3
 8002d3c:	688a      	ldr	r2, [r1, #8]
 8002d3e:	690b      	ldr	r3, [r1, #16]
 8002d40:	4607      	mov	r7, r0
 8002d42:	4293      	cmp	r3, r2
 8002d44:	bfb8      	it	lt
 8002d46:	4613      	movlt	r3, r2
 8002d48:	6033      	str	r3, [r6, #0]
 8002d4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d4e:	460c      	mov	r4, r1
 8002d50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d54:	b10a      	cbz	r2, 8002d5a <_printf_common+0x26>
 8002d56:	3301      	adds	r3, #1
 8002d58:	6033      	str	r3, [r6, #0]
 8002d5a:	6823      	ldr	r3, [r4, #0]
 8002d5c:	0699      	lsls	r1, r3, #26
 8002d5e:	bf42      	ittt	mi
 8002d60:	6833      	ldrmi	r3, [r6, #0]
 8002d62:	3302      	addmi	r3, #2
 8002d64:	6033      	strmi	r3, [r6, #0]
 8002d66:	6825      	ldr	r5, [r4, #0]
 8002d68:	f015 0506 	ands.w	r5, r5, #6
 8002d6c:	d106      	bne.n	8002d7c <_printf_common+0x48>
 8002d6e:	f104 0a19 	add.w	sl, r4, #25
 8002d72:	68e3      	ldr	r3, [r4, #12]
 8002d74:	6832      	ldr	r2, [r6, #0]
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	42ab      	cmp	r3, r5
 8002d7a:	dc28      	bgt.n	8002dce <_printf_common+0x9a>
 8002d7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d80:	1e13      	subs	r3, r2, #0
 8002d82:	6822      	ldr	r2, [r4, #0]
 8002d84:	bf18      	it	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	0692      	lsls	r2, r2, #26
 8002d8a:	d42d      	bmi.n	8002de8 <_printf_common+0xb4>
 8002d8c:	4649      	mov	r1, r9
 8002d8e:	4638      	mov	r0, r7
 8002d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d94:	47c0      	blx	r8
 8002d96:	3001      	adds	r0, #1
 8002d98:	d020      	beq.n	8002ddc <_printf_common+0xa8>
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	68e5      	ldr	r5, [r4, #12]
 8002d9e:	f003 0306 	and.w	r3, r3, #6
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	bf18      	it	ne
 8002da6:	2500      	movne	r5, #0
 8002da8:	6832      	ldr	r2, [r6, #0]
 8002daa:	f04f 0600 	mov.w	r6, #0
 8002dae:	68a3      	ldr	r3, [r4, #8]
 8002db0:	bf08      	it	eq
 8002db2:	1aad      	subeq	r5, r5, r2
 8002db4:	6922      	ldr	r2, [r4, #16]
 8002db6:	bf08      	it	eq
 8002db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	bfc4      	itt	gt
 8002dc0:	1a9b      	subgt	r3, r3, r2
 8002dc2:	18ed      	addgt	r5, r5, r3
 8002dc4:	341a      	adds	r4, #26
 8002dc6:	42b5      	cmp	r5, r6
 8002dc8:	d11a      	bne.n	8002e00 <_printf_common+0xcc>
 8002dca:	2000      	movs	r0, #0
 8002dcc:	e008      	b.n	8002de0 <_printf_common+0xac>
 8002dce:	2301      	movs	r3, #1
 8002dd0:	4652      	mov	r2, sl
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	4638      	mov	r0, r7
 8002dd6:	47c0      	blx	r8
 8002dd8:	3001      	adds	r0, #1
 8002dda:	d103      	bne.n	8002de4 <_printf_common+0xb0>
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002de4:	3501      	adds	r5, #1
 8002de6:	e7c4      	b.n	8002d72 <_printf_common+0x3e>
 8002de8:	2030      	movs	r0, #48	; 0x30
 8002dea:	18e1      	adds	r1, r4, r3
 8002dec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002df6:	4422      	add	r2, r4
 8002df8:	3302      	adds	r3, #2
 8002dfa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dfe:	e7c5      	b.n	8002d8c <_printf_common+0x58>
 8002e00:	2301      	movs	r3, #1
 8002e02:	4622      	mov	r2, r4
 8002e04:	4649      	mov	r1, r9
 8002e06:	4638      	mov	r0, r7
 8002e08:	47c0      	blx	r8
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	d0e6      	beq.n	8002ddc <_printf_common+0xa8>
 8002e0e:	3601      	adds	r6, #1
 8002e10:	e7d9      	b.n	8002dc6 <_printf_common+0x92>
	...

08002e14 <_printf_i>:
 8002e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e18:	460c      	mov	r4, r1
 8002e1a:	7e27      	ldrb	r7, [r4, #24]
 8002e1c:	4691      	mov	r9, r2
 8002e1e:	2f78      	cmp	r7, #120	; 0x78
 8002e20:	4680      	mov	r8, r0
 8002e22:	469a      	mov	sl, r3
 8002e24:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e2a:	d807      	bhi.n	8002e3c <_printf_i+0x28>
 8002e2c:	2f62      	cmp	r7, #98	; 0x62
 8002e2e:	d80a      	bhi.n	8002e46 <_printf_i+0x32>
 8002e30:	2f00      	cmp	r7, #0
 8002e32:	f000 80d9 	beq.w	8002fe8 <_printf_i+0x1d4>
 8002e36:	2f58      	cmp	r7, #88	; 0x58
 8002e38:	f000 80a4 	beq.w	8002f84 <_printf_i+0x170>
 8002e3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e44:	e03a      	b.n	8002ebc <_printf_i+0xa8>
 8002e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e4a:	2b15      	cmp	r3, #21
 8002e4c:	d8f6      	bhi.n	8002e3c <_printf_i+0x28>
 8002e4e:	a001      	add	r0, pc, #4	; (adr r0, 8002e54 <_printf_i+0x40>)
 8002e50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002e54:	08002ead 	.word	0x08002ead
 8002e58:	08002ec1 	.word	0x08002ec1
 8002e5c:	08002e3d 	.word	0x08002e3d
 8002e60:	08002e3d 	.word	0x08002e3d
 8002e64:	08002e3d 	.word	0x08002e3d
 8002e68:	08002e3d 	.word	0x08002e3d
 8002e6c:	08002ec1 	.word	0x08002ec1
 8002e70:	08002e3d 	.word	0x08002e3d
 8002e74:	08002e3d 	.word	0x08002e3d
 8002e78:	08002e3d 	.word	0x08002e3d
 8002e7c:	08002e3d 	.word	0x08002e3d
 8002e80:	08002fcf 	.word	0x08002fcf
 8002e84:	08002ef1 	.word	0x08002ef1
 8002e88:	08002fb1 	.word	0x08002fb1
 8002e8c:	08002e3d 	.word	0x08002e3d
 8002e90:	08002e3d 	.word	0x08002e3d
 8002e94:	08002ff1 	.word	0x08002ff1
 8002e98:	08002e3d 	.word	0x08002e3d
 8002e9c:	08002ef1 	.word	0x08002ef1
 8002ea0:	08002e3d 	.word	0x08002e3d
 8002ea4:	08002e3d 	.word	0x08002e3d
 8002ea8:	08002fb9 	.word	0x08002fb9
 8002eac:	680b      	ldr	r3, [r1, #0]
 8002eae:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002eb2:	1d1a      	adds	r2, r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	600a      	str	r2, [r1, #0]
 8002eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0a4      	b.n	800300a <_printf_i+0x1f6>
 8002ec0:	6825      	ldr	r5, [r4, #0]
 8002ec2:	6808      	ldr	r0, [r1, #0]
 8002ec4:	062e      	lsls	r6, r5, #24
 8002ec6:	f100 0304 	add.w	r3, r0, #4
 8002eca:	d50a      	bpl.n	8002ee2 <_printf_i+0xce>
 8002ecc:	6805      	ldr	r5, [r0, #0]
 8002ece:	600b      	str	r3, [r1, #0]
 8002ed0:	2d00      	cmp	r5, #0
 8002ed2:	da03      	bge.n	8002edc <_printf_i+0xc8>
 8002ed4:	232d      	movs	r3, #45	; 0x2d
 8002ed6:	426d      	negs	r5, r5
 8002ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002edc:	230a      	movs	r3, #10
 8002ede:	485e      	ldr	r0, [pc, #376]	; (8003058 <_printf_i+0x244>)
 8002ee0:	e019      	b.n	8002f16 <_printf_i+0x102>
 8002ee2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002ee6:	6805      	ldr	r5, [r0, #0]
 8002ee8:	600b      	str	r3, [r1, #0]
 8002eea:	bf18      	it	ne
 8002eec:	b22d      	sxthne	r5, r5
 8002eee:	e7ef      	b.n	8002ed0 <_printf_i+0xbc>
 8002ef0:	680b      	ldr	r3, [r1, #0]
 8002ef2:	6825      	ldr	r5, [r4, #0]
 8002ef4:	1d18      	adds	r0, r3, #4
 8002ef6:	6008      	str	r0, [r1, #0]
 8002ef8:	0628      	lsls	r0, r5, #24
 8002efa:	d501      	bpl.n	8002f00 <_printf_i+0xec>
 8002efc:	681d      	ldr	r5, [r3, #0]
 8002efe:	e002      	b.n	8002f06 <_printf_i+0xf2>
 8002f00:	0669      	lsls	r1, r5, #25
 8002f02:	d5fb      	bpl.n	8002efc <_printf_i+0xe8>
 8002f04:	881d      	ldrh	r5, [r3, #0]
 8002f06:	2f6f      	cmp	r7, #111	; 0x6f
 8002f08:	bf0c      	ite	eq
 8002f0a:	2308      	moveq	r3, #8
 8002f0c:	230a      	movne	r3, #10
 8002f0e:	4852      	ldr	r0, [pc, #328]	; (8003058 <_printf_i+0x244>)
 8002f10:	2100      	movs	r1, #0
 8002f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f16:	6866      	ldr	r6, [r4, #4]
 8002f18:	2e00      	cmp	r6, #0
 8002f1a:	bfa8      	it	ge
 8002f1c:	6821      	ldrge	r1, [r4, #0]
 8002f1e:	60a6      	str	r6, [r4, #8]
 8002f20:	bfa4      	itt	ge
 8002f22:	f021 0104 	bicge.w	r1, r1, #4
 8002f26:	6021      	strge	r1, [r4, #0]
 8002f28:	b90d      	cbnz	r5, 8002f2e <_printf_i+0x11a>
 8002f2a:	2e00      	cmp	r6, #0
 8002f2c:	d04d      	beq.n	8002fca <_printf_i+0x1b6>
 8002f2e:	4616      	mov	r6, r2
 8002f30:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f34:	fb03 5711 	mls	r7, r3, r1, r5
 8002f38:	5dc7      	ldrb	r7, [r0, r7]
 8002f3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f3e:	462f      	mov	r7, r5
 8002f40:	42bb      	cmp	r3, r7
 8002f42:	460d      	mov	r5, r1
 8002f44:	d9f4      	bls.n	8002f30 <_printf_i+0x11c>
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d10b      	bne.n	8002f62 <_printf_i+0x14e>
 8002f4a:	6823      	ldr	r3, [r4, #0]
 8002f4c:	07df      	lsls	r7, r3, #31
 8002f4e:	d508      	bpl.n	8002f62 <_printf_i+0x14e>
 8002f50:	6923      	ldr	r3, [r4, #16]
 8002f52:	6861      	ldr	r1, [r4, #4]
 8002f54:	4299      	cmp	r1, r3
 8002f56:	bfde      	ittt	le
 8002f58:	2330      	movle	r3, #48	; 0x30
 8002f5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f62:	1b92      	subs	r2, r2, r6
 8002f64:	6122      	str	r2, [r4, #16]
 8002f66:	464b      	mov	r3, r9
 8002f68:	4621      	mov	r1, r4
 8002f6a:	4640      	mov	r0, r8
 8002f6c:	f8cd a000 	str.w	sl, [sp]
 8002f70:	aa03      	add	r2, sp, #12
 8002f72:	f7ff fedf 	bl	8002d34 <_printf_common>
 8002f76:	3001      	adds	r0, #1
 8002f78:	d14c      	bne.n	8003014 <_printf_i+0x200>
 8002f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7e:	b004      	add	sp, #16
 8002f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f84:	4834      	ldr	r0, [pc, #208]	; (8003058 <_printf_i+0x244>)
 8002f86:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f8a:	680e      	ldr	r6, [r1, #0]
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002f92:	061f      	lsls	r7, r3, #24
 8002f94:	600e      	str	r6, [r1, #0]
 8002f96:	d514      	bpl.n	8002fc2 <_printf_i+0x1ae>
 8002f98:	07d9      	lsls	r1, r3, #31
 8002f9a:	bf44      	itt	mi
 8002f9c:	f043 0320 	orrmi.w	r3, r3, #32
 8002fa0:	6023      	strmi	r3, [r4, #0]
 8002fa2:	b91d      	cbnz	r5, 8002fac <_printf_i+0x198>
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	f023 0320 	bic.w	r3, r3, #32
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	2310      	movs	r3, #16
 8002fae:	e7af      	b.n	8002f10 <_printf_i+0xfc>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	f043 0320 	orr.w	r3, r3, #32
 8002fb6:	6023      	str	r3, [r4, #0]
 8002fb8:	2378      	movs	r3, #120	; 0x78
 8002fba:	4828      	ldr	r0, [pc, #160]	; (800305c <_printf_i+0x248>)
 8002fbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fc0:	e7e3      	b.n	8002f8a <_printf_i+0x176>
 8002fc2:	065e      	lsls	r6, r3, #25
 8002fc4:	bf48      	it	mi
 8002fc6:	b2ad      	uxthmi	r5, r5
 8002fc8:	e7e6      	b.n	8002f98 <_printf_i+0x184>
 8002fca:	4616      	mov	r6, r2
 8002fcc:	e7bb      	b.n	8002f46 <_printf_i+0x132>
 8002fce:	680b      	ldr	r3, [r1, #0]
 8002fd0:	6826      	ldr	r6, [r4, #0]
 8002fd2:	1d1d      	adds	r5, r3, #4
 8002fd4:	6960      	ldr	r0, [r4, #20]
 8002fd6:	600d      	str	r5, [r1, #0]
 8002fd8:	0635      	lsls	r5, r6, #24
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	d501      	bpl.n	8002fe2 <_printf_i+0x1ce>
 8002fde:	6018      	str	r0, [r3, #0]
 8002fe0:	e002      	b.n	8002fe8 <_printf_i+0x1d4>
 8002fe2:	0671      	lsls	r1, r6, #25
 8002fe4:	d5fb      	bpl.n	8002fde <_printf_i+0x1ca>
 8002fe6:	8018      	strh	r0, [r3, #0]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	4616      	mov	r6, r2
 8002fec:	6123      	str	r3, [r4, #16]
 8002fee:	e7ba      	b.n	8002f66 <_printf_i+0x152>
 8002ff0:	680b      	ldr	r3, [r1, #0]
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	600a      	str	r2, [r1, #0]
 8002ff6:	681e      	ldr	r6, [r3, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	6862      	ldr	r2, [r4, #4]
 8002ffe:	f000 f82f 	bl	8003060 <memchr>
 8003002:	b108      	cbz	r0, 8003008 <_printf_i+0x1f4>
 8003004:	1b80      	subs	r0, r0, r6
 8003006:	6060      	str	r0, [r4, #4]
 8003008:	6863      	ldr	r3, [r4, #4]
 800300a:	6123      	str	r3, [r4, #16]
 800300c:	2300      	movs	r3, #0
 800300e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003012:	e7a8      	b.n	8002f66 <_printf_i+0x152>
 8003014:	4632      	mov	r2, r6
 8003016:	4649      	mov	r1, r9
 8003018:	4640      	mov	r0, r8
 800301a:	6923      	ldr	r3, [r4, #16]
 800301c:	47d0      	blx	sl
 800301e:	3001      	adds	r0, #1
 8003020:	d0ab      	beq.n	8002f7a <_printf_i+0x166>
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	079b      	lsls	r3, r3, #30
 8003026:	d413      	bmi.n	8003050 <_printf_i+0x23c>
 8003028:	68e0      	ldr	r0, [r4, #12]
 800302a:	9b03      	ldr	r3, [sp, #12]
 800302c:	4298      	cmp	r0, r3
 800302e:	bfb8      	it	lt
 8003030:	4618      	movlt	r0, r3
 8003032:	e7a4      	b.n	8002f7e <_printf_i+0x16a>
 8003034:	2301      	movs	r3, #1
 8003036:	4632      	mov	r2, r6
 8003038:	4649      	mov	r1, r9
 800303a:	4640      	mov	r0, r8
 800303c:	47d0      	blx	sl
 800303e:	3001      	adds	r0, #1
 8003040:	d09b      	beq.n	8002f7a <_printf_i+0x166>
 8003042:	3501      	adds	r5, #1
 8003044:	68e3      	ldr	r3, [r4, #12]
 8003046:	9903      	ldr	r1, [sp, #12]
 8003048:	1a5b      	subs	r3, r3, r1
 800304a:	42ab      	cmp	r3, r5
 800304c:	dcf2      	bgt.n	8003034 <_printf_i+0x220>
 800304e:	e7eb      	b.n	8003028 <_printf_i+0x214>
 8003050:	2500      	movs	r5, #0
 8003052:	f104 0619 	add.w	r6, r4, #25
 8003056:	e7f5      	b.n	8003044 <_printf_i+0x230>
 8003058:	08003339 	.word	0x08003339
 800305c:	0800334a 	.word	0x0800334a

08003060 <memchr>:
 8003060:	4603      	mov	r3, r0
 8003062:	b510      	push	{r4, lr}
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	4402      	add	r2, r0
 8003068:	4293      	cmp	r3, r2
 800306a:	4618      	mov	r0, r3
 800306c:	d101      	bne.n	8003072 <memchr+0x12>
 800306e:	2000      	movs	r0, #0
 8003070:	e003      	b.n	800307a <memchr+0x1a>
 8003072:	7804      	ldrb	r4, [r0, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	428c      	cmp	r4, r1
 8003078:	d1f6      	bne.n	8003068 <memchr+0x8>
 800307a:	bd10      	pop	{r4, pc}

0800307c <memcpy>:
 800307c:	440a      	add	r2, r1
 800307e:	4291      	cmp	r1, r2
 8003080:	f100 33ff 	add.w	r3, r0, #4294967295
 8003084:	d100      	bne.n	8003088 <memcpy+0xc>
 8003086:	4770      	bx	lr
 8003088:	b510      	push	{r4, lr}
 800308a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800308e:	4291      	cmp	r1, r2
 8003090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003094:	d1f9      	bne.n	800308a <memcpy+0xe>
 8003096:	bd10      	pop	{r4, pc}

08003098 <memmove>:
 8003098:	4288      	cmp	r0, r1
 800309a:	b510      	push	{r4, lr}
 800309c:	eb01 0402 	add.w	r4, r1, r2
 80030a0:	d902      	bls.n	80030a8 <memmove+0x10>
 80030a2:	4284      	cmp	r4, r0
 80030a4:	4623      	mov	r3, r4
 80030a6:	d807      	bhi.n	80030b8 <memmove+0x20>
 80030a8:	1e43      	subs	r3, r0, #1
 80030aa:	42a1      	cmp	r1, r4
 80030ac:	d008      	beq.n	80030c0 <memmove+0x28>
 80030ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80030b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80030b6:	e7f8      	b.n	80030aa <memmove+0x12>
 80030b8:	4601      	mov	r1, r0
 80030ba:	4402      	add	r2, r0
 80030bc:	428a      	cmp	r2, r1
 80030be:	d100      	bne.n	80030c2 <memmove+0x2a>
 80030c0:	bd10      	pop	{r4, pc}
 80030c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80030ca:	e7f7      	b.n	80030bc <memmove+0x24>

080030cc <_free_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4605      	mov	r5, r0
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d043      	beq.n	800315c <_free_r+0x90>
 80030d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d8:	1f0c      	subs	r4, r1, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bfb8      	it	lt
 80030de:	18e4      	addlt	r4, r4, r3
 80030e0:	f000 f8d0 	bl	8003284 <__malloc_lock>
 80030e4:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <_free_r+0x94>)
 80030e6:	6813      	ldr	r3, [r2, #0]
 80030e8:	4610      	mov	r0, r2
 80030ea:	b933      	cbnz	r3, 80030fa <_free_r+0x2e>
 80030ec:	6063      	str	r3, [r4, #4]
 80030ee:	6014      	str	r4, [r2, #0]
 80030f0:	4628      	mov	r0, r5
 80030f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030f6:	f000 b8cb 	b.w	8003290 <__malloc_unlock>
 80030fa:	42a3      	cmp	r3, r4
 80030fc:	d90a      	bls.n	8003114 <_free_r+0x48>
 80030fe:	6821      	ldr	r1, [r4, #0]
 8003100:	1862      	adds	r2, r4, r1
 8003102:	4293      	cmp	r3, r2
 8003104:	bf01      	itttt	eq
 8003106:	681a      	ldreq	r2, [r3, #0]
 8003108:	685b      	ldreq	r3, [r3, #4]
 800310a:	1852      	addeq	r2, r2, r1
 800310c:	6022      	streq	r2, [r4, #0]
 800310e:	6063      	str	r3, [r4, #4]
 8003110:	6004      	str	r4, [r0, #0]
 8003112:	e7ed      	b.n	80030f0 <_free_r+0x24>
 8003114:	461a      	mov	r2, r3
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	b10b      	cbz	r3, 800311e <_free_r+0x52>
 800311a:	42a3      	cmp	r3, r4
 800311c:	d9fa      	bls.n	8003114 <_free_r+0x48>
 800311e:	6811      	ldr	r1, [r2, #0]
 8003120:	1850      	adds	r0, r2, r1
 8003122:	42a0      	cmp	r0, r4
 8003124:	d10b      	bne.n	800313e <_free_r+0x72>
 8003126:	6820      	ldr	r0, [r4, #0]
 8003128:	4401      	add	r1, r0
 800312a:	1850      	adds	r0, r2, r1
 800312c:	4283      	cmp	r3, r0
 800312e:	6011      	str	r1, [r2, #0]
 8003130:	d1de      	bne.n	80030f0 <_free_r+0x24>
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4401      	add	r1, r0
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	6053      	str	r3, [r2, #4]
 800313c:	e7d8      	b.n	80030f0 <_free_r+0x24>
 800313e:	d902      	bls.n	8003146 <_free_r+0x7a>
 8003140:	230c      	movs	r3, #12
 8003142:	602b      	str	r3, [r5, #0]
 8003144:	e7d4      	b.n	80030f0 <_free_r+0x24>
 8003146:	6820      	ldr	r0, [r4, #0]
 8003148:	1821      	adds	r1, r4, r0
 800314a:	428b      	cmp	r3, r1
 800314c:	bf01      	itttt	eq
 800314e:	6819      	ldreq	r1, [r3, #0]
 8003150:	685b      	ldreq	r3, [r3, #4]
 8003152:	1809      	addeq	r1, r1, r0
 8003154:	6021      	streq	r1, [r4, #0]
 8003156:	6063      	str	r3, [r4, #4]
 8003158:	6054      	str	r4, [r2, #4]
 800315a:	e7c9      	b.n	80030f0 <_free_r+0x24>
 800315c:	bd38      	pop	{r3, r4, r5, pc}
 800315e:	bf00      	nop
 8003160:	20000090 	.word	0x20000090

08003164 <_malloc_r>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	1ccd      	adds	r5, r1, #3
 8003168:	f025 0503 	bic.w	r5, r5, #3
 800316c:	3508      	adds	r5, #8
 800316e:	2d0c      	cmp	r5, #12
 8003170:	bf38      	it	cc
 8003172:	250c      	movcc	r5, #12
 8003174:	2d00      	cmp	r5, #0
 8003176:	4606      	mov	r6, r0
 8003178:	db01      	blt.n	800317e <_malloc_r+0x1a>
 800317a:	42a9      	cmp	r1, r5
 800317c:	d903      	bls.n	8003186 <_malloc_r+0x22>
 800317e:	230c      	movs	r3, #12
 8003180:	6033      	str	r3, [r6, #0]
 8003182:	2000      	movs	r0, #0
 8003184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003186:	f000 f87d 	bl	8003284 <__malloc_lock>
 800318a:	4921      	ldr	r1, [pc, #132]	; (8003210 <_malloc_r+0xac>)
 800318c:	680a      	ldr	r2, [r1, #0]
 800318e:	4614      	mov	r4, r2
 8003190:	b99c      	cbnz	r4, 80031ba <_malloc_r+0x56>
 8003192:	4f20      	ldr	r7, [pc, #128]	; (8003214 <_malloc_r+0xb0>)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b923      	cbnz	r3, 80031a2 <_malloc_r+0x3e>
 8003198:	4621      	mov	r1, r4
 800319a:	4630      	mov	r0, r6
 800319c:	f000 f862 	bl	8003264 <_sbrk_r>
 80031a0:	6038      	str	r0, [r7, #0]
 80031a2:	4629      	mov	r1, r5
 80031a4:	4630      	mov	r0, r6
 80031a6:	f000 f85d 	bl	8003264 <_sbrk_r>
 80031aa:	1c43      	adds	r3, r0, #1
 80031ac:	d123      	bne.n	80031f6 <_malloc_r+0x92>
 80031ae:	230c      	movs	r3, #12
 80031b0:	4630      	mov	r0, r6
 80031b2:	6033      	str	r3, [r6, #0]
 80031b4:	f000 f86c 	bl	8003290 <__malloc_unlock>
 80031b8:	e7e3      	b.n	8003182 <_malloc_r+0x1e>
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	1b5b      	subs	r3, r3, r5
 80031be:	d417      	bmi.n	80031f0 <_malloc_r+0x8c>
 80031c0:	2b0b      	cmp	r3, #11
 80031c2:	d903      	bls.n	80031cc <_malloc_r+0x68>
 80031c4:	6023      	str	r3, [r4, #0]
 80031c6:	441c      	add	r4, r3
 80031c8:	6025      	str	r5, [r4, #0]
 80031ca:	e004      	b.n	80031d6 <_malloc_r+0x72>
 80031cc:	6863      	ldr	r3, [r4, #4]
 80031ce:	42a2      	cmp	r2, r4
 80031d0:	bf0c      	ite	eq
 80031d2:	600b      	streq	r3, [r1, #0]
 80031d4:	6053      	strne	r3, [r2, #4]
 80031d6:	4630      	mov	r0, r6
 80031d8:	f000 f85a 	bl	8003290 <__malloc_unlock>
 80031dc:	f104 000b 	add.w	r0, r4, #11
 80031e0:	1d23      	adds	r3, r4, #4
 80031e2:	f020 0007 	bic.w	r0, r0, #7
 80031e6:	1ac2      	subs	r2, r0, r3
 80031e8:	d0cc      	beq.n	8003184 <_malloc_r+0x20>
 80031ea:	1a1b      	subs	r3, r3, r0
 80031ec:	50a3      	str	r3, [r4, r2]
 80031ee:	e7c9      	b.n	8003184 <_malloc_r+0x20>
 80031f0:	4622      	mov	r2, r4
 80031f2:	6864      	ldr	r4, [r4, #4]
 80031f4:	e7cc      	b.n	8003190 <_malloc_r+0x2c>
 80031f6:	1cc4      	adds	r4, r0, #3
 80031f8:	f024 0403 	bic.w	r4, r4, #3
 80031fc:	42a0      	cmp	r0, r4
 80031fe:	d0e3      	beq.n	80031c8 <_malloc_r+0x64>
 8003200:	1a21      	subs	r1, r4, r0
 8003202:	4630      	mov	r0, r6
 8003204:	f000 f82e 	bl	8003264 <_sbrk_r>
 8003208:	3001      	adds	r0, #1
 800320a:	d1dd      	bne.n	80031c8 <_malloc_r+0x64>
 800320c:	e7cf      	b.n	80031ae <_malloc_r+0x4a>
 800320e:	bf00      	nop
 8003210:	20000090 	.word	0x20000090
 8003214:	20000094 	.word	0x20000094

08003218 <_realloc_r>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	4607      	mov	r7, r0
 800321c:	4614      	mov	r4, r2
 800321e:	460e      	mov	r6, r1
 8003220:	b921      	cbnz	r1, 800322c <_realloc_r+0x14>
 8003222:	4611      	mov	r1, r2
 8003224:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003228:	f7ff bf9c 	b.w	8003164 <_malloc_r>
 800322c:	b922      	cbnz	r2, 8003238 <_realloc_r+0x20>
 800322e:	f7ff ff4d 	bl	80030cc <_free_r>
 8003232:	4625      	mov	r5, r4
 8003234:	4628      	mov	r0, r5
 8003236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003238:	f000 f830 	bl	800329c <_malloc_usable_size_r>
 800323c:	42a0      	cmp	r0, r4
 800323e:	d20f      	bcs.n	8003260 <_realloc_r+0x48>
 8003240:	4621      	mov	r1, r4
 8003242:	4638      	mov	r0, r7
 8003244:	f7ff ff8e 	bl	8003164 <_malloc_r>
 8003248:	4605      	mov	r5, r0
 800324a:	2800      	cmp	r0, #0
 800324c:	d0f2      	beq.n	8003234 <_realloc_r+0x1c>
 800324e:	4631      	mov	r1, r6
 8003250:	4622      	mov	r2, r4
 8003252:	f7ff ff13 	bl	800307c <memcpy>
 8003256:	4631      	mov	r1, r6
 8003258:	4638      	mov	r0, r7
 800325a:	f7ff ff37 	bl	80030cc <_free_r>
 800325e:	e7e9      	b.n	8003234 <_realloc_r+0x1c>
 8003260:	4635      	mov	r5, r6
 8003262:	e7e7      	b.n	8003234 <_realloc_r+0x1c>

08003264 <_sbrk_r>:
 8003264:	b538      	push	{r3, r4, r5, lr}
 8003266:	2300      	movs	r3, #0
 8003268:	4d05      	ldr	r5, [pc, #20]	; (8003280 <_sbrk_r+0x1c>)
 800326a:	4604      	mov	r4, r0
 800326c:	4608      	mov	r0, r1
 800326e:	602b      	str	r3, [r5, #0]
 8003270:	f7fd fade 	bl	8000830 <_sbrk>
 8003274:	1c43      	adds	r3, r0, #1
 8003276:	d102      	bne.n	800327e <_sbrk_r+0x1a>
 8003278:	682b      	ldr	r3, [r5, #0]
 800327a:	b103      	cbz	r3, 800327e <_sbrk_r+0x1a>
 800327c:	6023      	str	r3, [r4, #0]
 800327e:	bd38      	pop	{r3, r4, r5, pc}
 8003280:	20000258 	.word	0x20000258

08003284 <__malloc_lock>:
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <__malloc_lock+0x8>)
 8003286:	f000 b811 	b.w	80032ac <__retarget_lock_acquire_recursive>
 800328a:	bf00      	nop
 800328c:	20000260 	.word	0x20000260

08003290 <__malloc_unlock>:
 8003290:	4801      	ldr	r0, [pc, #4]	; (8003298 <__malloc_unlock+0x8>)
 8003292:	f000 b80c 	b.w	80032ae <__retarget_lock_release_recursive>
 8003296:	bf00      	nop
 8003298:	20000260 	.word	0x20000260

0800329c <_malloc_usable_size_r>:
 800329c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032a0:	1f18      	subs	r0, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bfbc      	itt	lt
 80032a6:	580b      	ldrlt	r3, [r1, r0]
 80032a8:	18c0      	addlt	r0, r0, r3
 80032aa:	4770      	bx	lr

080032ac <__retarget_lock_acquire_recursive>:
 80032ac:	4770      	bx	lr

080032ae <__retarget_lock_release_recursive>:
 80032ae:	4770      	bx	lr

080032b0 <_init>:
 80032b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032b2:	bf00      	nop
 80032b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032b6:	bc08      	pop	{r3}
 80032b8:	469e      	mov	lr, r3
 80032ba:	4770      	bx	lr

080032bc <_fini>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	bf00      	nop
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr
